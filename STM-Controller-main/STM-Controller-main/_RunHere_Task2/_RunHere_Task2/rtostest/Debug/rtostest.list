
rtostest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e614  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000103c  0800e7a8  0800e7a8  0001e7a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7e4  0800f7e4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7e4  0800f7e4  0001f7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7ec  0800f7ec  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7ec  0800f7ec  0001f7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7f0  0800f7f0  0001f7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f7f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          00005304  200001f0  200001f0  000201f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200054f4  200054f4  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cf1a  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b26  00000000  00000000  0003d179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019f0  00000000  00000000  00040ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001458  00000000  00000000  00042690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004e83  00000000  00000000  00043ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f1d4  00000000  00000000  0004896b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000da838  00000000  00000000  00067b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007ff4  00000000  00000000  00142378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0014a36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e78c 	.word	0x0800e78c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800e78c 	.word	0x0800e78c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f003 fa6e 	bl	80043c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f89e 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 fb96 	bl	8001620 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ef4:	f000 f926 	bl	8001144 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ef8:	f000 f9c2 	bl	8001280 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000efc:	f000 fa14 	bl	8001328 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000f00:	f000 faba 	bl	8001478 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8000f04:	f000 fb62 	bl	80015cc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f08:	f000 f8ee 	bl	80010e8 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000f0c:	f000 fa60 	bl	80013d0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000f10:	f003 f9ce 	bl	80042b0 <OLED_Init>

  // for debug
  //HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
  // for real task
  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	4928      	ldr	r1, [pc, #160]	; (8000fb8 <main+0xd4>)
 8000f18:	4828      	ldr	r0, [pc, #160]	; (8000fbc <main+0xd8>)
 8000f1a:	f007 f826 	bl	8007f6a <HAL_UART_Receive_IT>
//	encoderRightTasHandle = osThreadNew(StartEncoderRightTask, NULL, &encoderRightTas_attributes);
//
//  /* creation of encoderLeftTask */
//  encoderLeftTaskHandle = osThreadNew(StartEncoderLeftTask, NULL, &encoderLeftTask_attributes);

    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f1e:	4a28      	ldr	r2, [pc, #160]	; (8000fc0 <main+0xdc>)
 8000f20:	2100      	movs	r1, #0
 8000f22:	4828      	ldr	r0, [pc, #160]	; (8000fc4 <main+0xe0>)
 8000f24:	f008 f838 	bl	8008f98 <osThreadNew>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <main+0xe4>)
 8000f2c:	6013      	str	r3, [r2, #0]

    /* creation of MotorTask */
    motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8000f2e:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <main+0xe8>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	4827      	ldr	r0, [pc, #156]	; (8000fd0 <main+0xec>)
 8000f34:	f008 f830 	bl	8008f98 <osThreadNew>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <main+0xf0>)
 8000f3c:	6013      	str	r3, [r2, #0]

    /* creation of oledTask */
    oledTaskHandle = osThreadNew(StartOledTask, NULL, &oledTask_attributes);
 8000f3e:	4a26      	ldr	r2, [pc, #152]	; (8000fd8 <main+0xf4>)
 8000f40:	2100      	movs	r1, #0
 8000f42:	4826      	ldr	r0, [pc, #152]	; (8000fdc <main+0xf8>)
 8000f44:	f008 f828 	bl	8008f98 <osThreadNew>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a25      	ldr	r2, [pc, #148]	; (8000fe0 <main+0xfc>)
 8000f4c:	6013      	str	r3, [r2, #0]

    /* creation of rpiTask */
    rpiTaskHandle = osThreadNew(StartRpiTask, NULL, &rpiTask_attributes);
 8000f4e:	4a25      	ldr	r2, [pc, #148]	; (8000fe4 <main+0x100>)
 8000f50:	2100      	movs	r1, #0
 8000f52:	4825      	ldr	r0, [pc, #148]	; (8000fe8 <main+0x104>)
 8000f54:	f008 f820 	bl	8008f98 <osThreadNew>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a24      	ldr	r2, [pc, #144]	; (8000fec <main+0x108>)
 8000f5c:	6013      	str	r3, [r2, #0]

    /* creation of gyroTask */
    gyroTaskHandle = osThreadNew(StartGyroTask, NULL, &gyroTask_attributes);
 8000f5e:	4a24      	ldr	r2, [pc, #144]	; (8000ff0 <main+0x10c>)
 8000f60:	2100      	movs	r1, #0
 8000f62:	4824      	ldr	r0, [pc, #144]	; (8000ff4 <main+0x110>)
 8000f64:	f008 f818 	bl	8008f98 <osThreadNew>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a23      	ldr	r2, [pc, #140]	; (8000ff8 <main+0x114>)
 8000f6c:	6013      	str	r3, [r2, #0]

    /* creation of bulleyesTask */
    bulleyesTaskHandle = osThreadNew(StartBulleyesTask, NULL, &bulleyesTask_attributes);
 8000f6e:	4a23      	ldr	r2, [pc, #140]	; (8000ffc <main+0x118>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4823      	ldr	r0, [pc, #140]	; (8001000 <main+0x11c>)
 8000f74:	f008 f810 	bl	8008f98 <osThreadNew>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a22      	ldr	r2, [pc, #136]	; (8001004 <main+0x120>)
 8000f7c:	6013      	str	r3, [r2, #0]

	/* creation of encoderRightTas */
	encoderRightTasHandle = osThreadNew(StartEncoderRightTask, NULL, &encoderRightTas_attributes);
 8000f7e:	4a22      	ldr	r2, [pc, #136]	; (8001008 <main+0x124>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	4822      	ldr	r0, [pc, #136]	; (800100c <main+0x128>)
 8000f84:	f008 f808 	bl	8008f98 <osThreadNew>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a21      	ldr	r2, [pc, #132]	; (8001010 <main+0x12c>)
 8000f8c:	6013      	str	r3, [r2, #0]

	/* creation of encoderLeftTask */
	encoderLeftTaskHandle = osThreadNew(StartEncoderLeftTask, NULL, &encoderLeftTask_attributes);
 8000f8e:	4a21      	ldr	r2, [pc, #132]	; (8001014 <main+0x130>)
 8000f90:	2100      	movs	r1, #0
 8000f92:	4821      	ldr	r0, [pc, #132]	; (8001018 <main+0x134>)
 8000f94:	f008 f800 	bl	8008f98 <osThreadNew>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a20      	ldr	r2, [pc, #128]	; (800101c <main+0x138>)
 8000f9c:	6013      	str	r3, [r2, #0]

	/* creation of startJukeTask */
	jukeTaskHandle = osThreadNew(StartJukeTask, NULL, &jukeTask_attributes);
 8000f9e:	4a20      	ldr	r2, [pc, #128]	; (8001020 <main+0x13c>)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4820      	ldr	r0, [pc, #128]	; (8001024 <main+0x140>)
 8000fa4:	f007 fff8 	bl	8008f98 <osThreadNew>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a1f      	ldr	r2, [pc, #124]	; (8001028 <main+0x144>)
 8000fac:	6013      	str	r3, [r2, #0]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fae:	f007 ffa9 	bl	8008f04 <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8000fb2:	f007 ffcb 	bl	8008f4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <main+0xd2>
 8000fb8:	20000430 	.word	0x20000430
 8000fbc:	200003c8 	.word	0x200003c8
 8000fc0:	0800e8b0 	.word	0x0800e8b0
 8000fc4:	080024b1 	.word	0x080024b1
 8000fc8:	2000040c 	.word	0x2000040c
 8000fcc:	0800e8d4 	.word	0x0800e8d4
 8000fd0:	08002561 	.word	0x08002561
 8000fd4:	20000410 	.word	0x20000410
 8000fd8:	0800e8f8 	.word	0x0800e8f8
 8000fdc:	08002aa1 	.word	0x08002aa1
 8000fe0:	20000414 	.word	0x20000414
 8000fe4:	0800e91c 	.word	0x0800e91c
 8000fe8:	08002cbd 	.word	0x08002cbd
 8000fec:	20000418 	.word	0x20000418
 8000ff0:	0800e940 	.word	0x0800e940
 8000ff4:	08002d11 	.word	0x08002d11
 8000ff8:	2000041c 	.word	0x2000041c
 8000ffc:	0800e964 	.word	0x0800e964
 8001000:	08002ec1 	.word	0x08002ec1
 8001004:	20000420 	.word	0x20000420
 8001008:	0800e988 	.word	0x0800e988
 800100c:	08002f1d 	.word	0x08002f1d
 8001010:	20000424 	.word	0x20000424
 8001014:	0800e9ac 	.word	0x0800e9ac
 8001018:	08002fa5 	.word	0x08002fa5
 800101c:	20000428 	.word	0x20000428
 8001020:	0800e9d0 	.word	0x0800e9d0
 8001024:	08003031 	.word	0x08003031
 8001028:	2000042c 	.word	0x2000042c

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b094      	sub	sp, #80	; 0x50
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	2230      	movs	r2, #48	; 0x30
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f00b fa57 	bl	800c4ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <SystemClock_Config+0xb4>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <SystemClock_Config+0xb4>)
 800105a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105e:	6413      	str	r3, [r2, #64]	; 0x40
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <SystemClock_Config+0xb4>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <SystemClock_Config+0xb8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <SystemClock_Config+0xb8>)
 8001076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <SystemClock_Config+0xb8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001088:	2302      	movs	r3, #2
 800108a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001090:	2310      	movs	r3, #16
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001094:	2300      	movs	r3, #0
 8001096:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 0320 	add.w	r3, r7, #32
 800109c:	4618      	mov	r0, r3
 800109e:	f004 fd5b 	bl	8005b58 <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010a8:	f002 fb92 	bl	80037d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ac:	230f      	movs	r3, #15
 80010ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f004 ffbe 	bl	8006048 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010d2:	f002 fb7d 	bl	80037d0 <Error_Handler>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3750      	adds	r7, #80	; 0x50
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40007000 	.word	0x40007000

080010e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_I2C1_Init+0x50>)
 80010ee:	4a13      	ldr	r2, [pc, #76]	; (800113c <MX_I2C1_Init+0x54>)
 80010f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_I2C1_Init+0x50>)
 80010f4:	4a12      	ldr	r2, [pc, #72]	; (8001140 <MX_I2C1_Init+0x58>)
 80010f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_I2C1_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_I2C1_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_I2C1_Init+0x50>)
 8001106:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800110a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <MX_I2C1_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_I2C1_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_I2C1_Init+0x50>)
 8001126:	f003 fd59 	bl	8004bdc <HAL_I2C_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001130:	f002 fb4e 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2000020c 	.word	0x2000020c
 800113c:	40005400 	.word	0x40005400
 8001140:	000186a0 	.word	0x000186a0

08001144 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b096      	sub	sp, #88	; 0x58
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	615a      	str	r2, [r3, #20]
 8001174:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2220      	movs	r2, #32
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f00b f9b6 	bl	800c4ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <MX_TIM1_Init+0x134>)
 8001184:	4a3d      	ldr	r2, [pc, #244]	; (800127c <MX_TIM1_Init+0x138>)
 8001186:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001188:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <MX_TIM1_Init+0x134>)
 800118a:	22a0      	movs	r2, #160	; 0xa0
 800118c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b3a      	ldr	r3, [pc, #232]	; (8001278 <MX_TIM1_Init+0x134>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001194:	4b38      	ldr	r3, [pc, #224]	; (8001278 <MX_TIM1_Init+0x134>)
 8001196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800119a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b36      	ldr	r3, [pc, #216]	; (8001278 <MX_TIM1_Init+0x134>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a2:	4b35      	ldr	r3, [pc, #212]	; (8001278 <MX_TIM1_Init+0x134>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011a8:	4b33      	ldr	r3, [pc, #204]	; (8001278 <MX_TIM1_Init+0x134>)
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ae:	4832      	ldr	r0, [pc, #200]	; (8001278 <MX_TIM1_Init+0x134>)
 80011b0:	f005 f92a 	bl	8006408 <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011ba:	f002 fb09 	bl	80037d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c8:	4619      	mov	r1, r3
 80011ca:	482b      	ldr	r0, [pc, #172]	; (8001278 <MX_TIM1_Init+0x134>)
 80011cc:	f005 ff9e 	bl	800710c <HAL_TIM_ConfigClockSource>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011d6:	f002 fafb 	bl	80037d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011da:	4827      	ldr	r0, [pc, #156]	; (8001278 <MX_TIM1_Init+0x134>)
 80011dc:	f005 f963 	bl	80064a6 <HAL_TIM_PWM_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011e6:	f002 faf3 	bl	80037d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011f6:	4619      	mov	r1, r3
 80011f8:	481f      	ldr	r0, [pc, #124]	; (8001278 <MX_TIM1_Init+0x134>)
 80011fa:	f006 fcf5 	bl	8007be8 <HAL_TIMEx_MasterConfigSynchronization>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001204:	f002 fae4 	bl	80037d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001208:	2360      	movs	r3, #96	; 0x60
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001210:	2300      	movs	r3, #0
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	220c      	movs	r2, #12
 8001226:	4619      	mov	r1, r3
 8001228:	4813      	ldr	r0, [pc, #76]	; (8001278 <MX_TIM1_Init+0x134>)
 800122a:	f005 fead 	bl	8006f88 <HAL_TIM_PWM_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001234:	f002 facc 	bl	80037d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800124c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001250:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4619      	mov	r1, r3
 800125a:	4807      	ldr	r0, [pc, #28]	; (8001278 <MX_TIM1_Init+0x134>)
 800125c:	f006 fd40 	bl	8007ce0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001266:	f002 fab3 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800126a:	4803      	ldr	r0, [pc, #12]	; (8001278 <MX_TIM1_Init+0x134>)
 800126c:	f002 fc92 	bl	8003b94 <HAL_TIM_MspPostInit>

}
 8001270:	bf00      	nop
 8001272:	3758      	adds	r7, #88	; 0x58
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000260 	.word	0x20000260
 800127c:	40010000 	.word	0x40010000

08001280 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2224      	movs	r2, #36	; 0x24
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f00b f92d 	bl	800c4ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800129c:	4b21      	ldr	r3, [pc, #132]	; (8001324 <MX_TIM2_Init+0xa4>)
 800129e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012a4:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <MX_TIM2_Init+0xa4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <MX_TIM2_Init+0xa4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012b0:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <MX_TIM2_Init+0xa4>)
 80012b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_TIM2_Init+0xa4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_TIM2_Init+0xa4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012c4:	2303      	movs	r3, #3
 80012c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012cc:	2301      	movs	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80012d4:	230a      	movs	r3, #10
 80012d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012dc:	2301      	movs	r3, #1
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80012e4:	230a      	movs	r3, #10
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_TIM2_Init+0xa4>)
 80012f0:	f005 fb72 	bl	80069d8 <HAL_TIM_Encoder_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012fa:	f002 fa69 	bl	80037d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <MX_TIM2_Init+0xa4>)
 800130c:	f006 fc6c 	bl	8007be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001316:	f002 fa5b 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	3730      	adds	r7, #48	; 0x30
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200002a8 	.word	0x200002a8

08001328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	; 0x30
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	2224      	movs	r2, #36	; 0x24
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f00b f8d9 	bl	800c4ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <MX_TIM3_Init+0xa0>)
 8001346:	4a21      	ldr	r2, [pc, #132]	; (80013cc <MX_TIM3_Init+0xa4>)
 8001348:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <MX_TIM3_Init+0xa0>)
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <MX_TIM3_Init+0xa0>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <MX_TIM3_Init+0xa0>)
 8001358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800135c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_TIM3_Init+0xa0>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <MX_TIM3_Init+0xa0>)
 8001366:	2200      	movs	r2, #0
 8001368:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800136a:	2303      	movs	r3, #3
 800136c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800137a:	230a      	movs	r3, #10
 800137c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001382:	2301      	movs	r3, #1
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800138a:	230a      	movs	r3, #10
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4619      	mov	r1, r3
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <MX_TIM3_Init+0xa0>)
 8001396:	f005 fb1f 	bl	80069d8 <HAL_TIM_Encoder_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80013a0:	f002 fa16 	bl	80037d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_TIM3_Init+0xa0>)
 80013b2:	f006 fc19 	bl	8007be8 <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013bc:	f002 fa08 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	3730      	adds	r7, #48	; 0x30
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200002f0 	.word	0x200002f0
 80013cc:	40000400 	.word	0x40000400

080013d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013e0:	463b      	mov	r3, r7
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <MX_TIM4_Init+0xa0>)
 80013ee:	4a21      	ldr	r2, [pc, #132]	; (8001474 <MX_TIM4_Init+0xa4>)
 80013f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <MX_TIM4_Init+0xa0>)
 80013f4:	2210      	movs	r2, #16
 80013f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <MX_TIM4_Init+0xa0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <MX_TIM4_Init+0xa0>)
 8001400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001404:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <MX_TIM4_Init+0xa0>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <MX_TIM4_Init+0xa0>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001412:	4817      	ldr	r0, [pc, #92]	; (8001470 <MX_TIM4_Init+0xa0>)
 8001414:	f005 f968 	bl	80066e8 <HAL_TIM_IC_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800141e:	f002 f9d7 	bl	80037d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4619      	mov	r1, r3
 8001430:	480f      	ldr	r0, [pc, #60]	; (8001470 <MX_TIM4_Init+0xa0>)
 8001432:	f006 fbd9 	bl	8007be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800143c:	f002 f9c8 	bl	80037d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001440:	2300      	movs	r3, #0
 8001442:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001444:	2301      	movs	r3, #1
 8001446:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	2200      	movs	r2, #0
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <MX_TIM4_Init+0xa0>)
 8001458:	f005 fcfa 	bl	8006e50 <HAL_TIM_IC_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001462:	f002 f9b5 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000338 	.word	0x20000338
 8001474:	40000800 	.word	0x40000800

08001478 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b096      	sub	sp, #88	; 0x58
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2220      	movs	r2, #32
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f00b f81c 	bl	800c4ee <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014b6:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <MX_TIM8_Init+0x14c>)
 80014b8:	4a43      	ldr	r2, [pc, #268]	; (80015c8 <MX_TIM8_Init+0x150>)
 80014ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80014bc:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <MX_TIM8_Init+0x14c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c2:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <MX_TIM8_Init+0x14c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80014c8:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <MX_TIM8_Init+0x14c>)
 80014ca:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80014ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d0:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <MX_TIM8_Init+0x14c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <MX_TIM8_Init+0x14c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <MX_TIM8_Init+0x14c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014e2:	4838      	ldr	r0, [pc, #224]	; (80015c4 <MX_TIM8_Init+0x14c>)
 80014e4:	f004 ff90 	bl	8006408 <HAL_TIM_Base_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80014ee:	f002 f96f 	bl	80037d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014fc:	4619      	mov	r1, r3
 80014fe:	4831      	ldr	r0, [pc, #196]	; (80015c4 <MX_TIM8_Init+0x14c>)
 8001500:	f005 fe04 	bl	800710c <HAL_TIM_ConfigClockSource>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800150a:	f002 f961 	bl	80037d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800150e:	482d      	ldr	r0, [pc, #180]	; (80015c4 <MX_TIM8_Init+0x14c>)
 8001510:	f004 ffc9 	bl	80064a6 <HAL_TIM_PWM_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800151a:	f002 f959 	bl	80037d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001526:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800152a:	4619      	mov	r1, r3
 800152c:	4825      	ldr	r0, [pc, #148]	; (80015c4 <MX_TIM8_Init+0x14c>)
 800152e:	f006 fb5b 	bl	8007be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001538:	f002 f94a 	bl	80037d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153c:	2360      	movs	r3, #96	; 0x60
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001548:	2300      	movs	r3, #0
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155c:	2200      	movs	r2, #0
 800155e:	4619      	mov	r1, r3
 8001560:	4818      	ldr	r0, [pc, #96]	; (80015c4 <MX_TIM8_Init+0x14c>)
 8001562:	f005 fd11 	bl	8006f88 <HAL_TIM_PWM_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800156c:	f002 f930 	bl	80037d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001574:	2204      	movs	r2, #4
 8001576:	4619      	mov	r1, r3
 8001578:	4812      	ldr	r0, [pc, #72]	; (80015c4 <MX_TIM8_Init+0x14c>)
 800157a:	f005 fd05 	bl	8006f88 <HAL_TIM_PWM_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001584:	f002 f924 	bl	80037d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800159c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	4806      	ldr	r0, [pc, #24]	; (80015c4 <MX_TIM8_Init+0x14c>)
 80015ac:	f006 fb98 	bl	8007ce0 <HAL_TIMEx_ConfigBreakDeadTime>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80015b6:	f002 f90b 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	3758      	adds	r7, #88	; 0x58
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000380 	.word	0x20000380
 80015c8:	40010400 	.word	0x40010400

080015cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_USART3_UART_Init+0x4c>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <MX_USART3_UART_Init+0x50>)
 80015d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <MX_USART3_UART_Init+0x4c>)
 80015d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_USART3_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_USART3_UART_Init+0x4c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_USART3_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_USART3_UART_Init+0x4c>)
 80015f2:	220c      	movs	r2, #12
 80015f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_USART3_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_USART3_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_USART3_UART_Init+0x4c>)
 8001604:	f006 fbd2 	bl	8007dac <HAL_UART_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800160e:	f002 f8df 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200003c8 	.word	0x200003c8
 800161c:	40004800 	.word	0x40004800

08001620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	; 0x30
 8001624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	4b50      	ldr	r3, [pc, #320]	; (800177c <MX_GPIO_Init+0x15c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a4f      	ldr	r2, [pc, #316]	; (800177c <MX_GPIO_Init+0x15c>)
 8001640:	f043 0310 	orr.w	r3, r3, #16
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b4d      	ldr	r3, [pc, #308]	; (800177c <MX_GPIO_Init+0x15c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	4b49      	ldr	r3, [pc, #292]	; (800177c <MX_GPIO_Init+0x15c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a48      	ldr	r2, [pc, #288]	; (800177c <MX_GPIO_Init+0x15c>)
 800165c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b46      	ldr	r3, [pc, #280]	; (800177c <MX_GPIO_Init+0x15c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b42      	ldr	r3, [pc, #264]	; (800177c <MX_GPIO_Init+0x15c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a41      	ldr	r2, [pc, #260]	; (800177c <MX_GPIO_Init+0x15c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <MX_GPIO_Init+0x15c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <MX_GPIO_Init+0x15c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a3a      	ldr	r2, [pc, #232]	; (800177c <MX_GPIO_Init+0x15c>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b38      	ldr	r3, [pc, #224]	; (800177c <MX_GPIO_Init+0x15c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b34      	ldr	r3, [pc, #208]	; (800177c <MX_GPIO_Init+0x15c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a33      	ldr	r2, [pc, #204]	; (800177c <MX_GPIO_Init+0x15c>)
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b31      	ldr	r3, [pc, #196]	; (800177c <MX_GPIO_Init+0x15c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <MX_GPIO_Init+0x15c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a2c      	ldr	r2, [pc, #176]	; (800177c <MX_GPIO_Init+0x15c>)
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <MX_GPIO_Init+0x15c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80016de:	2200      	movs	r2, #0
 80016e0:	f242 51e0 	movw	r1, #9696	; 0x25e0
 80016e4:	4826      	ldr	r0, [pc, #152]	; (8001780 <MX_GPIO_Init+0x160>)
 80016e6:	f003 fa45 	bl	8004b74 <HAL_GPIO_WritePin>
                          |LED3_Pin|TRIG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	213c      	movs	r1, #60	; 0x3c
 80016ee:	4825      	ldr	r0, [pc, #148]	; (8001784 <MX_GPIO_Init+0x164>)
 80016f0:	f003 fa40 	bl	8004b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016fa:	4823      	ldr	r0, [pc, #140]	; (8001788 <MX_GPIO_Init+0x168>)
 80016fc:	f003 fa3a 	bl	8004b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin TRIG_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001700:	f242 53e0 	movw	r3, #9696	; 0x25e0
 8001704:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin|TRIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	4819      	ldr	r0, [pc, #100]	; (8001780 <MX_GPIO_Init+0x160>)
 800171a:	f003 f88f 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800171e:	233c      	movs	r3, #60	; 0x3c
 8001720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001722:	2301      	movs	r3, #1
 8001724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172a:	2302      	movs	r3, #2
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	4619      	mov	r1, r3
 8001734:	4813      	ldr	r0, [pc, #76]	; (8001784 <MX_GPIO_Init+0x164>)
 8001736:	f003 f881 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800173a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800173e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	2301      	movs	r3, #1
 8001742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	4619      	mov	r1, r3
 8001752:	480d      	ldr	r0, [pc, #52]	; (8001788 <MX_GPIO_Init+0x168>)
 8001754:	f003 f872 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB_Pin */
  GPIO_InitStruct.Pin = USER_PB_Pin;
 8001758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800175e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	4619      	mov	r1, r3
 800176e:	4807      	ldr	r0, [pc, #28]	; (800178c <MX_GPIO_Init+0x16c>)
 8001770:	f003 f864 	bl	800483c <HAL_GPIO_Init>

}
 8001774:	bf00      	nop
 8001776:	3730      	adds	r7, #48	; 0x30
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	40021000 	.word	0x40021000
 8001784:	40020000 	.word	0x40020000
 8001788:	40020400 	.word	0x40020400
 800178c:	40020c00 	.word	0x40020c00

08001790 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	// for debug
	//HAL_UART_Receive_IT (&huart3, aRxBuffer, 1);
	// for real task
	HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
 8001798:	2201      	movs	r2, #1
 800179a:	4906      	ldr	r1, [pc, #24]	; (80017b4 <HAL_UART_RxCpltCallback+0x24>)
 800179c:	4806      	ldr	r0, [pc, #24]	; (80017b8 <HAL_UART_RxCpltCallback+0x28>)
 800179e:	f006 fbe4 	bl	8007f6a <HAL_UART_Receive_IT>
	update++;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_UART_RxCpltCallback+0x2c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_UART_RxCpltCallback+0x2c>)
 80017aa:	6013      	str	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000430 	.word	0x20000430
 80017b8:	200003c8 	.word	0x200003c8
 80017bc:	20000444 	.word	0x20000444

080017c0 <delay>:
 	    }
}


void delay(uint16_t time)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
 __HAL_TIM_SET_COUNTER(&htim4, 0);
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <delay+0x30>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2200      	movs	r2, #0
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24
 while (__HAL_TIM_GET_COUNTER (&htim4) < time);
 80017d2:	bf00      	nop
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <delay+0x30>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d3f9      	bcc.n	80017d4 <delay+0x14>
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000338 	.word	0x20000338
 80017f4:	00000000 	.word	0x00000000

080017f8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7f1b      	ldrb	r3, [r3, #28]
 8001804:	2b01      	cmp	r3, #1
 8001806:	f040 808d 	bne.w	8001924 <HAL_TIM_IC_CaptureCallback+0x12c>
 {
  if (Is_First_Captured == 0)
 800180a:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x140>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d11b      	bne.n	800184a <HAL_TIM_IC_CaptureCallback+0x52>
  {
   IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001812:	2100      	movs	r1, #0
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f005 fd41 	bl	800729c <HAL_TIM_ReadCapturedValue>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001820:	601a      	str	r2, [r3, #0]
   Is_First_Captured = 1;
 8001822:	4b45      	ldr	r3, [pc, #276]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]
   __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6a1a      	ldr	r2, [r3, #32]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 020a 	bic.w	r2, r2, #10
 8001836:	621a      	str	r2, [r3, #32]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6a1a      	ldr	r2, [r3, #32]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0202 	orr.w	r2, r2, #2
 8001846:	621a      	str	r2, [r3, #32]

   usflag=1;

  }
 }
}
 8001848:	e06c      	b.n	8001924 <HAL_TIM_IC_CaptureCallback+0x12c>
  else if (Is_First_Captured == 1)
 800184a:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x140>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d168      	bne.n	8001924 <HAL_TIM_IC_CaptureCallback+0x12c>
   IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001852:	2100      	movs	r1, #0
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f005 fd21 	bl	800729c <HAL_TIM_ReadCapturedValue>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	4b38      	ldr	r3, [pc, #224]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001860:	601a      	str	r2, [r3, #0]
   __HAL_TIM_SET_COUNTER(htim,0);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
   if (IC_Val2 > IC_Val1)
 800186a:	4b35      	ldr	r3, [pc, #212]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x148>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b33      	ldr	r3, [pc, #204]	; (800193c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	dd0d      	ble.n	8001892 <HAL_TIM_IC_CaptureCallback+0x9a>
    Difference = IC_Val2 - IC_Val1;
 8001876:	4b32      	ldr	r3, [pc, #200]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <HAL_TIM_IC_CaptureCallback+0x144>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fe4f 	bl	8000524 <__aeabi_i2d>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	492e      	ldr	r1, [pc, #184]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800188c:	e9c1 2300 	strd	r2, r3, [r1]
 8001890:	e015      	b.n	80018be <HAL_TIM_IC_CaptureCallback+0xc6>
   else if (IC_Val1 > IC_Val2)
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	dd0f      	ble.n	80018be <HAL_TIM_IC_CaptureCallback+0xc6>
    Difference = (65535 - IC_Val1) + IC_Val2;
 800189e:	4b27      	ldr	r3, [pc, #156]	; (800193c <HAL_TIM_IC_CaptureCallback+0x144>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80018a6:	33ff      	adds	r3, #255	; 0xff
 80018a8:	4a25      	ldr	r2, [pc, #148]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x148>)
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	4413      	add	r3, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe38 	bl	8000524 <__aeabi_i2d>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4922      	ldr	r1, [pc, #136]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80018ba:	e9c1 2300 	strd	r2, r3, [r1]
   Distance = Difference * .0343/2;
 80018be:	4b21      	ldr	r3, [pc, #132]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80018c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c4:	a31a      	add	r3, pc, #104	; (adr r3, 8001930 <HAL_TIM_IC_CaptureCallback+0x138>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe fe95 	bl	80005f8 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018de:	f7fe ffb5 	bl	800084c <__aeabi_ddiv>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4918      	ldr	r1, [pc, #96]	; (8001948 <HAL_TIM_IC_CaptureCallback+0x150>)
 80018e8:	e9c1 2300 	strd	r2, r3, [r1]
   Is_First_Captured = 0;
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x140>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
   __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6a1a      	ldr	r2, [r3, #32]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 020a 	bic.w	r2, r2, #10
 8001900:	621a      	str	r2, [r3, #32]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6a12      	ldr	r2, [r2, #32]
 800190c:	621a      	str	r2, [r3, #32]
   __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_TIM_IC_CaptureCallback+0x154>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_TIM_IC_CaptureCallback+0x154>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0202 	bic.w	r2, r2, #2
 800191c:	60da      	str	r2, [r3, #12]
   usflag=1;
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	f3af 8000 	nop.w
 8001930:	04816f00 	.word	0x04816f00
 8001934:	3fa18fc5 	.word	0x3fa18fc5
 8001938:	20000598 	.word	0x20000598
 800193c:	2000059c 	.word	0x2000059c
 8001940:	200005a0 	.word	0x200005a0
 8001944:	200005a8 	.word	0x200005a8
 8001948:	200005b0 	.word	0x200005b0
 800194c:	20000338 	.word	0x20000338
 8001950:	20000010 	.word	0x20000010

08001954 <ultrasonic_read>:


void ultrasonic_read(void){
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
    //code for ultrasound
	usflag=0;
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <ultrasonic_read+0x3c>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800195e:	2201      	movs	r2, #1
 8001960:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001964:	480b      	ldr	r0, [pc, #44]	; (8001994 <ultrasonic_read+0x40>)
 8001966:	f003 f905 	bl	8004b74 <HAL_GPIO_WritePin>
	delay(10);
 800196a:	200a      	movs	r0, #10
 800196c:	f7ff ff28 	bl	80017c0 <delay>
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001976:	4807      	ldr	r0, [pc, #28]	; (8001994 <ultrasonic_read+0x40>)
 8001978:	f003 f8fc 	bl	8004b74 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <ultrasonic_read+0x44>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <ultrasonic_read+0x44>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0202 	orr.w	r2, r2, #2
 800198a:	60da      	str	r2, [r3, #12]
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000010 	.word	0x20000010
 8001994:	40021000 	.word	0x40021000
 8001998:	20000338 	.word	0x20000338

0800199c <buzzerBeep>:

void buzzerBeep(int time)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer On
 80019a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019a8:	4807      	ldr	r0, [pc, #28]	; (80019c8 <buzzerBeep+0x2c>)
 80019aa:	f003 f8fc 	bl	8004ba6 <HAL_GPIO_TogglePin>
	HAL_Delay(time);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f002 fd7b 	bl	80044ac <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer Off
 80019b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ba:	4803      	ldr	r0, [pc, #12]	; (80019c8 <buzzerBeep+0x2c>)
 80019bc:	f003 f8f3 	bl	8004ba6 <HAL_GPIO_TogglePin>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40020400 	.word	0x40020400
 80019cc:	00000000 	.word	0x00000000

080019d0 <moveCarStraight>:


void moveCarStraight(double distance)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	ed87 0b00 	vstr	d0, [r7]
	distance = distance*75.6;
 80019da:	a32e      	add	r3, pc, #184	; (adr r3, 8001a94 <moveCarStraight+0xc4>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019e4:	f7fe fe08 	bl	80005f8 <__aeabi_dmul>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	e9c7 2300 	strd	r2, r3, [r7]
	pwmVal_servo = 149;
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <moveCarStraight+0xa8>)
 80019f2:	2295      	movs	r2, #149	; 0x95
 80019f4:	801a      	strh	r2, [r3, #0]
	osDelay(150);
 80019f6:	2096      	movs	r0, #150	; 0x96
 80019f8:	f007 fb60 	bl	80090bc <osDelay>
	e_brake = 0;
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <moveCarStraight+0xac>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001a02:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <moveCarStraight+0xb0>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
	universalDistance = distance;
 8001a08:	491e      	ldr	r1, [pc, #120]	; (8001a84 <moveCarStraight+0xb4>)
 8001a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a0e:	e9c1 2300 	strd	r2, r3, [r1]
	rightTarget = leftEncoderVal;
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <moveCarStraight+0xb8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a1d      	ldr	r2, [pc, #116]	; (8001a8c <moveCarStraight+0xbc>)
 8001a18:	6013      	str	r3, [r2, #0]
	leftTarget = leftEncoderVal;
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <moveCarStraight+0xb8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <moveCarStraight+0xc0>)
 8001a20:	6013      	str	r3, [r2, #0]
	rightTarget += distance;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <moveCarStraight+0xbc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fd7c 	bl	8000524 <__aeabi_i2d>
 8001a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a30:	f7fe fc2c 	bl	800028c <__adddf3>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f88c 	bl	8000b58 <__aeabi_d2iz>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <moveCarStraight+0xbc>)
 8001a44:	6013      	str	r3, [r2, #0]
	leftTarget += distance;
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <moveCarStraight+0xc0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fd6a 	bl	8000524 <__aeabi_i2d>
 8001a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a54:	f7fe fc1a 	bl	800028c <__adddf3>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7ff f87a 	bl	8000b58 <__aeabi_d2iz>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <moveCarStraight+0xc0>)
 8001a68:	6013      	str	r3, [r2, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	f3af 8000 	nop.w
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000450 	.word	0x20000450
 8001a80:	2000044c 	.word	0x2000044c
 8001a84:	20000488 	.word	0x20000488
 8001a88:	20000460 	.word	0x20000460
 8001a8c:	20000464 	.word	0x20000464
 8001a90:	20000468 	.word	0x20000468
 8001a94:	66666666 	.word	0x66666666
 8001a98:	4052e666 	.word	0x4052e666

08001a9c <moveCarStraightSensor>:

void moveCarStraightSensor(int usTarget)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	usTargetFUCK= usTarget;
 8001aa4:	4a09      	ldr	r2, [pc, #36]	; (8001acc <moveCarStraightSensor+0x30>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]
	pwmVal_servo = 149;
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <moveCarStraightSensor+0x34>)
 8001aac:	2295      	movs	r2, #149	; 0x95
 8001aae:	801a      	strh	r2, [r3, #0]
	osDelay(100);
 8001ab0:	2064      	movs	r0, #100	; 0x64
 8001ab2:	f007 fb03 	bl	80090bc <osDelay>
	e_brake = 0;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <moveCarStraightSensor+0x38>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <moveCarStraightSensor+0x3c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]

}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000004 	.word	0x20000004
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000450 	.word	0x20000450
 8001ad8:	2000044c 	.word	0x2000044c

08001adc <moveCarRight>:
	pwmVal_servo = 149;
	osDelay(200);
}

void moveCarRight(double angle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = 230;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <moveCarRight+0x44>)
 8001ae8:	22e6      	movs	r2, #230	; 0xe6
 8001aea:	801a      	strh	r2, [r3, #0]
	osDelay(10);
 8001aec:	200a      	movs	r0, #10
 8001aee:	f007 fae5 	bl	80090bc <osDelay>
	e_brake = 0;
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <moveCarRight+0x48>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <moveCarRight+0x4c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <moveCarRight+0x50>)
 8001b00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b08:	f7fe fbbe 	bl	8000288 <__aeabi_dsub>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4906      	ldr	r1, [pc, #24]	; (8001b2c <moveCarRight+0x50>)
 8001b12:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000450 	.word	0x20000450
 8001b28:	2000044c 	.word	0x2000044c
 8001b2c:	20000470 	.word	0x20000470

08001b30 <moveCarLeft>:

void moveCarLeft(double angle)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = 106;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <moveCarLeft+0x44>)
 8001b3c:	226a      	movs	r2, #106	; 0x6a
 8001b3e:	801a      	strh	r2, [r3, #0]
	osDelay(10);
 8001b40:	200a      	movs	r0, #10
 8001b42:	f007 fabb 	bl	80090bc <osDelay>
	e_brake = 0;
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <moveCarLeft+0x48>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <moveCarLeft+0x4c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <moveCarLeft+0x50>)
 8001b54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b5c:	f7fe fb96 	bl	800028c <__adddf3>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4906      	ldr	r1, [pc, #24]	; (8001b80 <moveCarLeft+0x50>)
 8001b66:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000450 	.word	0x20000450
 8001b7c:	2000044c 	.word	0x2000044c
 8001b80:	20000470 	.word	0x20000470

08001b84 <moveCarSlideRight>:

void moveCarSlideRight(int value){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	int sign = 1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
//		sign = -1;
//	}
//	times_acceptable=0;
//	moveCarStraight((600/75.19)*sign);
//	while(finishCheck());
	pwmVal_servo = 230;
 8001b90:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <moveCarSlideRight+0x88>)
 8001b92:	22e6      	movs	r2, #230	; 0xe6
 8001b94:	801a      	strh	r2, [r3, #0]

	osDelay(200);
 8001b96:	20c8      	movs	r0, #200	; 0xc8
 8001b98:	f007 fa90 	bl	80090bc <osDelay>

	// for 10-40 slide, => 36
	times_acceptable=0;
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <moveCarSlideRight+0x8c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
	moveCarRight(value*sign);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fcba 	bl	8000524 <__aeabi_i2d>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	ec43 2b10 	vmov	d0, r2, r3
 8001bb8:	f7ff ff90 	bl	8001adc <moveCarRight>
	while(finishCheck());
 8001bbc:	bf00      	nop
 8001bbe:	f000 fbbf 	bl	8002340 <finishCheck>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1fa      	bne.n	8001bbe <moveCarSlideRight+0x3a>
	pwmVal_servo = 106;
 8001bc8:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <moveCarSlideRight+0x88>)
 8001bca:	226a      	movs	r2, #106	; 0x6a
 8001bcc:	801a      	strh	r2, [r3, #0]
	osDelay(150);
 8001bce:	2096      	movs	r0, #150	; 0x96
 8001bd0:	f007 fa74 	bl	80090bc <osDelay>

	times_acceptable=0;
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <moveCarSlideRight+0x8c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
	moveCarLeft(value*sign);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fc9e 	bl	8000524 <__aeabi_i2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	ec43 2b10 	vmov	d0, r2, r3
 8001bf0:	f7ff ff9e 	bl	8001b30 <moveCarLeft>
	while(finishCheck());
 8001bf4:	bf00      	nop
 8001bf6:	f000 fba3 	bl	8002340 <finishCheck>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1fa      	bne.n	8001bf6 <moveCarSlideRight+0x72>
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	2000044c 	.word	0x2000044c

08001c14 <moveCarSlideLeft>:

void moveCarSlideLeft(int value){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	int sign = 1;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
//		sign = -1;
//	}
//	times_acceptable=0;
//	moveCarStraight((600/75.19)*sign);
//	while(finishCheck());
	pwmVal_servo = 106;
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <moveCarSlideLeft+0x88>)
 8001c22:	226a      	movs	r2, #106	; 0x6a
 8001c24:	801a      	strh	r2, [r3, #0]

	osDelay(200);
 8001c26:	20c8      	movs	r0, #200	; 0xc8
 8001c28:	f007 fa48 	bl	80090bc <osDelay>

	// for 10-40 slide, => 36
	times_acceptable=0;
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <moveCarSlideLeft+0x8c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
	moveCarLeft(value*sign);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc72 	bl	8000524 <__aeabi_i2d>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	ec43 2b10 	vmov	d0, r2, r3
 8001c48:	f7ff ff72 	bl	8001b30 <moveCarLeft>
	while(finishCheck());
 8001c4c:	bf00      	nop
 8001c4e:	f000 fb77 	bl	8002340 <finishCheck>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1fa      	bne.n	8001c4e <moveCarSlideLeft+0x3a>
	pwmVal_servo = 230;
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <moveCarSlideLeft+0x88>)
 8001c5a:	22e6      	movs	r2, #230	; 0xe6
 8001c5c:	801a      	strh	r2, [r3, #0]
	osDelay(5);
 8001c5e:	2005      	movs	r0, #5
 8001c60:	f007 fa2c 	bl	80090bc <osDelay>

	times_acceptable=0;
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <moveCarSlideLeft+0x8c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
	moveCarRight(value*sign);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc56 	bl	8000524 <__aeabi_i2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	ec43 2b10 	vmov	d0, r2, r3
 8001c80:	f7ff ff2c 	bl	8001adc <moveCarRight>
	while(finishCheck());
 8001c84:	bf00      	nop
 8001c86:	f000 fb5b 	bl	8002340 <finishCheck>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1fa      	bne.n	8001c86 <moveCarSlideLeft+0x72>
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	2000044c 	.word	0x2000044c

08001ca4 <PID_Control>:
}



int PID_Control(int error, int right)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
	int outputPWM = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]

	if(right){//rightMotor
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d018      	beq.n	8001cea <PID_Control+0x46>
		if(error>0){//go forward
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	dd0a      	ble.n	8001cd4 <PID_Control+0x30>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	2110      	movs	r1, #16
 8001cc2:	4839      	ldr	r0, [pc, #228]	; (8001da8 <PID_Control+0x104>)
 8001cc4:	f002 ff56 	bl	8004b74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2120      	movs	r1, #32
 8001ccc:	4836      	ldr	r0, [pc, #216]	; (8001da8 <PID_Control+0x104>)
 8001cce:	f002 ff51 	bl	8004b74 <HAL_GPIO_WritePin>
 8001cd2:	e022      	b.n	8001d1a <PID_Control+0x76>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2110      	movs	r1, #16
 8001cd8:	4833      	ldr	r0, [pc, #204]	; (8001da8 <PID_Control+0x104>)
 8001cda:	f002 ff4b 	bl	8004b74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	4831      	ldr	r0, [pc, #196]	; (8001da8 <PID_Control+0x104>)
 8001ce4:	f002 ff46 	bl	8004b74 <HAL_GPIO_WritePin>
 8001ce8:	e017      	b.n	8001d1a <PID_Control+0x76>
		}
	}else{//leftMotor
		if(error>0){//go forward
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	dd0a      	ble.n	8001d06 <PID_Control+0x62>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	2108      	movs	r1, #8
 8001cf4:	482c      	ldr	r0, [pc, #176]	; (8001da8 <PID_Control+0x104>)
 8001cf6:	f002 ff3d 	bl	8004b74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2104      	movs	r1, #4
 8001cfe:	482a      	ldr	r0, [pc, #168]	; (8001da8 <PID_Control+0x104>)
 8001d00:	f002 ff38 	bl	8004b74 <HAL_GPIO_WritePin>
 8001d04:	e009      	b.n	8001d1a <PID_Control+0x76>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001d06:	2200      	movs	r2, #0
 8001d08:	2108      	movs	r1, #8
 8001d0a:	4827      	ldr	r0, [pc, #156]	; (8001da8 <PID_Control+0x104>)
 8001d0c:	f002 ff32 	bl	8004b74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001d10:	2201      	movs	r2, #1
 8001d12:	2104      	movs	r1, #4
 8001d14:	4824      	ldr	r0, [pc, #144]	; (8001da8 <PID_Control+0x104>)
 8001d16:	f002 ff2d 	bl	8004b74 <HAL_GPIO_WritePin>
		}
	}


	if(error<0){
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	da02      	bge.n	8001d26 <PID_Control+0x82>
		error *= -1;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	425b      	negs	r3, r3
 8001d24:	607b      	str	r3, [r7, #4]
	}

	if(error > 2000){
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d2c:	dd05      	ble.n	8001d3a <PID_Control+0x96>
		outputPWM += 7500;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8001d34:	330c      	adds	r3, #12
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	e030      	b.n	8001d9c <PID_Control+0xf8>
	}else if(error > 500){
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d40:	dd05      	ble.n	8001d4e <PID_Control+0xaa>
		outputPWM += 6000;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8001d48:	3310      	adds	r3, #16
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	e026      	b.n	8001d9c <PID_Control+0xf8>
	}else if(error > 200){
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2bc8      	cmp	r3, #200	; 0xc8
 8001d52:	dd04      	ble.n	8001d5e <PID_Control+0xba>
		outputPWM += 2000;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	e01e      	b.n	8001d9c <PID_Control+0xf8>
	}else if(error > 100){
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b64      	cmp	r3, #100	; 0x64
 8001d62:	dd04      	ble.n	8001d6e <PID_Control+0xca>
		outputPWM += 1500;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	e016      	b.n	8001d9c <PID_Control+0xf8>
	}else if(error > 50){
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b32      	cmp	r3, #50	; 0x32
 8001d72:	dd04      	ble.n	8001d7e <PID_Control+0xda>
		outputPWM += 1100;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	e00e      	b.n	8001d9c <PID_Control+0xf8>
	}else if(error >=1){
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	dd05      	ble.n	8001d90 <PID_Control+0xec>
		times_acceptable++;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <PID_Control+0x108>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	4a08      	ldr	r2, [pc, #32]	; (8001dac <PID_Control+0x108>)
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e005      	b.n	8001d9c <PID_Control+0xf8>
		outputPWM += 0;
	}else{
		times_acceptable +=500;;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <PID_Control+0x108>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d98:	4a04      	ldr	r2, [pc, #16]	; (8001dac <PID_Control+0x108>)
 8001d9a:	6013      	str	r3, [r2, #0]
		outputPWM += 0;
	}
	return outputPWM;
 8001d9c:	68fb      	ldr	r3, [r7, #12]

}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40020000 	.word	0x40020000
 8001dac:	2000044c 	.word	0x2000044c

08001db0 <PID_Angle_30>:

int PID_Angle_30(double errord,  int right)
{
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	ed87 0b02 	vstr	d0, [r7, #8]
 8001dba:	6078      	str	r0, [r7, #4]
	int outputPWM = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]

	if(right){//rightMotor
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d020      	beq.n	8001e08 <PID_Angle_30+0x58>
		if(errord>0){//go forward
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dd2:	f7fe fea1 	bl	8000b18 <__aeabi_dcmpgt>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00a      	beq.n	8001df2 <PID_Angle_30+0x42>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001ddc:	2201      	movs	r2, #1
 8001dde:	2110      	movs	r1, #16
 8001de0:	4865      	ldr	r0, [pc, #404]	; (8001f78 <PID_Angle_30+0x1c8>)
 8001de2:	f002 fec7 	bl	8004b74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2120      	movs	r1, #32
 8001dea:	4863      	ldr	r0, [pc, #396]	; (8001f78 <PID_Angle_30+0x1c8>)
 8001dec:	f002 fec2 	bl	8004b74 <HAL_GPIO_WritePin>
 8001df0:	e02a      	b.n	8001e48 <PID_Angle_30+0x98>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001df2:	2200      	movs	r2, #0
 8001df4:	2110      	movs	r1, #16
 8001df6:	4860      	ldr	r0, [pc, #384]	; (8001f78 <PID_Angle_30+0x1c8>)
 8001df8:	f002 febc 	bl	8004b74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2120      	movs	r1, #32
 8001e00:	485d      	ldr	r0, [pc, #372]	; (8001f78 <PID_Angle_30+0x1c8>)
 8001e02:	f002 feb7 	bl	8004b74 <HAL_GPIO_WritePin>
 8001e06:	e01f      	b.n	8001e48 <PID_Angle_30+0x98>
		}
	}else{//leftMotor
		if(errord<0){//go forward
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e14:	f7fe fe62 	bl	8000adc <__aeabi_dcmplt>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00a      	beq.n	8001e34 <PID_Angle_30+0x84>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001e1e:	2201      	movs	r2, #1
 8001e20:	2108      	movs	r1, #8
 8001e22:	4855      	ldr	r0, [pc, #340]	; (8001f78 <PID_Angle_30+0x1c8>)
 8001e24:	f002 fea6 	bl	8004b74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	4852      	ldr	r0, [pc, #328]	; (8001f78 <PID_Angle_30+0x1c8>)
 8001e2e:	f002 fea1 	bl	8004b74 <HAL_GPIO_WritePin>
 8001e32:	e009      	b.n	8001e48 <PID_Angle_30+0x98>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001e34:	2200      	movs	r2, #0
 8001e36:	2108      	movs	r1, #8
 8001e38:	484f      	ldr	r0, [pc, #316]	; (8001f78 <PID_Angle_30+0x1c8>)
 8001e3a:	f002 fe9b 	bl	8004b74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2104      	movs	r1, #4
 8001e42:	484d      	ldr	r0, [pc, #308]	; (8001f78 <PID_Angle_30+0x1c8>)
 8001e44:	f002 fe96 	bl	8004b74 <HAL_GPIO_WritePin>
		}
	}

	double error = (errord*10);
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	4b4b      	ldr	r3, [pc, #300]	; (8001f7c <PID_Angle_30+0x1cc>)
 8001e4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e52:	f7fe fbd1 	bl	80005f8 <__aeabi_dmul>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if(error<0){
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e6a:	f7fe fe37 	bl	8000adc <__aeabi_dcmplt>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <PID_Angle_30+0xd0>
		error *= -1;
 8001e74:	693c      	ldr	r4, [r7, #16]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e7c:	e9c7 4504 	strd	r4, r5, [r7, #16]
	}


	if(error > 300){
 8001e80:	a33b      	add	r3, pc, #236	; (adr r3, 8001f70 <PID_Angle_30+0x1c0>)
 8001e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e8a:	f7fe fe45 	bl	8000b18 <__aeabi_dcmpgt>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <PID_Angle_30+0xf0>
		outputPWM += 5000;
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001e9a:	3308      	adds	r3, #8
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	e060      	b.n	8001f62 <PID_Angle_30+0x1b2>
	}else if(error > 200){
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <PID_Angle_30+0x1d0>)
 8001ea6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eaa:	f7fe fe35 	bl	8000b18 <__aeabi_dcmpgt>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <PID_Angle_30+0x10e>
		outputPWM += 4000;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	e051      	b.n	8001f62 <PID_Angle_30+0x1b2>
	}else if(error > 100){
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <PID_Angle_30+0x1d4>)
 8001ec4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ec8:	f7fe fe26 	bl	8000b18 <__aeabi_dcmpgt>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d004      	beq.n	8001edc <PID_Angle_30+0x12c>
		outputPWM += 2000;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	e042      	b.n	8001f62 <PID_Angle_30+0x1b2>
	}else if(error > 50){
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <PID_Angle_30+0x1d8>)
 8001ee2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ee6:	f7fe fe17 	bl	8000b18 <__aeabi_dcmpgt>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d004      	beq.n	8001efa <PID_Angle_30+0x14a>
		outputPWM += 1600;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	e033      	b.n	8001f62 <PID_Angle_30+0x1b2>
	}else if(error > 20){
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <PID_Angle_30+0x1dc>)
 8001f00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f04:	f7fe fe08 	bl	8000b18 <__aeabi_dcmpgt>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d004      	beq.n	8001f18 <PID_Angle_30+0x168>
		outputPWM += 1200;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	e024      	b.n	8001f62 <PID_Angle_30+0x1b2>
	}else if(error > 10){
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <PID_Angle_30+0x1cc>)
 8001f1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f22:	f7fe fdf9 	bl	8000b18 <__aeabi_dcmpgt>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d004      	beq.n	8001f36 <PID_Angle_30+0x186>
		outputPWM += 900;
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	e015      	b.n	8001f62 <PID_Angle_30+0x1b2>
	}else if(error > 3){
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <PID_Angle_30+0x1e0>)
 8001f3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f40:	f7fe fdea 	bl	8000b18 <__aeabi_dcmpgt>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <PID_Angle_30+0x1a6>
		times_acceptable++;
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <PID_Angle_30+0x1e4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <PID_Angle_30+0x1e4>)
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	e005      	b.n	8001f62 <PID_Angle_30+0x1b2>
		outputPWM += 0;
	}else{
		times_acceptable +=500;;
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <PID_Angle_30+0x1e4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001f5e:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <PID_Angle_30+0x1e4>)
 8001f60:	6013      	str	r3, [r2, #0]
		outputPWM += 0;
	}
	return outputPWM;
 8001f62:	69fb      	ldr	r3, [r7, #28]
//	}
//
//	outputPWM += -16*errord*errord + 573.333*errord;


}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f6c:	f3af 8000 	nop.w
 8001f70:	00000000 	.word	0x00000000
 8001f74:	4072c000 	.word	0x4072c000
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	40240000 	.word	0x40240000
 8001f80:	40690000 	.word	0x40690000
 8001f84:	40590000 	.word	0x40590000
 8001f88:	40490000 	.word	0x40490000
 8001f8c:	40340000 	.word	0x40340000
 8001f90:	40080000 	.word	0x40080000
 8001f94:	2000044c 	.word	0x2000044c

08001f98 <PID_Angle_90>:

int PID_Angle_90(double errord, int right)
	{
 8001f98:	b5b0      	push	{r4, r5, r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001fa2:	6078      	str	r0, [r7, #4]
	int outputPWM = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]

	if(right){//rightMotor
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d020      	beq.n	8001ff0 <PID_Angle_90+0x58>
		if(errord>0){//go forward
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fba:	f7fe fdad 	bl	8000b18 <__aeabi_dcmpgt>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00a      	beq.n	8001fda <PID_Angle_90+0x42>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2110      	movs	r1, #16
 8001fc8:	4869      	ldr	r0, [pc, #420]	; (8002170 <PID_Angle_90+0x1d8>)
 8001fca:	f002 fdd3 	bl	8004b74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2120      	movs	r1, #32
 8001fd2:	4867      	ldr	r0, [pc, #412]	; (8002170 <PID_Angle_90+0x1d8>)
 8001fd4:	f002 fdce 	bl	8004b74 <HAL_GPIO_WritePin>
 8001fd8:	e02a      	b.n	8002030 <PID_Angle_90+0x98>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2110      	movs	r1, #16
 8001fde:	4864      	ldr	r0, [pc, #400]	; (8002170 <PID_Angle_90+0x1d8>)
 8001fe0:	f002 fdc8 	bl	8004b74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	2120      	movs	r1, #32
 8001fe8:	4861      	ldr	r0, [pc, #388]	; (8002170 <PID_Angle_90+0x1d8>)
 8001fea:	f002 fdc3 	bl	8004b74 <HAL_GPIO_WritePin>
 8001fee:	e01f      	b.n	8002030 <PID_Angle_90+0x98>
		}
	}else{//leftMotor
		if(errord<0){//go forward
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ffc:	f7fe fd6e 	bl	8000adc <__aeabi_dcmplt>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <PID_Angle_90+0x84>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8002006:	2201      	movs	r2, #1
 8002008:	2108      	movs	r1, #8
 800200a:	4859      	ldr	r0, [pc, #356]	; (8002170 <PID_Angle_90+0x1d8>)
 800200c:	f002 fdb2 	bl	8004b74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002010:	2200      	movs	r2, #0
 8002012:	2104      	movs	r1, #4
 8002014:	4856      	ldr	r0, [pc, #344]	; (8002170 <PID_Angle_90+0x1d8>)
 8002016:	f002 fdad 	bl	8004b74 <HAL_GPIO_WritePin>
 800201a:	e009      	b.n	8002030 <PID_Angle_90+0x98>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 800201c:	2200      	movs	r2, #0
 800201e:	2108      	movs	r1, #8
 8002020:	4853      	ldr	r0, [pc, #332]	; (8002170 <PID_Angle_90+0x1d8>)
 8002022:	f002 fda7 	bl	8004b74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002026:	2201      	movs	r2, #1
 8002028:	2104      	movs	r1, #4
 800202a:	4851      	ldr	r0, [pc, #324]	; (8002170 <PID_Angle_90+0x1d8>)
 800202c:	f002 fda2 	bl	8004b74 <HAL_GPIO_WritePin>
		}
	}

	double error = (errord*10);
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	4b4f      	ldr	r3, [pc, #316]	; (8002174 <PID_Angle_90+0x1dc>)
 8002036:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800203a:	f7fe fadd 	bl	80005f8 <__aeabi_dmul>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if(error<0){
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002052:	f7fe fd43 	bl	8000adc <__aeabi_dcmplt>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <PID_Angle_90+0xd0>
		error *= -1;
 800205c:	693c      	ldr	r4, [r7, #16]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002064:	e9c7 4504 	strd	r4, r5, [r7, #16]
	}

	if(error > 300){
 8002068:	a33f      	add	r3, pc, #252	; (adr r3, 8002168 <PID_Angle_90+0x1d0>)
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002072:	f7fe fd51 	bl	8000b18 <__aeabi_dcmpgt>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <PID_Angle_90+0xee>
		outputPWM += 4800;
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	e069      	b.n	800215a <PID_Angle_90+0x1c2>
	}else if(error > 200){
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <PID_Angle_90+0x1e0>)
 800208c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002090:	f7fe fd42 	bl	8000b18 <__aeabi_dcmpgt>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <PID_Angle_90+0x10e>
		outputPWM += 4100;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a0:	3304      	adds	r3, #4
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	e059      	b.n	800215a <PID_Angle_90+0x1c2>
	}else if(error > 100){
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	4b34      	ldr	r3, [pc, #208]	; (800217c <PID_Angle_90+0x1e4>)
 80020ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020b0:	f7fe fd32 	bl	8000b18 <__aeabi_dcmpgt>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <PID_Angle_90+0x12c>
		outputPWM += 1600;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	e04a      	b.n	800215a <PID_Angle_90+0x1c2>
	}else if(error > 50){
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <PID_Angle_90+0x1e8>)
 80020ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020ce:	f7fe fd23 	bl	8000b18 <__aeabi_dcmpgt>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d004      	beq.n	80020e2 <PID_Angle_90+0x14a>
		outputPWM += 1200;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	e03b      	b.n	800215a <PID_Angle_90+0x1c2>
	}else if(error > 20){
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	4b27      	ldr	r3, [pc, #156]	; (8002184 <PID_Angle_90+0x1ec>)
 80020e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020ec:	f7fe fd14 	bl	8000b18 <__aeabi_dcmpgt>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d004      	beq.n	8002100 <PID_Angle_90+0x168>
		outputPWM += 1100;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	e02c      	b.n	800215a <PID_Angle_90+0x1c2>
	}else if(error > 10){
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <PID_Angle_90+0x1dc>)
 8002106:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800210a:	f7fe fd05 	bl	8000b18 <__aeabi_dcmpgt>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <PID_Angle_90+0x186>
		outputPWM += 900;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800211a:	61fb      	str	r3, [r7, #28]
 800211c:	e01d      	b.n	800215a <PID_Angle_90+0x1c2>
	}else if(error > 3){
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	4b19      	ldr	r3, [pc, #100]	; (8002188 <PID_Angle_90+0x1f0>)
 8002124:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002128:	f7fe fcf6 	bl	8000b18 <__aeabi_dcmpgt>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <PID_Angle_90+0x1ae>
		times_acceptable++;
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <PID_Angle_90+0x1f4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3301      	adds	r3, #1
 8002138:	4a14      	ldr	r2, [pc, #80]	; (800218c <PID_Angle_90+0x1f4>)
 800213a:	6013      	str	r3, [r2, #0]
		outputPWM += 900;
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	e009      	b.n	800215a <PID_Angle_90+0x1c2>
	}else{
		times_acceptable +=500;;
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <PID_Angle_90+0x1f4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800214e:	4a0f      	ldr	r2, [pc, #60]	; (800218c <PID_Angle_90+0x1f4>)
 8002150:	6013      	str	r3, [r2, #0]
		outputPWM += 900;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8002158:	61fb      	str	r3, [r7, #28]
	}
	return outputPWM;
 800215a:	69fb      	ldr	r3, [r7, #28]

}
 800215c:	4618      	mov	r0, r3
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bdb0      	pop	{r4, r5, r7, pc}
 8002164:	f3af 8000 	nop.w
 8002168:	00000000 	.word	0x00000000
 800216c:	4072c000 	.word	0x4072c000
 8002170:	40020000 	.word	0x40020000
 8002174:	40240000 	.word	0x40240000
 8002178:	40690000 	.word	0x40690000
 800217c:	40590000 	.word	0x40590000
 8002180:	40490000 	.word	0x40490000
 8002184:	40340000 	.word	0x40340000
 8002188:	40080000 	.word	0x40080000
 800218c:	2000044c 	.word	0x2000044c

08002190 <PID_Juke>:

int PID_Juke(double error, int right)
{
 8002190:	b5b0      	push	{r4, r5, r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	ed87 0b02 	vstr	d0, [r7, #8]
 800219a:	6078      	str	r0, [r7, #4]
	int outputPWM = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
	int temp = 1;
 80021a0:	2301      	movs	r3, #1
 80021a2:	613b      	str	r3, [r7, #16]

	//degree of acceptance will be 28-28.5  //10

	if (error < usTargetFUCK){
 80021a4:	4b61      	ldr	r3, [pc, #388]	; (800232c <PID_Juke+0x19c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f9bb 	bl	8000524 <__aeabi_i2d>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021b6:	f7fe fc91 	bl	8000adc <__aeabi_dcmplt>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d010      	beq.n	80021e2 <PID_Juke+0x52>
		error = usTargetFUCK*2 - error ;
 80021c0:	4b5a      	ldr	r3, [pc, #360]	; (800232c <PID_Juke+0x19c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f9ac 	bl	8000524 <__aeabi_i2d>
 80021cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021d0:	f7fe f85a 	bl	8000288 <__aeabi_dsub>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		temp = -1;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
 80021e0:	613b      	str	r3, [r7, #16]
	}


	if(right){//rightMotor
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d018      	beq.n	800221a <PID_Juke+0x8a>
		if(temp>0){//go forward
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	dd0a      	ble.n	8002204 <PID_Juke+0x74>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 80021ee:	2201      	movs	r2, #1
 80021f0:	2110      	movs	r1, #16
 80021f2:	484f      	ldr	r0, [pc, #316]	; (8002330 <PID_Juke+0x1a0>)
 80021f4:	f002 fcbe 	bl	8004b74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2120      	movs	r1, #32
 80021fc:	484c      	ldr	r0, [pc, #304]	; (8002330 <PID_Juke+0x1a0>)
 80021fe:	f002 fcb9 	bl	8004b74 <HAL_GPIO_WritePin>
 8002202:	e022      	b.n	800224a <PID_Juke+0xba>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8002204:	2200      	movs	r2, #0
 8002206:	2110      	movs	r1, #16
 8002208:	4849      	ldr	r0, [pc, #292]	; (8002330 <PID_Juke+0x1a0>)
 800220a:	f002 fcb3 	bl	8004b74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800220e:	2201      	movs	r2, #1
 8002210:	2120      	movs	r1, #32
 8002212:	4847      	ldr	r0, [pc, #284]	; (8002330 <PID_Juke+0x1a0>)
 8002214:	f002 fcae 	bl	8004b74 <HAL_GPIO_WritePin>
 8002218:	e017      	b.n	800224a <PID_Juke+0xba>
		}
	}else{//leftMotor
		if(temp>0){//go forward
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	dd0a      	ble.n	8002236 <PID_Juke+0xa6>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8002220:	2201      	movs	r2, #1
 8002222:	2108      	movs	r1, #8
 8002224:	4842      	ldr	r0, [pc, #264]	; (8002330 <PID_Juke+0x1a0>)
 8002226:	f002 fca5 	bl	8004b74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800222a:	2200      	movs	r2, #0
 800222c:	2104      	movs	r1, #4
 800222e:	4840      	ldr	r0, [pc, #256]	; (8002330 <PID_Juke+0x1a0>)
 8002230:	f002 fca0 	bl	8004b74 <HAL_GPIO_WritePin>
 8002234:	e009      	b.n	800224a <PID_Juke+0xba>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8002236:	2200      	movs	r2, #0
 8002238:	2108      	movs	r1, #8
 800223a:	483d      	ldr	r0, [pc, #244]	; (8002330 <PID_Juke+0x1a0>)
 800223c:	f002 fc9a 	bl	8004b74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002240:	2201      	movs	r2, #1
 8002242:	2104      	movs	r1, #4
 8002244:	483a      	ldr	r0, [pc, #232]	; (8002330 <PID_Juke+0x1a0>)
 8002246:	f002 fc95 	bl	8004b74 <HAL_GPIO_WritePin>
		}
	}

	if(error<0){
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002256:	f7fe fc41 	bl	8000adc <__aeabi_dcmplt>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <PID_Juke+0xdc>
		error *= -1;
 8002260:	68bc      	ldr	r4, [r7, #8]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002268:	e9c7 4502 	strd	r4, r5, [r7, #8]
	}

	if(error > 40){
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	4b30      	ldr	r3, [pc, #192]	; (8002334 <PID_Juke+0x1a4>)
 8002272:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002276:	f7fe fc4f 	bl	8000b18 <__aeabi_dcmpgt>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <PID_Juke+0xfc>
		outputPWM += 6000;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8002286:	3310      	adds	r3, #16
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	e04a      	b.n	8002322 <PID_Juke+0x192>
	}else if(error > usTargetFUCK+9){
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <PID_Juke+0x19c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3309      	adds	r3, #9
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f946 	bl	8000524 <__aeabi_i2d>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022a0:	f7fe fc3a 	bl	8000b18 <__aeabi_dcmpgt>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <PID_Juke+0x124>
		outputPWM += 2300;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e036      	b.n	8002322 <PID_Juke+0x192>
	}else if(error > usTargetFUCK+.5){
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <PID_Juke+0x19c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f933 	bl	8000524 <__aeabi_i2d>
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <PID_Juke+0x1a8>)
 80022c4:	f7fd ffe2 	bl	800028c <__adddf3>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022d0:	f7fe fc22 	bl	8000b18 <__aeabi_dcmpgt>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d004      	beq.n	80022e4 <PID_Juke+0x154>
		outputPWM += 900;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f503 7361 	add.w	r3, r3, #900	; 0x384
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e01e      	b.n	8002322 <PID_Juke+0x192>
	}else if(error <=usTargetFUCK+.5){
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <PID_Juke+0x19c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe f91b 	bl	8000524 <__aeabi_i2d>
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <PID_Juke+0x1a8>)
 80022f4:	f7fd ffca 	bl	800028c <__adddf3>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002300:	f7fe fbf6 	bl	8000af0 <__aeabi_dcmple>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <PID_Juke+0x186>
		times_acceptable++;
 800230a:	4b0c      	ldr	r3, [pc, #48]	; (800233c <PID_Juke+0x1ac>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	4a0a      	ldr	r2, [pc, #40]	; (800233c <PID_Juke+0x1ac>)
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	e005      	b.n	8002322 <PID_Juke+0x192>
		outputPWM += 0;
	}else{
		times_acceptable +=500;;
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <PID_Juke+0x1ac>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800231e:	4a07      	ldr	r2, [pc, #28]	; (800233c <PID_Juke+0x1ac>)
 8002320:	6013      	str	r3, [r2, #0]
		outputPWM += 0;
	}


	return outputPWM;
 8002322:	697b      	ldr	r3, [r7, #20]

}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bdb0      	pop	{r4, r5, r7, pc}
 800232c:	20000004 	.word	0x20000004
 8002330:	40020000 	.word	0x40020000
 8002334:	40440000 	.word	0x40440000
 8002338:	3fe00000 	.word	0x3fe00000
 800233c:	2000044c 	.word	0x2000044c

08002340 <finishCheck>:

int finishCheck(){
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

	if (times_acceptable > 4){
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <finishCheck+0x38>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b04      	cmp	r3, #4
 800234a:	dd0e      	ble.n	800236a <finishCheck+0x2a>
		e_brake = 1;
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <finishCheck+0x3c>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]
		pwmVal_L = pwmVal_R = 0;
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <finishCheck+0x40>)
 8002354:	2200      	movs	r2, #0
 8002356:	801a      	strh	r2, [r3, #0]
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <finishCheck+0x40>)
 800235a:	881a      	ldrh	r2, [r3, #0]
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <finishCheck+0x44>)
 800235e:	801a      	strh	r2, [r3, #0]
		times_acceptable = 0;
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <finishCheck+0x38>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]

		return 0;
 8002366:	2300      	movs	r3, #0
 8002368:	e000      	b.n	800236c <finishCheck+0x2c>
	}
	return 1;
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	2000044c 	.word	0x2000044c
 800237c:	20000450 	.word	0x20000450
 8002380:	20000448 	.word	0x20000448
 8002384:	2000044a 	.word	0x2000044a

08002388 <readByte>:


void readByte(uint8_t addr, uint8_t* data){
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af02      	add	r7, sp, #8
 800238e:	4603      	mov	r3, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	71fb      	strb	r3, [r7, #7]
	gyroBuffer[0] = addr;
 8002394:	4a0f      	ldr	r2, [pc, #60]	; (80023d4 <readByte+0x4c>)
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress<<1, gyroBuffer, 1, 10);
 800239a:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <readByte+0x50>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	b299      	uxth	r1, r3
 80023a4:	230a      	movs	r3, #10
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2301      	movs	r3, #1
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <readByte+0x4c>)
 80023ac:	480b      	ldr	r0, [pc, #44]	; (80023dc <readByte+0x54>)
 80023ae:	f002 fd59 	bl	8004e64 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddress<<1, data, 2, 20);
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <readByte+0x50>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	b299      	uxth	r1, r3
 80023bc:	2314      	movs	r3, #20
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2302      	movs	r3, #2
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	4805      	ldr	r0, [pc, #20]	; (80023dc <readByte+0x54>)
 80023c6:	f002 fe4b 	bl	8005060 <HAL_I2C_Master_Receive>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200004a8 	.word	0x200004a8
 80023d8:	20000008 	.word	0x20000008
 80023dc:	2000020c 	.word	0x2000020c

080023e0 <writeByte>:

void writeByte(uint8_t addr, uint8_t data){
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	4603      	mov	r3, r0
 80023e8:	460a      	mov	r2, r1
 80023ea:	71fb      	strb	r3, [r7, #7]
 80023ec:	4613      	mov	r3, r2
 80023ee:	71bb      	strb	r3, [r7, #6]
	gyroBuffer[0] = addr;
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <writeByte+0x3c>)
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	7013      	strb	r3, [r2, #0]
	gyroBuffer[1] = data;
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <writeByte+0x3c>)
 80023f8:	79bb      	ldrb	r3, [r7, #6]
 80023fa:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <writeByte+0x40>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	b299      	uxth	r1, r3
 8002406:	2314      	movs	r3, #20
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2302      	movs	r3, #2
 800240c:	4a03      	ldr	r2, [pc, #12]	; (800241c <writeByte+0x3c>)
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <writeByte+0x44>)
 8002410:	f002 fd28 	bl	8004e64 <HAL_I2C_Master_Transmit>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200004a8 	.word	0x200004a8
 8002420:	20000008 	.word	0x20000008
 8002424:	2000020c 	.word	0x2000020c

08002428 <gyroInit>:

void gyroInit(){
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 800242c:	2100      	movs	r1, #0
 800242e:	2006      	movs	r0, #6
 8002430:	f7ff ffd6 	bl	80023e0 <writeByte>
	osDelay(10);
 8002434:	200a      	movs	r0, #10
 8002436:	f006 fe41 	bl	80090bc <osDelay>
	writeByte(0x03, 0x80);
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	2003      	movs	r0, #3
 800243e:	f7ff ffcf 	bl	80023e0 <writeByte>
	osDelay(10);
 8002442:	200a      	movs	r0, #10
 8002444:	f006 fe3a 	bl	80090bc <osDelay>
	writeByte(0x07, 0x07);
 8002448:	2107      	movs	r1, #7
 800244a:	2007      	movs	r0, #7
 800244c:	f7ff ffc8 	bl	80023e0 <writeByte>
	osDelay(10);
 8002450:	200a      	movs	r0, #10
 8002452:	f006 fe33 	bl	80090bc <osDelay>
	writeByte(0x06, 0x01);
 8002456:	2101      	movs	r1, #1
 8002458:	2006      	movs	r0, #6
 800245a:	f7ff ffc1 	bl	80023e0 <writeByte>
	osDelay(10);
 800245e:	200a      	movs	r0, #10
 8002460:	f006 fe2c 	bl	80090bc <osDelay>
	writeByte(0x7F, 0x20);
 8002464:	2120      	movs	r1, #32
 8002466:	207f      	movs	r0, #127	; 0x7f
 8002468:	f7ff ffba 	bl	80023e0 <writeByte>
	osDelay(10);
 800246c:	200a      	movs	r0, #10
 800246e:	f006 fe25 	bl	80090bc <osDelay>
	writeByte(0x01, 0x2F);
 8002472:	212f      	movs	r1, #47	; 0x2f
 8002474:	2001      	movs	r0, #1
 8002476:	f7ff ffb3 	bl	80023e0 <writeByte>
	osDelay(10);
 800247a:	200a      	movs	r0, #10
 800247c:	f006 fe1e 	bl	80090bc <osDelay>
	writeByte(0x0, 0x00);
 8002480:	2100      	movs	r1, #0
 8002482:	2000      	movs	r0, #0
 8002484:	f7ff ffac 	bl	80023e0 <writeByte>
	osDelay(10);
 8002488:	200a      	movs	r0, #10
 800248a:	f006 fe17 	bl	80090bc <osDelay>
	writeByte(0x7F, 0x00);
 800248e:	2100      	movs	r1, #0
 8002490:	207f      	movs	r0, #127	; 0x7f
 8002492:	f7ff ffa5 	bl	80023e0 <writeByte>
	osDelay(10);
 8002496:	200a      	movs	r0, #10
 8002498:	f006 fe10 	bl	80090bc <osDelay>
	writeByte(0x07, 0x00);
 800249c:	2100      	movs	r1, #0
 800249e:	2007      	movs	r0, #7
 80024a0:	f7ff ff9e 	bl	80023e0 <writeByte>
	osDelay(10);
 80024a4:	200a      	movs	r0, #10
 80024a6:	f006 fe09 	bl	80090bc <osDelay>
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	; 0x30
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t msg [20];
	HAL_TIM_IC_Start_IT(&htim4,TIM_CHANNEL_1);
 80024b8:	2100      	movs	r1, #0
 80024ba:	4823      	ldr	r0, [pc, #140]	; (8002548 <StartDefaultTask+0x98>)
 80024bc:	f004 f964 	bl	8006788 <HAL_TIM_IC_Start_IT>
	int cnt = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
    int flag1st=1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	int flag2nd = 1;
 80024c8:	2301      	movs	r3, #1
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28


	uint32_t tick = HAL_GetTick();
 80024cc:	f001 ffe2 	bl	8004494 <HAL_GetTick>
 80024d0:	6238      	str	r0, [r7, #32]
//		}
//	}


  /* Infinite loop */
  uint8_t ch = 'A';
 80024d2:	2341      	movs	r3, #65	; 0x41
 80024d4:	77fb      	strb	r3, [r7, #31]
  for(;;)
  {


		if(usflag){
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <StartDefaultTask+0x9c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d004      	beq.n	80024e8 <StartDefaultTask+0x38>
			ultrasonic_read();
 80024de:	f7ff fa39 	bl	8001954 <ultrasonic_read>
			osDelay(10);
 80024e2:	200a      	movs	r0, #10
 80024e4:	f006 fdea 	bl	80090bc <osDelay>
		}
		osDelay(20);
 80024e8:	2014      	movs	r0, #20
 80024ea:	f006 fde7 	bl	80090bc <osDelay>



		if(flag1st){
 80024ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d012      	beq.n	800251a <StartDefaultTask+0x6a>
			if(update==2 && aRxBuffer[0]=='L' || aRxBuffer[0]=='R'){
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <StartDefaultTask+0xa0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d103      	bne.n	8002504 <StartDefaultTask+0x54>
 80024fc:	4b15      	ldr	r3, [pc, #84]	; (8002554 <StartDefaultTask+0xa4>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b4c      	cmp	r3, #76	; 0x4c
 8002502:	d003      	beq.n	800250c <StartDefaultTask+0x5c>
 8002504:	4b13      	ldr	r3, [pc, #76]	; (8002554 <StartDefaultTask+0xa4>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b52      	cmp	r3, #82	; 0x52
 800250a:	d106      	bne.n	800251a <StartDefaultTask+0x6a>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer On
 800250c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002510:	4811      	ldr	r0, [pc, #68]	; (8002558 <StartDefaultTask+0xa8>)
 8002512:	f002 fb48 	bl	8004ba6 <HAL_GPIO_TogglePin>
				flag1st = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
		}

		if(flag2nd){
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0da      	beq.n	80024d6 <StartDefaultTask+0x26>
			if(update==4 && (aRxBuffer[0]=='L' || aRxBuffer[0]=='R')){
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <StartDefaultTask+0xa0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b04      	cmp	r3, #4
 8002526:	d1d6      	bne.n	80024d6 <StartDefaultTask+0x26>
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <StartDefaultTask+0xa4>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b4c      	cmp	r3, #76	; 0x4c
 800252e:	d003      	beq.n	8002538 <StartDefaultTask+0x88>
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <StartDefaultTask+0xa4>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b52      	cmp	r3, #82	; 0x52
 8002536:	d1ce      	bne.n	80024d6 <StartDefaultTask+0x26>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer On
 8002538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800253c:	4806      	ldr	r0, [pc, #24]	; (8002558 <StartDefaultTask+0xa8>)
 800253e:	f002 fb32 	bl	8004ba6 <HAL_GPIO_TogglePin>
				flag2nd = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
		if(usflag){
 8002546:	e7c6      	b.n	80024d6 <StartDefaultTask+0x26>
 8002548:	20000338 	.word	0x20000338
 800254c:	20000010 	.word	0x20000010
 8002550:	20000444 	.word	0x20000444
 8002554:	20000430 	.word	0x20000430
 8002558:	40020400 	.word	0x40020400
 800255c:	00000000 	.word	0x00000000

08002560 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
	pwmVal_R = 0;
 8002568:	4ba1      	ldr	r3, [pc, #644]	; (80027f0 <StartMotorTask+0x290>)
 800256a:	2200      	movs	r2, #0
 800256c:	801a      	strh	r2, [r3, #0]
	pwmVal_L = 0;
 800256e:	4ba1      	ldr	r3, [pc, #644]	; (80027f4 <StartMotorTask+0x294>)
 8002570:	2200      	movs	r2, #0
 8002572:	801a      	strh	r2, [r3, #0]
	int straightCorrection=0;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002578:	2100      	movs	r1, #0
 800257a:	489f      	ldr	r0, [pc, #636]	; (80027f8 <StartMotorTask+0x298>)
 800257c:	f003 ffec 	bl	8006558 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002580:	2104      	movs	r1, #4
 8002582:	489d      	ldr	r0, [pc, #628]	; (80027f8 <StartMotorTask+0x298>)
 8002584:	f003 ffe8 	bl	8006558 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002588:	210c      	movs	r1, #12
 800258a:	489c      	ldr	r0, [pc, #624]	; (80027fc <StartMotorTask+0x29c>)
 800258c:	f003 ffe4 	bl	8006558 <HAL_TIM_PWM_Start>
	htim1.Instance->CCR4 = 149; //Centre
 8002590:	4b9a      	ldr	r3, [pc, #616]	; (80027fc <StartMotorTask+0x29c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2295      	movs	r2, #149	; 0x95
 8002596:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B- forward
 8002598:	2200      	movs	r2, #0
 800259a:	2110      	movs	r1, #16
 800259c:	4898      	ldr	r0, [pc, #608]	; (8002800 <StartMotorTask+0x2a0>)
 800259e:	f002 fae9 	bl	8004b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80025a2:	2201      	movs	r2, #1
 80025a4:	2120      	movs	r1, #32
 80025a6:	4896      	ldr	r0, [pc, #600]	; (8002800 <StartMotorTask+0x2a0>)
 80025a8:	f002 fae4 	bl	8004b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 80025ac:	2201      	movs	r2, #1
 80025ae:	2108      	movs	r1, #8
 80025b0:	4893      	ldr	r0, [pc, #588]	; (8002800 <StartMotorTask+0x2a0>)
 80025b2:	f002 fadf 	bl	8004b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2104      	movs	r1, #4
 80025ba:	4891      	ldr	r0, [pc, #580]	; (8002800 <StartMotorTask+0x2a0>)
 80025bc:	f002 fada 	bl	8004b74 <HAL_GPIO_WritePin>
	osDelay(1000);
 80025c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025c4:	f006 fd7a 	bl	80090bc <osDelay>


  /* Infinite loop */
  for(;;)
  {
		htim1.Instance->CCR4 = pwmVal_servo;
 80025c8:	4b8e      	ldr	r3, [pc, #568]	; (8002804 <StartMotorTask+0x2a4>)
 80025ca:	881a      	ldrh	r2, [r3, #0]
 80025cc:	4b8b      	ldr	r3, [pc, #556]	; (80027fc <StartMotorTask+0x29c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
		double error_angle = target_angle - total_angle;
 80025d2:	4b8d      	ldr	r3, [pc, #564]	; (8002808 <StartMotorTask+0x2a8>)
 80025d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025d8:	4b8c      	ldr	r3, [pc, #560]	; (800280c <StartMotorTask+0x2ac>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f7fd fe53 	bl	8000288 <__aeabi_dsub>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if (pwmVal_servo < 127){ //106 //TURN LEFT
 80025ea:	4b86      	ldr	r3, [pc, #536]	; (8002804 <StartMotorTask+0x2a4>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	2b7e      	cmp	r3, #126	; 0x7e
 80025f0:	d876      	bhi.n	80026e0 <StartMotorTask+0x180>


			if(turn90 == 1){
 80025f2:	4b87      	ldr	r3, [pc, #540]	; (8002810 <StartMotorTask+0x2b0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d118      	bne.n	800262c <StartMotorTask+0xcc>
				pwmVal_R = PID_Angle_90(error_angle, 1)*1.072; //right is master
 80025fa:	2001      	movs	r0, #1
 80025fc:	ed97 0b02 	vldr	d0, [r7, #8]
 8002600:	f7ff fcca 	bl	8001f98 <PID_Angle_90>
 8002604:	4603      	mov	r3, r0
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd ff8c 	bl	8000524 <__aeabi_i2d>
 800260c:	a374      	add	r3, pc, #464	; (adr r3, 80027e0 <StartMotorTask+0x280>)
 800260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002612:	f7fd fff1 	bl	80005f8 <__aeabi_dmul>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4610      	mov	r0, r2
 800261c:	4619      	mov	r1, r3
 800261e:	f7fe fac3 	bl	8000ba8 <__aeabi_d2uiz>
 8002622:	4603      	mov	r3, r0
 8002624:	b29a      	uxth	r2, r3
 8002626:	4b72      	ldr	r3, [pc, #456]	; (80027f0 <StartMotorTask+0x290>)
 8002628:	801a      	strh	r2, [r3, #0]
 800262a:	e017      	b.n	800265c <StartMotorTask+0xfc>
			}else{
				pwmVal_R = PID_Angle_30(error_angle, 1)*1.072; //right is master
 800262c:	2001      	movs	r0, #1
 800262e:	ed97 0b02 	vldr	d0, [r7, #8]
 8002632:	f7ff fbbd 	bl	8001db0 <PID_Angle_30>
 8002636:	4603      	mov	r3, r0
 8002638:	4618      	mov	r0, r3
 800263a:	f7fd ff73 	bl	8000524 <__aeabi_i2d>
 800263e:	a368      	add	r3, pc, #416	; (adr r3, 80027e0 <StartMotorTask+0x280>)
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	f7fd ffd8 	bl	80005f8 <__aeabi_dmul>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4610      	mov	r0, r2
 800264e:	4619      	mov	r1, r3
 8002650:	f7fe faaa 	bl	8000ba8 <__aeabi_d2uiz>
 8002654:	4603      	mov	r3, r0
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b65      	ldr	r3, [pc, #404]	; (80027f0 <StartMotorTask+0x290>)
 800265a:	801a      	strh	r2, [r3, #0]

			}
			pwmVal_L = pwmVal_R*(0.56); //left is slave
 800265c:	4b64      	ldr	r3, [pc, #400]	; (80027f0 <StartMotorTask+0x290>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff5f 	bl	8000524 <__aeabi_i2d>
 8002666:	a360      	add	r3, pc, #384	; (adr r3, 80027e8 <StartMotorTask+0x288>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fd ffc4 	bl	80005f8 <__aeabi_dmul>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fa96 	bl	8000ba8 <__aeabi_d2uiz>
 800267c:	4603      	mov	r3, r0
 800267e:	b29a      	uxth	r2, r3
 8002680:	4b5c      	ldr	r3, [pc, #368]	; (80027f4 <StartMotorTask+0x294>)
 8002682:	801a      	strh	r2, [r3, #0]

			if (pwmVal_L>0 && pwmVal_L <900){
 8002684:	4b5b      	ldr	r3, [pc, #364]	; (80027f4 <StartMotorTask+0x294>)
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <StartMotorTask+0x13e>
 800268c:	4b59      	ldr	r3, [pc, #356]	; (80027f4 <StartMotorTask+0x294>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002694:	d203      	bcs.n	800269e <StartMotorTask+0x13e>
				pwmVal_L = 1200;
 8002696:	4b57      	ldr	r3, [pc, #348]	; (80027f4 <StartMotorTask+0x294>)
 8002698:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800269c:	801a      	strh	r2, [r3, #0]
			}
			if(error_angle>0){//go forward
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026aa:	f7fe fa35 	bl	8000b18 <__aeabi_dcmpgt>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <StartMotorTask+0x16a>
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A- forward
 80026b4:	2201      	movs	r2, #1
 80026b6:	2108      	movs	r1, #8
 80026b8:	4851      	ldr	r0, [pc, #324]	; (8002800 <StartMotorTask+0x2a0>)
 80026ba:	f002 fa5b 	bl	8004b74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);}
 80026be:	2200      	movs	r2, #0
 80026c0:	2104      	movs	r1, #4
 80026c2:	484f      	ldr	r0, [pc, #316]	; (8002800 <StartMotorTask+0x2a0>)
 80026c4:	f002 fa56 	bl	8004b74 <HAL_GPIO_WritePin>
 80026c8:	e198      	b.n	80029fc <StartMotorTask+0x49c>
			else{//go backward
			    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 80026ca:	2200      	movs	r2, #0
 80026cc:	2108      	movs	r1, #8
 80026ce:	484c      	ldr	r0, [pc, #304]	; (8002800 <StartMotorTask+0x2a0>)
 80026d0:	f002 fa50 	bl	8004b74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);}
 80026d4:	2201      	movs	r2, #1
 80026d6:	2104      	movs	r1, #4
 80026d8:	4849      	ldr	r0, [pc, #292]	; (8002800 <StartMotorTask+0x2a0>)
 80026da:	f002 fa4b 	bl	8004b74 <HAL_GPIO_WritePin>
 80026de:	e18d      	b.n	80029fc <StartMotorTask+0x49c>
		}

		else if (pwmVal_servo > 189){ //230 //TURN RIGHT
 80026e0:	4b48      	ldr	r3, [pc, #288]	; (8002804 <StartMotorTask+0x2a4>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	2bbd      	cmp	r3, #189	; 0xbd
 80026e6:	d958      	bls.n	800279a <StartMotorTask+0x23a>
			if(turn90 == 1){
 80026e8:	4b49      	ldr	r3, [pc, #292]	; (8002810 <StartMotorTask+0x2b0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d109      	bne.n	8002704 <StartMotorTask+0x1a4>
				pwmVal_L = PID_Angle_90(error_angle, 0);
 80026f0:	2000      	movs	r0, #0
 80026f2:	ed97 0b02 	vldr	d0, [r7, #8]
 80026f6:	f7ff fc4f 	bl	8001f98 <PID_Angle_90>
 80026fa:	4603      	mov	r3, r0
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <StartMotorTask+0x294>)
 8002700:	801a      	strh	r2, [r3, #0]
 8002702:	e008      	b.n	8002716 <StartMotorTask+0x1b6>
			}else{
				pwmVal_L = PID_Angle_30(error_angle, 0);
 8002704:	2000      	movs	r0, #0
 8002706:	ed97 0b02 	vldr	d0, [r7, #8]
 800270a:	f7ff fb51 	bl	8001db0 <PID_Angle_30>
 800270e:	4603      	mov	r3, r0
 8002710:	b29a      	uxth	r2, r3
 8002712:	4b38      	ldr	r3, [pc, #224]	; (80027f4 <StartMotorTask+0x294>)
 8002714:	801a      	strh	r2, [r3, #0]

			}
			pwmVal_R = pwmVal_L*(0.56); //right is slave
 8002716:	4b37      	ldr	r3, [pc, #220]	; (80027f4 <StartMotorTask+0x294>)
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd ff02 	bl	8000524 <__aeabi_i2d>
 8002720:	a331      	add	r3, pc, #196	; (adr r3, 80027e8 <StartMotorTask+0x288>)
 8002722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002726:	f7fd ff67 	bl	80005f8 <__aeabi_dmul>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	f7fe fa39 	bl	8000ba8 <__aeabi_d2uiz>
 8002736:	4603      	mov	r3, r0
 8002738:	b29a      	uxth	r2, r3
 800273a:	4b2d      	ldr	r3, [pc, #180]	; (80027f0 <StartMotorTask+0x290>)
 800273c:	801a      	strh	r2, [r3, #0]
			if (pwmVal_R>0 && pwmVal_R <900){
 800273e:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <StartMotorTask+0x290>)
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <StartMotorTask+0x1f8>
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <StartMotorTask+0x290>)
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800274e:	d203      	bcs.n	8002758 <StartMotorTask+0x1f8>
				pwmVal_R = 1200;
 8002750:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <StartMotorTask+0x290>)
 8002752:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002756:	801a      	strh	r2, [r3, #0]
			}


			if(error_angle<0){//go forward
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002764:	f7fe f9ba 	bl	8000adc <__aeabi_dcmplt>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <StartMotorTask+0x224>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 800276e:	2201      	movs	r2, #1
 8002770:	2110      	movs	r1, #16
 8002772:	4823      	ldr	r0, [pc, #140]	; (8002800 <StartMotorTask+0x2a0>)
 8002774:	f002 f9fe 	bl	8004b74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);	}
 8002778:	2200      	movs	r2, #0
 800277a:	2120      	movs	r1, #32
 800277c:	4820      	ldr	r0, [pc, #128]	; (8002800 <StartMotorTask+0x2a0>)
 800277e:	f002 f9f9 	bl	8004b74 <HAL_GPIO_WritePin>
 8002782:	e13b      	b.n	80029fc <StartMotorTask+0x49c>
			else{//go backward
			    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8002784:	2200      	movs	r2, #0
 8002786:	2110      	movs	r1, #16
 8002788:	481d      	ldr	r0, [pc, #116]	; (8002800 <StartMotorTask+0x2a0>)
 800278a:	f002 f9f3 	bl	8004b74 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);}
 800278e:	2201      	movs	r2, #1
 8002790:	2120      	movs	r1, #32
 8002792:	481b      	ldr	r0, [pc, #108]	; (8002800 <StartMotorTask+0x2a0>)
 8002794:	f002 f9ee 	bl	8004b74 <HAL_GPIO_WritePin>
 8002798:	e130      	b.n	80029fc <StartMotorTask+0x49c>
		}
		else {
			if(straightUS == 1){
 800279a:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <StartMotorTask+0x2b4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d13c      	bne.n	800281c <StartMotorTask+0x2bc>
				pwmVal_R = PID_Juke(Distance, 0)*1.072;
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <StartMotorTask+0x2b8>)
 80027a4:	ed93 7b00 	vldr	d7, [r3]
 80027a8:	2000      	movs	r0, #0
 80027aa:	eeb0 0a47 	vmov.f32	s0, s14
 80027ae:	eef0 0a67 	vmov.f32	s1, s15
 80027b2:	f7ff fced 	bl	8002190 <PID_Juke>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd feb3 	bl	8000524 <__aeabi_i2d>
 80027be:	a308      	add	r3, pc, #32	; (adr r3, 80027e0 <StartMotorTask+0x280>)
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	f7fd ff18 	bl	80005f8 <__aeabi_dmul>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f7fe f9ea 	bl	8000ba8 <__aeabi_d2uiz>
 80027d4:	4603      	mov	r3, r0
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <StartMotorTask+0x290>)
 80027da:	801a      	strh	r2, [r3, #0]
 80027dc:	e03a      	b.n	8002854 <StartMotorTask+0x2f4>
 80027de:	bf00      	nop
 80027e0:	78d4fdf4 	.word	0x78d4fdf4
 80027e4:	3ff126e9 	.word	0x3ff126e9
 80027e8:	1eb851ec 	.word	0x1eb851ec
 80027ec:	3fe1eb85 	.word	0x3fe1eb85
 80027f0:	20000448 	.word	0x20000448
 80027f4:	2000044a 	.word	0x2000044a
 80027f8:	20000380 	.word	0x20000380
 80027fc:	20000260 	.word	0x20000260
 8002800:	40020000 	.word	0x40020000
 8002804:	20000000 	.word	0x20000000
 8002808:	20000470 	.word	0x20000470
 800280c:	200004a0 	.word	0x200004a0
 8002810:	20000478 	.word	0x20000478
 8002814:	20000458 	.word	0x20000458
 8002818:	200005b0 	.word	0x200005b0
			}else{
				pwmVal_R = PID_Control(leftTarget - leftEncoderVal, 0)*1.072;
 800281c:	4b8e      	ldr	r3, [pc, #568]	; (8002a58 <StartMotorTask+0x4f8>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b8e      	ldr	r3, [pc, #568]	; (8002a5c <StartMotorTask+0x4fc>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fa3b 	bl	8001ca4 <PID_Control>
 800282e:	4603      	mov	r3, r0
 8002830:	4618      	mov	r0, r3
 8002832:	f7fd fe77 	bl	8000524 <__aeabi_i2d>
 8002836:	a384      	add	r3, pc, #528	; (adr r3, 8002a48 <StartMotorTask+0x4e8>)
 8002838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283c:	f7fd fedc 	bl	80005f8 <__aeabi_dmul>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	f7fe f9ae 	bl	8000ba8 <__aeabi_d2uiz>
 800284c:	4603      	mov	r3, r0
 800284e:	b29a      	uxth	r2, r3
 8002850:	4b83      	ldr	r3, [pc, #524]	; (8002a60 <StartMotorTask+0x500>)
 8002852:	801a      	strh	r2, [r3, #0]
			}

			if (abs(leftEncoderVal)<abs(rightEncoderVal)){
 8002854:	4b81      	ldr	r3, [pc, #516]	; (8002a5c <StartMotorTask+0x4fc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800285c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002860:	4b80      	ldr	r3, [pc, #512]	; (8002a64 <StartMotorTask+0x504>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	bfb8      	it	lt
 8002868:	425b      	neglt	r3, r3
 800286a:	429a      	cmp	r2, r3
 800286c:	da03      	bge.n	8002876 <StartMotorTask+0x316>
				straightCorrection++;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3301      	adds	r3, #1
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e002      	b.n	800287c <StartMotorTask+0x31c>
			}else{ straightCorrection--;}
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	3b01      	subs	r3, #1
 800287a:	617b      	str	r3, [r7, #20]
			if (pwmVal_R<1000){
 800287c:	4b78      	ldr	r3, [pc, #480]	; (8002a60 <StartMotorTask+0x500>)
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002884:	d201      	bcs.n	800288a <StartMotorTask+0x32a>
				straightCorrection=0;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
			}

			if(straightUS == 1){
 800288a:	4b77      	ldr	r3, [pc, #476]	; (8002a68 <StartMotorTask+0x508>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d112      	bne.n	80028b8 <StartMotorTask+0x358>
				pwmVal_L = PID_Juke(Distance, 1)+straightCorrection;
 8002892:	4b76      	ldr	r3, [pc, #472]	; (8002a6c <StartMotorTask+0x50c>)
 8002894:	ed93 7b00 	vldr	d7, [r3]
 8002898:	2001      	movs	r0, #1
 800289a:	eeb0 0a47 	vmov.f32	s0, s14
 800289e:	eef0 0a67 	vmov.f32	s1, s15
 80028a2:	f7ff fc75 	bl	8002190 <PID_Juke>
 80028a6:	4603      	mov	r3, r0
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	4b6f      	ldr	r3, [pc, #444]	; (8002a70 <StartMotorTask+0x510>)
 80028b4:	801a      	strh	r2, [r3, #0]
 80028b6:	e010      	b.n	80028da <StartMotorTask+0x37a>
			}else{
				pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)+straightCorrection;
 80028b8:	4b6e      	ldr	r3, [pc, #440]	; (8002a74 <StartMotorTask+0x514>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b69      	ldr	r3, [pc, #420]	; (8002a64 <StartMotorTask+0x504>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2101      	movs	r1, #1
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff f9ed 	bl	8001ca4 <PID_Control>
 80028ca:	4603      	mov	r3, r0
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	4b66      	ldr	r3, [pc, #408]	; (8002a70 <StartMotorTask+0x510>)
 80028d8:	801a      	strh	r2, [r3, #0]
			}


			if (errorcorrection == 1){
 80028da:	4b67      	ldr	r3, [pc, #412]	; (8002a78 <StartMotorTask+0x518>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	f040 808c 	bne.w	80029fc <StartMotorTask+0x49c>

				if(Distance>usTargetFUCK){
 80028e4:	4b65      	ldr	r3, [pc, #404]	; (8002a7c <StartMotorTask+0x51c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fe1b 	bl	8000524 <__aeabi_i2d>
 80028ee:	4b5f      	ldr	r3, [pc, #380]	; (8002a6c <StartMotorTask+0x50c>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fe f8f2 	bl	8000adc <__aeabi_dcmplt>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d03f      	beq.n	800297e <StartMotorTask+0x41e>

					if (error_angle>5){ // if turn left, 106. right 230. left +. right -.
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	4b5f      	ldr	r3, [pc, #380]	; (8002a80 <StartMotorTask+0x520>)
 8002904:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002908:	f7fe f906 	bl	8000b18 <__aeabi_dcmpgt>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <StartMotorTask+0x3ba>
						pwmVal_servo=((-8*5)/5 + 149);
 8002912:	4b5c      	ldr	r3, [pc, #368]	; (8002a84 <StartMotorTask+0x524>)
 8002914:	228d      	movs	r2, #141	; 0x8d
 8002916:	801a      	strh	r2, [r3, #0]
 8002918:	e070      	b.n	80029fc <StartMotorTask+0x49c>
					}
					else if(error_angle<-5){
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	4b5a      	ldr	r3, [pc, #360]	; (8002a88 <StartMotorTask+0x528>)
 8002920:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002924:	f7fe f8da 	bl	8000adc <__aeabi_dcmplt>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <StartMotorTask+0x3d6>
						pwmVal_servo=((8*5)/5 + 149);
 800292e:	4b55      	ldr	r3, [pc, #340]	; (8002a84 <StartMotorTask+0x524>)
 8002930:	229d      	movs	r2, #157	; 0x9d
 8002932:	801a      	strh	r2, [r3, #0]
 8002934:	e062      	b.n	80029fc <StartMotorTask+0x49c>
					}else{
						pwmVal_servo=((-8*error_angle)/5 + 149);
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	4b54      	ldr	r3, [pc, #336]	; (8002a8c <StartMotorTask+0x52c>)
 800293c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002940:	f7fd fe5a 	bl	80005f8 <__aeabi_dmul>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	4b4b      	ldr	r3, [pc, #300]	; (8002a80 <StartMotorTask+0x520>)
 8002952:	f7fd ff7b 	bl	800084c <__aeabi_ddiv>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	a33c      	add	r3, pc, #240	; (adr r3, 8002a50 <StartMotorTask+0x4f0>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f7fd fc92 	bl	800028c <__adddf3>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f7fe f91a 	bl	8000ba8 <__aeabi_d2uiz>
 8002974:	4603      	mov	r3, r0
 8002976:	b29a      	uxth	r2, r3
 8002978:	4b42      	ldr	r3, [pc, #264]	; (8002a84 <StartMotorTask+0x524>)
 800297a:	801a      	strh	r2, [r3, #0]
 800297c:	e03e      	b.n	80029fc <StartMotorTask+0x49c>
					}
				}else{
					if (error_angle>5){ // if turn left, 106. right 230. left +. right -.
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <StartMotorTask+0x520>)
 8002984:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002988:	f7fe f8c6 	bl	8000b18 <__aeabi_dcmpgt>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <StartMotorTask+0x43a>
						pwmVal_servo=((8*5)/5 + 149);
 8002992:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <StartMotorTask+0x524>)
 8002994:	229d      	movs	r2, #157	; 0x9d
 8002996:	801a      	strh	r2, [r3, #0]
 8002998:	e030      	b.n	80029fc <StartMotorTask+0x49c>
					}
					else if(error_angle<-5){
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	4b3a      	ldr	r3, [pc, #232]	; (8002a88 <StartMotorTask+0x528>)
 80029a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029a4:	f7fe f89a 	bl	8000adc <__aeabi_dcmplt>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <StartMotorTask+0x456>
						pwmVal_servo=((-8*5)/5 + 149);
 80029ae:	4b35      	ldr	r3, [pc, #212]	; (8002a84 <StartMotorTask+0x524>)
 80029b0:	228d      	movs	r2, #141	; 0x8d
 80029b2:	801a      	strh	r2, [r3, #0]
 80029b4:	e022      	b.n	80029fc <StartMotorTask+0x49c>
					}else{
						pwmVal_servo=((8*error_angle)/5 + 149);
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	4b35      	ldr	r3, [pc, #212]	; (8002a90 <StartMotorTask+0x530>)
 80029bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029c0:	f7fd fe1a 	bl	80005f8 <__aeabi_dmul>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <StartMotorTask+0x520>)
 80029d2:	f7fd ff3b 	bl	800084c <__aeabi_ddiv>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4610      	mov	r0, r2
 80029dc:	4619      	mov	r1, r3
 80029de:	a31c      	add	r3, pc, #112	; (adr r3, 8002a50 <StartMotorTask+0x4f0>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fc52 	bl	800028c <__adddf3>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	f7fe f8da 	bl	8000ba8 <__aeabi_d2uiz>
 80029f4:	4603      	mov	r3, r0
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <StartMotorTask+0x524>)
 80029fa:	801a      	strh	r2, [r3, #0]
				}
			}
		}


		if(e_brake){
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <StartMotorTask+0x534>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d006      	beq.n	8002a12 <StartMotorTask+0x4b2>
			pwmVal_L = pwmVal_R = 0;
 8002a04:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <StartMotorTask+0x500>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	801a      	strh	r2, [r3, #0]
 8002a0a:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <StartMotorTask+0x500>)
 8002a0c:	881a      	ldrh	r2, [r3, #0]
 8002a0e:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <StartMotorTask+0x510>)
 8002a10:	801a      	strh	r2, [r3, #0]
		}


		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L);
 8002a12:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <StartMotorTask+0x510>)
 8002a14:	881a      	ldrh	r2, [r3, #0]
 8002a16:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <StartMotorTask+0x538>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_R);
 8002a1c:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <StartMotorTask+0x500>)
 8002a1e:	881a      	ldrh	r2, [r3, #0]
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <StartMotorTask+0x538>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(1);
 8002a26:	2001      	movs	r0, #1
 8002a28:	f006 fb48 	bl	80090bc <osDelay>

		if (times_acceptable>1000){
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <StartMotorTask+0x53c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a34:	f77f adc8 	ble.w	80025c8 <StartMotorTask+0x68>
			times_acceptable=1001;
 8002a38:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <StartMotorTask+0x53c>)
 8002a3a:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8002a3e:	601a      	str	r2, [r3, #0]
  {
 8002a40:	e5c2      	b.n	80025c8 <StartMotorTask+0x68>
 8002a42:	bf00      	nop
 8002a44:	f3af 8000 	nop.w
 8002a48:	78d4fdf4 	.word	0x78d4fdf4
 8002a4c:	3ff126e9 	.word	0x3ff126e9
 8002a50:	00000000 	.word	0x00000000
 8002a54:	4062a000 	.word	0x4062a000
 8002a58:	20000468 	.word	0x20000468
 8002a5c:	20000460 	.word	0x20000460
 8002a60:	20000448 	.word	0x20000448
 8002a64:	2000045c 	.word	0x2000045c
 8002a68:	20000458 	.word	0x20000458
 8002a6c:	200005b0 	.word	0x200005b0
 8002a70:	2000044a 	.word	0x2000044a
 8002a74:	20000464 	.word	0x20000464
 8002a78:	20000454 	.word	0x20000454
 8002a7c:	20000004 	.word	0x20000004
 8002a80:	40140000 	.word	0x40140000
 8002a84:	20000000 	.word	0x20000000
 8002a88:	c0140000 	.word	0xc0140000
 8002a8c:	c0200000 	.word	0xc0200000
 8002a90:	40200000 	.word	0x40200000
 8002a94:	20000450 	.word	0x20000450
 8002a98:	20000380 	.word	0x20000380
 8002a9c:	2000044c 	.word	0x2000044c

08002aa0 <StartOledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8002aa0:	b5b0      	push	{r4, r5, r7, lr}
 8002aa2:	b0a8      	sub	sp, #160	; 0xa0
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
	uint8_t hello [20] = {0};
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002aae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	605a      	str	r2, [r3, #4]
 8002ab8:	609a      	str	r2, [r3, #8]
 8002aba:	60da      	str	r2, [r3, #12]
	uint8_t clear[20] = {0};
 8002abc:	2300      	movs	r3, #0
 8002abe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ac0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
	uint8_t lefty[20] = {0};
 8002ace:	2300      	movs	r3, #0
 8002ad0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ad2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	609a      	str	r2, [r3, #8]
 8002ade:	60da      	str	r2, [r3, #12]
	uint8_t righty[20] = {0};
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ae4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
	uint8_t motorD[20] = {0};
 8002af2:	2300      	movs	r3, #0
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30
 8002af6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	60da      	str	r2, [r3, #12]
	uint8_t check[20] = {0};
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	f107 0320 	add.w	r3, r7, #32
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
	uint8_t debugMsg[20] = "hello\0";
 8002b16:	4a59      	ldr	r2, [pc, #356]	; (8002c7c <StartOledTask+0x1dc>)
 8002b18:	f107 0308 	add.w	r3, r7, #8
 8002b1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b20:	6018      	str	r0, [r3, #0]
 8002b22:	3304      	adds	r3, #4
 8002b24:	8019      	strh	r1, [r3, #0]
 8002b26:	3302      	adds	r3, #2
 8002b28:	0c0a      	lsrs	r2, r1, #16
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	f107 030f 	add.w	r3, r7, #15
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	731a      	strb	r2, [r3, #12]
  /* Infinite loop */
  for(;;)
  {

	//sprintf(clear, "L:%d | R:%d     ", (int)(leftTarget - leftEncoderVal), (int)(rightTarget-rightEncoderVal));
	sprintf(clear, "USik: %d-%d \0", (int)Distance, nexttask);
 8002b3a:	4b51      	ldr	r3, [pc, #324]	; (8002c80 <StartOledTask+0x1e0>)
 8002b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	f7fe f808 	bl	8000b58 <__aeabi_d2iz>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b4e      	ldr	r3, [pc, #312]	; (8002c84 <StartOledTask+0x1e4>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8002b52:	494d      	ldr	r1, [pc, #308]	; (8002c88 <StartOledTask+0x1e8>)
 8002b54:	f009 fc68 	bl	800c428 <siprintf>

	OLED_ShowString(0, 10, clear);
 8002b58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	210a      	movs	r1, #10
 8002b60:	2000      	movs	r0, #0
 8002b62:	f001 fb73 	bl	800424c <OLED_ShowString>


	//sprintf(righty,"Gyro: %d \0", (int)total_angle);
	int decimals = abs((int)((total_angle-(int)(total_angle))*1000));
 8002b66:	4b49      	ldr	r3, [pc, #292]	; (8002c8c <StartOledTask+0x1ec>)
 8002b68:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002b6c:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <StartOledTask+0x1ec>)
 8002b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	f7fd ffef 	bl	8000b58 <__aeabi_d2iz>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fd fcd1 	bl	8000524 <__aeabi_i2d>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4620      	mov	r0, r4
 8002b88:	4629      	mov	r1, r5
 8002b8a:	f7fd fb7d 	bl	8000288 <__aeabi_dsub>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <StartOledTask+0x1f0>)
 8002b9c:	f7fd fd2c 	bl	80005f8 <__aeabi_dmul>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f7fd ffd6 	bl	8000b58 <__aeabi_d2iz>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bfb8      	it	lt
 8002bb2:	425b      	neglt	r3, r3
 8002bb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if(total_angle)
 8002bb8:	4b34      	ldr	r3, [pc, #208]	; (8002c8c <StartOledTask+0x1ec>)
 8002bba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	f7fd ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10e      	bne.n	8002bee <StartOledTask+0x14e>
	sprintf(righty,"Gyro:%3d.%3d \0", (int)total_angle, decimals);
 8002bd0:	4b2e      	ldr	r3, [pc, #184]	; (8002c8c <StartOledTask+0x1ec>)
 8002bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f7fd ffbd 	bl	8000b58 <__aeabi_d2iz>
 8002bde:	4602      	mov	r2, r0
 8002be0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002be4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002be8:	492a      	ldr	r1, [pc, #168]	; (8002c94 <StartOledTask+0x1f4>)
 8002bea:	f009 fc1d 	bl	800c428 <siprintf>
	OLED_ShowString(0, 20, righty);
 8002bee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2114      	movs	r1, #20
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f001 fb28 	bl	800424c <OLED_ShowString>

	//sprintf(lefty, "US: %d\0", (int)uDistance);


	sprintf(lefty, "Rec: %d/%d  \0", movebackR,movebackL);
 8002bfc:	4b26      	ldr	r3, [pc, #152]	; (8002c98 <StartOledTask+0x1f8>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <StartOledTask+0x1fc>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002c08:	4925      	ldr	r1, [pc, #148]	; (8002ca0 <StartOledTask+0x200>)
 8002c0a:	f009 fc0d 	bl	800c428 <siprintf>
	OLED_ShowString(0, 30, lefty);
 8002c0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c12:	461a      	mov	r2, r3
 8002c14:	211e      	movs	r1, #30
 8002c16:	2000      	movs	r0, #0
 8002c18:	f001 fb18 	bl	800424c <OLED_ShowString>


	sprintf(motorD, "Enc: %d/%d  \0", rightEncoderVal,rightEncoderVal);
 8002c1c:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <StartOledTask+0x204>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <StartOledTask+0x204>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002c28:	491f      	ldr	r1, [pc, #124]	; (8002ca8 <StartOledTask+0x208>)
 8002c2a:	f009 fbfd 	bl	800c428 <siprintf>

	OLED_ShowString(0, 40, motorD);
 8002c2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c32:	461a      	mov	r2, r3
 8002c34:	2128      	movs	r1, #40	; 0x28
 8002c36:	2000      	movs	r0, #0
 8002c38:	f001 fb08 	bl	800424c <OLED_ShowString>


	sprintf(check, "K: %c ,%c, %d-%d\0", aRxBuffer[0], nexttask, update, usflag);
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <StartOledTask+0x20c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	4619      	mov	r1, r3
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <StartOledTask+0x1e4>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	461c      	mov	r4, r3
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <StartOledTask+0x210>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a19      	ldr	r2, [pc, #100]	; (8002cb4 <StartOledTask+0x214>)
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	f107 001c 	add.w	r0, r7, #28
 8002c54:	9201      	str	r2, [sp, #4]
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	4623      	mov	r3, r4
 8002c5a:	460a      	mov	r2, r1
 8002c5c:	4916      	ldr	r1, [pc, #88]	; (8002cb8 <StartOledTask+0x218>)
 8002c5e:	f009 fbe3 	bl	800c428 <siprintf>
	OLED_ShowString(0, 50, check);
 8002c62:	f107 031c 	add.w	r3, r7, #28
 8002c66:	461a      	mov	r2, r3
 8002c68:	2132      	movs	r1, #50	; 0x32
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f001 faee 	bl	800424c <OLED_ShowString>

	//memset(clear, 0, 20*sizeof(uint8_t));

	OLED_Refresh_Gram();
 8002c70:	f001 f978 	bl	8003f64 <OLED_Refresh_Gram>
	osDelay(100);
 8002c74:	2064      	movs	r0, #100	; 0x64
 8002c76:	f006 fa21 	bl	80090bc <osDelay>
  {
 8002c7a:	e75e      	b.n	8002b3a <StartOledTask+0x9a>
 8002c7c:	0800e870 	.word	0x0800e870
 8002c80:	200005b0 	.word	0x200005b0
 8002c84:	20000002 	.word	0x20000002
 8002c88:	0800e81c 	.word	0x0800e81c
 8002c8c:	200004a0 	.word	0x200004a0
 8002c90:	408f4000 	.word	0x408f4000
 8002c94:	0800e82c 	.word	0x0800e82c
 8002c98:	20000480 	.word	0x20000480
 8002c9c:	2000047c 	.word	0x2000047c
 8002ca0:	0800e83c 	.word	0x0800e83c
 8002ca4:	2000045c 	.word	0x2000045c
 8002ca8:	0800e84c 	.word	0x0800e84c
 8002cac:	20000430 	.word	0x20000430
 8002cb0:	20000444 	.word	0x20000444
 8002cb4:	20000010 	.word	0x20000010
 8002cb8:	0800e85c 	.word	0x0800e85c

08002cbc <StartRpiTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRpiTask */
void StartRpiTask(void *argument)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRpiTask */
	char ch = 'A';
 8002cc4:	2341      	movs	r3, #65	; 0x41
 8002cc6:	73fb      	strb	r3, [r7, #15]
	char old = ')';
 8002cc8:	2329      	movs	r3, #41	; 0x29
 8002cca:	73bb      	strb	r3, [r7, #14]
	int Ryan_sign_fuckmylife = 1;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
	  aRxBuffer[0] = '-';
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <StartRpiTask+0x4c>)
 8002cd2:	222d      	movs	r2, #45	; 0x2d
 8002cd4:	701a      	strb	r2, [r3, #0]
	  aRxBuffer[1] = 'W';
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <StartRpiTask+0x4c>)
 8002cd8:	2257      	movs	r2, #87	; 0x57
 8002cda:	705a      	strb	r2, [r3, #1]
	  aRxBuffer[2] = 'A';
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <StartRpiTask+0x4c>)
 8002cde:	2241      	movs	r2, #65	; 0x41
 8002ce0:	709a      	strb	r2, [r3, #2]
	  aRxBuffer[3] = 'I';
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <StartRpiTask+0x4c>)
 8002ce4:	2249      	movs	r2, #73	; 0x49
 8002ce6:	70da      	strb	r2, [r3, #3]
	  aRxBuffer[4] = 'T';
 8002ce8:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <StartRpiTask+0x4c>)
 8002cea:	2254      	movs	r2, #84	; 0x54
 8002cec:	711a      	strb	r2, [r3, #4]
	  while(notdone){
 8002cee:	e002      	b.n	8002cf6 <StartRpiTask+0x3a>
		  osDelay(100);
 8002cf0:	2064      	movs	r0, #100	; 0x64
 8002cf2:	f006 f9e3 	bl	80090bc <osDelay>
	  while(notdone){
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <StartRpiTask+0x50>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f8      	bne.n	8002cf0 <StartRpiTask+0x34>
//	  // send ack back to rpi and ready for next instruction
//		if(flagDone==1){
//			flagDone = 0;
//			debug = 0;
//		}
		osDelay(1);
 8002cfe:	2001      	movs	r0, #1
 8002d00:	f006 f9dc 	bl	80090bc <osDelay>
 8002d04:	e7fb      	b.n	8002cfe <StartRpiTask+0x42>
 8002d06:	bf00      	nop
 8002d08:	20000430 	.word	0x20000430
 8002d0c:	2000000c 	.word	0x2000000c

08002d10 <StartGyroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument)
{
 8002d10:	b5b0      	push	{r4, r5, r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGyroTask */
	gyroInit();
 8002d18:	f7ff fb86 	bl	8002428 <gyroInit>
	uint8_t val[2] = {0,0};
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	823b      	strh	r3, [r7, #16]

	int16_t angular_speed = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	827b      	strh	r3, [r7, #18]

	uint32_t tick = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]

	volatile int ticker=0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
	osDelay(300);
 8002d2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002d30:	f006 f9c4 	bl	80090bc <osDelay>
	buzzerBeep(100);
 8002d34:	2064      	movs	r0, #100	; 0x64
 8002d36:	f7fe fe31 	bl	800199c <buzzerBeep>
	while(ticker<100){
 8002d3a:	e04c      	b.n	8002dd6 <StartGyroTask+0xc6>
		osDelay(50);
 8002d3c:	2032      	movs	r0, #50	; 0x32
 8002d3e:	f006 f9bd 	bl	80090bc <osDelay>
		readByte(0x37, val);
 8002d42:	f107 0310 	add.w	r3, r7, #16
 8002d46:	4619      	mov	r1, r3
 8002d48:	2037      	movs	r0, #55	; 0x37
 8002d4a:	f7ff fb1d 	bl	8002388 <readByte>
		angular_speed = (val[0] << 8) | val[1];
 8002d4e:	7c3b      	ldrb	r3, [r7, #16]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	b21a      	sxth	r2, r3
 8002d54:	7c7b      	ldrb	r3, [r7, #17]
 8002d56:	b21b      	sxth	r3, r3
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	827b      	strh	r3, [r7, #18]
		trash +=(double)((double)angular_speed)*((HAL_GetTick() - tick)/16400.0);
 8002d5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd fbdf 	bl	8000524 <__aeabi_i2d>
 8002d66:	4604      	mov	r4, r0
 8002d68:	460d      	mov	r5, r1
 8002d6a:	f001 fb93 	bl	8004494 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd fbc5 	bl	8000504 <__aeabi_ui2d>
 8002d7a:	a34b      	add	r3, pc, #300	; (adr r3, 8002ea8 <StartGyroTask+0x198>)
 8002d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d80:	f7fd fd64 	bl	800084c <__aeabi_ddiv>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4620      	mov	r0, r4
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	f7fd fc34 	bl	80005f8 <__aeabi_dmul>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	4b45      	ldr	r3, [pc, #276]	; (8002eb0 <StartGyroTask+0x1a0>)
 8002d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9e:	f7fd fa75 	bl	800028c <__adddf3>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4942      	ldr	r1, [pc, #264]	; (8002eb0 <StartGyroTask+0x1a0>)
 8002da8:	e9c1 2300 	strd	r2, r3, [r1]
		tick = HAL_GetTick();
 8002dac:	f001 fb72 	bl	8004494 <HAL_GetTick>
 8002db0:	6178      	str	r0, [r7, #20]
		offset += angular_speed;
 8002db2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fbb4 	bl	8000524 <__aeabi_i2d>
 8002dbc:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <StartGyroTask+0x1a4>)
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	f7fd fa63 	bl	800028c <__adddf3>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	493a      	ldr	r1, [pc, #232]	; (8002eb4 <StartGyroTask+0x1a4>)
 8002dcc:	e9c1 2300 	strd	r2, r3, [r1]
		ticker++;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	60fb      	str	r3, [r7, #12]
	while(ticker<100){
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b63      	cmp	r3, #99	; 0x63
 8002dda:	ddaf      	ble.n	8002d3c <StartGyroTask+0x2c>
	}
	buzzerBeep(100);
 8002ddc:	2064      	movs	r0, #100	; 0x64
 8002dde:	f7fe fddd 	bl	800199c <buzzerBeep>
	offset = offset/(ticker);
 8002de2:	4b34      	ldr	r3, [pc, #208]	; (8002eb4 <StartGyroTask+0x1a4>)
 8002de4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fb9a 	bl	8000524 <__aeabi_i2d>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4620      	mov	r0, r4
 8002df6:	4629      	mov	r1, r5
 8002df8:	f7fd fd28 	bl	800084c <__aeabi_ddiv>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	492c      	ldr	r1, [pc, #176]	; (8002eb4 <StartGyroTask+0x1a4>)
 8002e02:	e9c1 2300 	strd	r2, r3, [r1]
	tick = HAL_GetTick();
 8002e06:	f001 fb45 	bl	8004494 <HAL_GetTick>
 8002e0a:	6178      	str	r0, [r7, #20]
	notdone=0;
 8002e0c:	4b2a      	ldr	r3, [pc, #168]	; (8002eb8 <StartGyroTask+0x1a8>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
		osDelay(50);
 8002e12:	2032      	movs	r0, #50	; 0x32
 8002e14:	f006 f952 	bl	80090bc <osDelay>
		readByte(0x37, val);
 8002e18:	f107 0310 	add.w	r3, r7, #16
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	2037      	movs	r0, #55	; 0x37
 8002e20:	f7ff fab2 	bl	8002388 <readByte>
		angular_speed = (val[0] << 8) | val[1];
 8002e24:	7c3b      	ldrb	r3, [r7, #16]
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	b21a      	sxth	r2, r3
 8002e2a:	7c7b      	ldrb	r3, [r7, #17]
 8002e2c:	b21b      	sxth	r3, r3
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	827b      	strh	r3, [r7, #18]
		total_angle +=(double)((double)angular_speed - offset)*((HAL_GetTick() - tick)/16400.0);
 8002e32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd fb74 	bl	8000524 <__aeabi_i2d>
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <StartGyroTask+0x1a4>)
 8002e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e42:	f7fd fa21 	bl	8000288 <__aeabi_dsub>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4614      	mov	r4, r2
 8002e4c:	461d      	mov	r5, r3
 8002e4e:	f001 fb21 	bl	8004494 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fb53 	bl	8000504 <__aeabi_ui2d>
 8002e5e:	a312      	add	r3, pc, #72	; (adr r3, 8002ea8 <StartGyroTask+0x198>)
 8002e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e64:	f7fd fcf2 	bl	800084c <__aeabi_ddiv>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	4629      	mov	r1, r5
 8002e70:	f7fd fbc2 	bl	80005f8 <__aeabi_dmul>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <StartGyroTask+0x1ac>)
 8002e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e82:	f7fd fa03 	bl	800028c <__adddf3>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	490c      	ldr	r1, [pc, #48]	; (8002ebc <StartGyroTask+0x1ac>)
 8002e8c:	e9c1 2300 	strd	r2, r3, [r1]
		tick = HAL_GetTick();
 8002e90:	f001 fb00 	bl	8004494 <HAL_GetTick>
 8002e94:	6178      	str	r0, [r7, #20]
		ticker -= angular_speed;
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	60fb      	str	r3, [r7, #12]
		ticker++;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	60fb      	str	r3, [r7, #12]
		osDelay(50);
 8002ea6:	e7b4      	b.n	8002e12 <StartGyroTask+0x102>
 8002ea8:	00000000 	.word	0x00000000
 8002eac:	40d00400 	.word	0x40d00400
 8002eb0:	200004c8 	.word	0x200004c8
 8002eb4:	200004c0 	.word	0x200004c0
 8002eb8:	2000000c 	.word	0x2000000c
 8002ebc:	200004a0 	.word	0x200004a0

08002ec0 <StartBulleyesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBulleyesTask */
void StartBulleyesTask(void *argument)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBulleyesTask */
	int j=0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
//	strncpy(instructBuffer[6],"JF000"  , 5);
//	strncpy(instructBuffer[7],"KF000"  , 5);
//	strncpy(instructBuffer[8],"KBOOO"  , 5);
//	strncpy(instructBuffer[9],"RF090"  , 5);

	strncpy(instructBuffer[0],"Sxxxx"  , 5);
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <StartBulleyesTask+0x48>)
 8002ece:	4a0f      	ldr	r2, [pc, #60]	; (8002f0c <StartBulleyesTask+0x4c>)
 8002ed0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ed4:	6018      	str	r0, [r3, #0]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	7019      	strb	r1, [r3, #0]
	strncpy(instructBuffer[1],"Lxxxx"  , 5);
 8002eda:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <StartBulleyesTask+0x48>)
 8002edc:	4a0c      	ldr	r2, [pc, #48]	; (8002f10 <StartBulleyesTask+0x50>)
 8002ede:	3305      	adds	r3, #5
 8002ee0:	6810      	ldr	r0, [r2, #0]
 8002ee2:	6018      	str	r0, [r3, #0]
 8002ee4:	7912      	ldrb	r2, [r2, #4]
 8002ee6:	711a      	strb	r2, [r3, #4]


  /* Infinite loop */
  for(;;)
 {
	  while(notdone){
 8002ee8:	e002      	b.n	8002ef0 <StartBulleyesTask+0x30>
		  osDelay(100);
 8002eea:	2064      	movs	r0, #100	; 0x64
 8002eec:	f006 f8e6 	bl	80090bc <osDelay>
	  while(notdone){
 8002ef0:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <StartBulleyesTask+0x54>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f8      	bne.n	8002eea <StartBulleyesTask+0x2a>
	  }
	  //timeToJuke(1);



	  osDelay(100000);
 8002ef8:	4807      	ldr	r0, [pc, #28]	; (8002f18 <StartBulleyesTask+0x58>)
 8002efa:	f006 f8df 	bl	80090bc <osDelay>
//		  aRxBuffer[2] = instructBuffer[1][2];
//		  aRxBuffer[3] = instructBuffer[1][3];
//		  aRxBuffer[4] = instructBuffer[1][4];
//

		  osDelay(10000);
 8002efe:	f242 7010 	movw	r0, #10000	; 0x2710
 8002f02:	f006 f8db 	bl	80090bc <osDelay>
	  while(notdone){
 8002f06:	e7f3      	b.n	8002ef0 <StartBulleyesTask+0x30>
 8002f08:	200004d0 	.word	0x200004d0
 8002f0c:	0800e884 	.word	0x0800e884
 8002f10:	0800e88c 	.word	0x0800e88c
 8002f14:	2000000c 	.word	0x2000000c
 8002f18:	000186a0 	.word	0x000186a0

08002f1c <StartEncoderRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderRightTask */
void StartEncoderRightTask(void *argument)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderRightTask */
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8002f24:	213c      	movs	r1, #60	; 0x3c
 8002f26:	481d      	ldr	r0, [pc, #116]	; (8002f9c <StartEncoderRightTask+0x80>)
 8002f28:	f003 fdfc 	bl	8006b24 <HAL_TIM_Encoder_Start>
	int cnt1;
	int dirR = 1;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 8002f30:	f001 fab0 	bl	8004494 <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		if(HAL_GetTick()-tick > 10L)
 8002f36:	f001 faad 	bl	8004494 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b0a      	cmp	r3, #10
 8002f42:	d9f8      	bls.n	8002f36 <StartEncoderRightTask+0x1a>
		{
			cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8002f44:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <StartEncoderRightTask+0x80>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	60bb      	str	r3, [r7, #8]
			if(cnt1 > 32000){
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002f52:	dd06      	ble.n	8002f62 <StartEncoderRightTask+0x46>
				dirR = 1;
 8002f54:	2301      	movs	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt1);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	e004      	b.n	8002f6c <StartEncoderRightTask+0x50>
			} else {
				dirR = -1;
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295
 8002f66:	617b      	str	r3, [r7, #20]
				diff = cnt1;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	613b      	str	r3, [r7, #16]

			}

			if(dirR == 1){
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d106      	bne.n	8002f80 <StartEncoderRightTask+0x64>
				rightEncoderVal -= diff;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <StartEncoderRightTask+0x84>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	4a09      	ldr	r2, [pc, #36]	; (8002fa0 <StartEncoderRightTask+0x84>)
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e005      	b.n	8002f8c <StartEncoderRightTask+0x70>
			} else {
				rightEncoderVal += diff;
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <StartEncoderRightTask+0x84>)
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4413      	add	r3, r2
 8002f88:	4a05      	ldr	r2, [pc, #20]	; (8002fa0 <StartEncoderRightTask+0x84>)
 8002f8a:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <StartEncoderRightTask+0x80>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2200      	movs	r2, #0
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 8002f94:	f001 fa7e 	bl	8004494 <HAL_GetTick>
 8002f98:	60f8      	str	r0, [r7, #12]
		if(HAL_GetTick()-tick > 10L)
 8002f9a:	e7cc      	b.n	8002f36 <StartEncoderRightTask+0x1a>
 8002f9c:	200002f0 	.word	0x200002f0
 8002fa0:	2000045c 	.word	0x2000045c

08002fa4 <StartEncoderLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderLeftTask */
void StartEncoderLeftTask(void *argument)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderLeftTask */
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8002fac:	213c      	movs	r1, #60	; 0x3c
 8002fae:	481d      	ldr	r0, [pc, #116]	; (8003024 <StartEncoderLeftTask+0x80>)
 8002fb0:	f003 fdb8 	bl	8006b24 <HAL_TIM_Encoder_Start>
	int cnt2;
	int dirL = 1;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 8002fb8:	f001 fa6c 	bl	8004494 <HAL_GetTick>
 8002fbc:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		if(HAL_GetTick()-tick > 10L)
 8002fbe:	f001 fa69 	bl	8004494 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b0a      	cmp	r3, #10
 8002fca:	d9f8      	bls.n	8002fbe <StartEncoderLeftTask+0x1a>
		{
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8002fcc:	4b15      	ldr	r3, [pc, #84]	; (8003024 <StartEncoderLeftTask+0x80>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	60bb      	str	r3, [r7, #8]

			if(cnt2 > 32000){
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002fda:	dd06      	ble.n	8002fea <StartEncoderLeftTask+0x46>
				dirL = 1;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt2);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	e004      	b.n	8002ff4 <StartEncoderLeftTask+0x50>
			} else {
				dirL = -1;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	617b      	str	r3, [r7, #20]
				diff = cnt2;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	613b      	str	r3, [r7, #16]
			}
			if(dirL == 1){
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d106      	bne.n	8003008 <StartEncoderLeftTask+0x64>
				leftEncoderVal += diff;
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <StartEncoderLeftTask+0x84>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4413      	add	r3, r2
 8003002:	4a09      	ldr	r2, [pc, #36]	; (8003028 <StartEncoderLeftTask+0x84>)
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e005      	b.n	8003014 <StartEncoderLeftTask+0x70>
			} else {
				leftEncoderVal -= diff;
 8003008:	4b07      	ldr	r3, [pc, #28]	; (8003028 <StartEncoderLeftTask+0x84>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	4a05      	ldr	r2, [pc, #20]	; (8003028 <StartEncoderLeftTask+0x84>)
 8003012:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <StartEncoderLeftTask+0x80>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2200      	movs	r2, #0
 800301a:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 800301c:	f001 fa3a 	bl	8004494 <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]
		if(HAL_GetTick()-tick > 10L)
 8003022:	e7cc      	b.n	8002fbe <StartEncoderLeftTask+0x1a>
 8003024:	200002a8 	.word	0x200002a8
 8003028:	20000460 	.word	0x20000460
 800302c:	00000000 	.word	0x00000000

08003030 <StartJukeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJukeTask */
void StartJukeTask(void *argument)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJukeTask */
  /* Infinite loop */
  for(;;)
  {
	while(notdone){
 8003038:	e002      	b.n	8003040 <StartJukeTask+0x10>
	  osDelay(100);
 800303a:	2064      	movs	r0, #100	; 0x64
 800303c:	f006 f83e 	bl	80090bc <osDelay>
	while(notdone){
 8003040:	4b6b      	ldr	r3, [pc, #428]	; (80031f0 <StartJukeTask+0x1c0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f8      	bne.n	800303a <StartJukeTask+0xa>
	}

	osDelay(1500);
 8003048:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800304c:	f006 f836 	bl	80090bc <osDelay>

//	aRxBuffer[0] = 'S';   //HERE IF HARDCODE -------------------------


	while(aRxBuffer[0]!='S'){
 8003050:	e002      	b.n	8003058 <StartJukeTask+0x28>
		osDelay(50);
 8003052:	2032      	movs	r0, #50	; 0x32
 8003054:	f006 f832 	bl	80090bc <osDelay>
	while(aRxBuffer[0]!='S'){
 8003058:	4b66      	ldr	r3, [pc, #408]	; (80031f4 <StartJukeTask+0x1c4>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b53      	cmp	r3, #83	; 0x53
 800305e:	d1f8      	bne.n	8003052 <StartJukeTask+0x22>
	}
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer On
 8003060:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003064:	4864      	ldr	r0, [pc, #400]	; (80031f8 <StartJukeTask+0x1c8>)
 8003066:	f001 fd9e 	bl	8004ba6 <HAL_GPIO_TogglePin>

	rightEncoderVal = leftEncoderVal=0;
 800306a:	4b64      	ldr	r3, [pc, #400]	; (80031fc <StartJukeTask+0x1cc>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	4b62      	ldr	r3, [pc, #392]	; (80031fc <StartJukeTask+0x1cc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a62      	ldr	r2, [pc, #392]	; (8003200 <StartJukeTask+0x1d0>)
 8003076:	6013      	str	r3, [r2, #0]
	straightUS = 1;
 8003078:	4b62      	ldr	r3, [pc, #392]	; (8003204 <StartJukeTask+0x1d4>)
 800307a:	2201      	movs	r2, #1
 800307c:	601a      	str	r2, [r3, #0]
	errorcorrection = 1;
 800307e:	4b62      	ldr	r3, [pc, #392]	; (8003208 <StartJukeTask+0x1d8>)
 8003080:	2201      	movs	r2, #1
 8003082:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8003084:	4b61      	ldr	r3, [pc, #388]	; (800320c <StartJukeTask+0x1dc>)
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
	moveCarStraightSensor(26); //doesnt change the direction
 800308a:	201a      	movs	r0, #26
 800308c:	f7fe fd06 	bl	8001a9c <moveCarStraightSensor>
	while(finishCheck());
 8003090:	bf00      	nop
 8003092:	f7ff f955 	bl	8002340 <finishCheck>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1fa      	bne.n	8003092 <StartJukeTask+0x62>
	errorcorrection = 0;
 800309c:	4b5a      	ldr	r3, [pc, #360]	; (8003208 <StartJukeTask+0x1d8>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
	straightUS = 0;
 80030a2:	4b58      	ldr	r3, [pc, #352]	; (8003204 <StartJukeTask+0x1d4>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
	movebackL += leftEncoderVal;
 80030a8:	4b59      	ldr	r3, [pc, #356]	; (8003210 <StartJukeTask+0x1e0>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b53      	ldr	r3, [pc, #332]	; (80031fc <StartJukeTask+0x1cc>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4413      	add	r3, r2
 80030b2:	4a57      	ldr	r2, [pc, #348]	; (8003210 <StartJukeTask+0x1e0>)
 80030b4:	6013      	str	r3, [r2, #0]
	movebackR += rightEncoderVal;
 80030b6:	4b57      	ldr	r3, [pc, #348]	; (8003214 <StartJukeTask+0x1e4>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4b51      	ldr	r3, [pc, #324]	; (8003200 <StartJukeTask+0x1d0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4413      	add	r3, r2
 80030c0:	4a54      	ldr	r2, [pc, #336]	; (8003214 <StartJukeTask+0x1e4>)
 80030c2:	6013      	str	r3, [r2, #0]

	// try for triangle
	moveBackLeftRun1 += leftEncoderVal;
 80030c4:	4b54      	ldr	r3, [pc, #336]	; (8003218 <StartJukeTask+0x1e8>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b4c      	ldr	r3, [pc, #304]	; (80031fc <StartJukeTask+0x1cc>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4413      	add	r3, r2
 80030ce:	4a52      	ldr	r2, [pc, #328]	; (8003218 <StartJukeTask+0x1e8>)
 80030d0:	6013      	str	r3, [r2, #0]
	moveBackRightRun1 += rightEncoderVal;
 80030d2:	4b52      	ldr	r3, [pc, #328]	; (800321c <StartJukeTask+0x1ec>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4b4a      	ldr	r3, [pc, #296]	; (8003200 <StartJukeTask+0x1d0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	4a4f      	ldr	r2, [pc, #316]	; (800321c <StartJukeTask+0x1ec>)
 80030de:	6013      	str	r3, [r2, #0]
	osDelay(5);
 80030e0:	2005      	movs	r0, #5
 80030e2:	f005 ffeb 	bl	80090bc <osDelay>


//	aRxBuffer[0] = 'L';   //HERE IF HARDCODE-------------------------
//	update=2;  //HERE IF HARDCODE-------------------------

	nexttask = 'Z';
 80030e6:	4b4e      	ldr	r3, [pc, #312]	; (8003220 <StartJukeTask+0x1f0>)
 80030e8:	225a      	movs	r2, #90	; 0x5a
 80030ea:	701a      	strb	r2, [r3, #0]
	while(nexttask == 'Z'){
 80030ec:	e00f      	b.n	800310e <StartJukeTask+0xde>
		if(update==2 && aRxBuffer[0]=='L' || aRxBuffer[0]=='R'){
 80030ee:	4b4d      	ldr	r3, [pc, #308]	; (8003224 <StartJukeTask+0x1f4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d103      	bne.n	80030fe <StartJukeTask+0xce>
 80030f6:	4b3f      	ldr	r3, [pc, #252]	; (80031f4 <StartJukeTask+0x1c4>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b4c      	cmp	r3, #76	; 0x4c
 80030fc:	d003      	beq.n	8003106 <StartJukeTask+0xd6>
 80030fe:	4b3d      	ldr	r3, [pc, #244]	; (80031f4 <StartJukeTask+0x1c4>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b52      	cmp	r3, #82	; 0x52
 8003104:	d103      	bne.n	800310e <StartJukeTask+0xde>
				nexttask = aRxBuffer[0];
 8003106:	4b3b      	ldr	r3, [pc, #236]	; (80031f4 <StartJukeTask+0x1c4>)
 8003108:	781a      	ldrb	r2, [r3, #0]
 800310a:	4b45      	ldr	r3, [pc, #276]	; (8003220 <StartJukeTask+0x1f0>)
 800310c:	701a      	strb	r2, [r3, #0]
	while(nexttask == 'Z'){
 800310e:	4b44      	ldr	r3, [pc, #272]	; (8003220 <StartJukeTask+0x1f0>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b5a      	cmp	r3, #90	; 0x5a
 8003114:	d0eb      	beq.n	80030ee <StartJukeTask+0xbe>
		}
	}


	turn90 = 0;
 8003116:	4b44      	ldr	r3, [pc, #272]	; (8003228 <StartJukeTask+0x1f8>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
	if (nexttask == 'R'){  //FIRST ARROW
 800311c:	4b40      	ldr	r3, [pc, #256]	; (8003220 <StartJukeTask+0x1f0>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b52      	cmp	r3, #82	; 0x52
 8003122:	f040 808d 	bne.w	8003240 <StartJukeTask+0x210>

		pwmVal_servo = 230;
 8003126:	4b41      	ldr	r3, [pc, #260]	; (800322c <StartJukeTask+0x1fc>)
 8003128:	22e6      	movs	r2, #230	; 0xe6
 800312a:	801a      	strh	r2, [r3, #0]
		osDelay(250);
 800312c:	20fa      	movs	r0, #250	; 0xfa
 800312e:	f005 ffc5 	bl	80090bc <osDelay>

		times_acceptable=0;
 8003132:	4b36      	ldr	r3, [pc, #216]	; (800320c <StartJukeTask+0x1dc>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
		moveCarRight(50);
 8003138:	ed9f 0b27 	vldr	d0, [pc, #156]	; 80031d8 <StartJukeTask+0x1a8>
 800313c:	f7fe fcce 	bl	8001adc <moveCarRight>
		while(finishCheck());
 8003140:	bf00      	nop
 8003142:	f7ff f8fd 	bl	8002340 <finishCheck>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1fa      	bne.n	8003142 <StartJukeTask+0x112>

		pwmVal_servo = 106;
 800314c:	4b37      	ldr	r3, [pc, #220]	; (800322c <StartJukeTask+0x1fc>)
 800314e:	226a      	movs	r2, #106	; 0x6a
 8003150:	801a      	strh	r2, [r3, #0]
		osDelay(500);
 8003152:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003156:	f005 ffb1 	bl	80090bc <osDelay>

		times_acceptable=0;
 800315a:	4b2c      	ldr	r3, [pc, #176]	; (800320c <StartJukeTask+0x1dc>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
		moveCarLeft(100);
 8003160:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 80031e0 <StartJukeTask+0x1b0>
 8003164:	f7fe fce4 	bl	8001b30 <moveCarLeft>
		while(finishCheck());
 8003168:	bf00      	nop
 800316a:	f7ff f8e9 	bl	8002340 <finishCheck>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1fa      	bne.n	800316a <StartJukeTask+0x13a>

		pwmVal_servo = 230;
 8003174:	4b2d      	ldr	r3, [pc, #180]	; (800322c <StartJukeTask+0x1fc>)
 8003176:	22e6      	movs	r2, #230	; 0xe6
 8003178:	801a      	strh	r2, [r3, #0]
		osDelay(500);
 800317a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800317e:	f005 ff9d 	bl	80090bc <osDelay>

		times_acceptable=0;
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <StartJukeTask+0x1dc>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
		moveCarRight(45);
 8003188:	ed9f 0b17 	vldr	d0, [pc, #92]	; 80031e8 <StartJukeTask+0x1b8>
 800318c:	f7fe fca6 	bl	8001adc <moveCarRight>
		while(finishCheck());
 8003190:	bf00      	nop
 8003192:	f7ff f8d5 	bl	8002340 <finishCheck>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1fa      	bne.n	8003192 <StartJukeTask+0x162>

		pwmVal_servo = 149;
 800319c:	4b23      	ldr	r3, [pc, #140]	; (800322c <StartJukeTask+0x1fc>)
 800319e:	2295      	movs	r2, #149	; 0x95
 80031a0:	801a      	strh	r2, [r3, #0]
		osDelay(250);
 80031a2:	20fa      	movs	r0, #250	; 0xfa
 80031a4:	f005 ff8a 	bl	80090bc <osDelay>
		target_angle -= 5;
 80031a8:	4b21      	ldr	r3, [pc, #132]	; (8003230 <StartJukeTask+0x200>)
 80031aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	4b20      	ldr	r3, [pc, #128]	; (8003234 <StartJukeTask+0x204>)
 80031b4:	f7fd f868 	bl	8000288 <__aeabi_dsub>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	491c      	ldr	r1, [pc, #112]	; (8003230 <StartJukeTask+0x200>)
 80031be:	e9c1 2300 	strd	r2, r3, [r1]


		HAL_UART_Transmit(&huart3, "A", 1,0xFFFF);
 80031c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031c6:	2201      	movs	r2, #1
 80031c8:	491b      	ldr	r1, [pc, #108]	; (8003238 <StartJukeTask+0x208>)
 80031ca:	481c      	ldr	r0, [pc, #112]	; (800323c <StartJukeTask+0x20c>)
 80031cc:	f004 fe3b 	bl	8007e46 <HAL_UART_Transmit>
 80031d0:	e08f      	b.n	80032f2 <StartJukeTask+0x2c2>
 80031d2:	bf00      	nop
 80031d4:	f3af 8000 	nop.w
 80031d8:	00000000 	.word	0x00000000
 80031dc:	40490000 	.word	0x40490000
 80031e0:	00000000 	.word	0x00000000
 80031e4:	40590000 	.word	0x40590000
 80031e8:	00000000 	.word	0x00000000
 80031ec:	40468000 	.word	0x40468000
 80031f0:	2000000c 	.word	0x2000000c
 80031f4:	20000430 	.word	0x20000430
 80031f8:	40020400 	.word	0x40020400
 80031fc:	20000460 	.word	0x20000460
 8003200:	2000045c 	.word	0x2000045c
 8003204:	20000458 	.word	0x20000458
 8003208:	20000454 	.word	0x20000454
 800320c:	2000044c 	.word	0x2000044c
 8003210:	2000047c 	.word	0x2000047c
 8003214:	20000480 	.word	0x20000480
 8003218:	20000490 	.word	0x20000490
 800321c:	20000494 	.word	0x20000494
 8003220:	20000002 	.word	0x20000002
 8003224:	20000444 	.word	0x20000444
 8003228:	20000478 	.word	0x20000478
 800322c:	20000000 	.word	0x20000000
 8003230:	20000470 	.word	0x20000470
 8003234:	40140000 	.word	0x40140000
 8003238:	0800e894 	.word	0x0800e894
 800323c:	200003c8 	.word	0x200003c8
	}
	else if(nexttask == 'L'){	//First arrow is left
 8003240:	4b77      	ldr	r3, [pc, #476]	; (8003420 <StartJukeTask+0x3f0>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b4c      	cmp	r3, #76	; 0x4c
 8003246:	d154      	bne.n	80032f2 <StartJukeTask+0x2c2>

		pwmVal_servo = 106;
 8003248:	4b76      	ldr	r3, [pc, #472]	; (8003424 <StartJukeTask+0x3f4>)
 800324a:	226a      	movs	r2, #106	; 0x6a
 800324c:	801a      	strh	r2, [r3, #0]
		osDelay(250);
 800324e:	20fa      	movs	r0, #250	; 0xfa
 8003250:	f005 ff34 	bl	80090bc <osDelay>

		times_acceptable=0;
 8003254:	4b74      	ldr	r3, [pc, #464]	; (8003428 <StartJukeTask+0x3f8>)
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
		moveCarLeft(50);
 800325a:	ed9f 0b69 	vldr	d0, [pc, #420]	; 8003400 <StartJukeTask+0x3d0>
 800325e:	f7fe fc67 	bl	8001b30 <moveCarLeft>
		while(finishCheck());
 8003262:	bf00      	nop
 8003264:	f7ff f86c 	bl	8002340 <finishCheck>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1fa      	bne.n	8003264 <StartJukeTask+0x234>

		pwmVal_servo = 230;
 800326e:	4b6d      	ldr	r3, [pc, #436]	; (8003424 <StartJukeTask+0x3f4>)
 8003270:	22e6      	movs	r2, #230	; 0xe6
 8003272:	801a      	strh	r2, [r3, #0]
		osDelay(500);
 8003274:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003278:	f005 ff20 	bl	80090bc <osDelay>

		times_acceptable=0;
 800327c:	4b6a      	ldr	r3, [pc, #424]	; (8003428 <StartJukeTask+0x3f8>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
		moveCarRight(100);
 8003282:	ed9f 0b61 	vldr	d0, [pc, #388]	; 8003408 <StartJukeTask+0x3d8>
 8003286:	f7fe fc29 	bl	8001adc <moveCarRight>
		while(finishCheck());
 800328a:	bf00      	nop
 800328c:	f7ff f858 	bl	8002340 <finishCheck>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1fa      	bne.n	800328c <StartJukeTask+0x25c>

		pwmVal_servo = 106;
 8003296:	4b63      	ldr	r3, [pc, #396]	; (8003424 <StartJukeTask+0x3f4>)
 8003298:	226a      	movs	r2, #106	; 0x6a
 800329a:	801a      	strh	r2, [r3, #0]
		osDelay(500);
 800329c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032a0:	f005 ff0c 	bl	80090bc <osDelay>

		times_acceptable=0;
 80032a4:	4b60      	ldr	r3, [pc, #384]	; (8003428 <StartJukeTask+0x3f8>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
		moveCarLeft(45);
 80032aa:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8003410 <StartJukeTask+0x3e0>
 80032ae:	f7fe fc3f 	bl	8001b30 <moveCarLeft>
		while(finishCheck());
 80032b2:	bf00      	nop
 80032b4:	f7ff f844 	bl	8002340 <finishCheck>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1fa      	bne.n	80032b4 <StartJukeTask+0x284>

		pwmVal_servo = 149;
 80032be:	4b59      	ldr	r3, [pc, #356]	; (8003424 <StartJukeTask+0x3f4>)
 80032c0:	2295      	movs	r2, #149	; 0x95
 80032c2:	801a      	strh	r2, [r3, #0]
		osDelay(250);
 80032c4:	20fa      	movs	r0, #250	; 0xfa
 80032c6:	f005 fef9 	bl	80090bc <osDelay>
		target_angle += 5;
 80032ca:	4b58      	ldr	r3, [pc, #352]	; (800342c <StartJukeTask+0x3fc>)
 80032cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	4b56      	ldr	r3, [pc, #344]	; (8003430 <StartJukeTask+0x400>)
 80032d6:	f7fc ffd9 	bl	800028c <__adddf3>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4953      	ldr	r1, [pc, #332]	; (800342c <StartJukeTask+0x3fc>)
 80032e0:	e9c1 2300 	strd	r2, r3, [r1]

		HAL_UART_Transmit(&huart3, "A", 1,0xFFFF);
 80032e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032e8:	2201      	movs	r2, #1
 80032ea:	4952      	ldr	r1, [pc, #328]	; (8003434 <StartJukeTask+0x404>)
 80032ec:	4852      	ldr	r0, [pc, #328]	; (8003438 <StartJukeTask+0x408>)
 80032ee:	f004 fdaa 	bl	8007e46 <HAL_UART_Transmit>
	}
	turn90 = 1;
 80032f2:	4b52      	ldr	r3, [pc, #328]	; (800343c <StartJukeTask+0x40c>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	601a      	str	r2, [r3, #0]


//	aRxBuffer[0] = 'D';   //HERE IF HARDCODE-------------------------

	if(Distance>900 || Distance <6 ){
 80032f8:	4b51      	ldr	r3, [pc, #324]	; (8003440 <StartJukeTask+0x410>)
 80032fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	4b50      	ldr	r3, [pc, #320]	; (8003444 <StartJukeTask+0x414>)
 8003304:	f7fd fc08 	bl	8000b18 <__aeabi_dcmpgt>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10a      	bne.n	8003324 <StartJukeTask+0x2f4>
 800330e:	4b4c      	ldr	r3, [pc, #304]	; (8003440 <StartJukeTask+0x410>)
 8003310:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	4b4b      	ldr	r3, [pc, #300]	; (8003448 <StartJukeTask+0x418>)
 800331a:	f7fd fbdf 	bl	8000adc <__aeabi_dcmplt>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d019      	beq.n	8003358 <StartJukeTask+0x328>
		errorcorrection = 1;
 8003324:	4b49      	ldr	r3, [pc, #292]	; (800344c <StartJukeTask+0x41c>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]
		times_acceptable=0;
 800332a:	4b3f      	ldr	r3, [pc, #252]	; (8003428 <StartJukeTask+0x3f8>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
		leftEncoderVal = rightEncoderVal = 0;
 8003330:	4b47      	ldr	r3, [pc, #284]	; (8003450 <StartJukeTask+0x420>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	4b46      	ldr	r3, [pc, #280]	; (8003450 <StartJukeTask+0x420>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a46      	ldr	r2, [pc, #280]	; (8003454 <StartJukeTask+0x424>)
 800333c:	6013      	str	r3, [r2, #0]
		moveCarStraight(-10);
 800333e:	ed9f 0b36 	vldr	d0, [pc, #216]	; 8003418 <StartJukeTask+0x3e8>
 8003342:	f7fe fb45 	bl	80019d0 <moveCarStraight>
		while(finishCheck());
 8003346:	bf00      	nop
 8003348:	f7fe fffa 	bl	8002340 <finishCheck>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1fa      	bne.n	8003348 <StartJukeTask+0x318>
		errorcorrection = 0;
 8003352:	4b3e      	ldr	r3, [pc, #248]	; (800344c <StartJukeTask+0x41c>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
	}



	while(aRxBuffer[0]!='D'){
 8003358:	e002      	b.n	8003360 <StartJukeTask+0x330>
		osDelay(50);
 800335a:	2032      	movs	r0, #50	; 0x32
 800335c:	f005 feae 	bl	80090bc <osDelay>
	while(aRxBuffer[0]!='D'){
 8003360:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <StartJukeTask+0x428>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b44      	cmp	r3, #68	; 0x44
 8003366:	d1f8      	bne.n	800335a <StartJukeTask+0x32a>
	}
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer On
 8003368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800336c:	483b      	ldr	r0, [pc, #236]	; (800345c <StartJukeTask+0x42c>)
 800336e:	f001 fc1a 	bl	8004ba6 <HAL_GPIO_TogglePin>


	pwmVal_servo = 149;  //MOVE TO THE 2ND
 8003372:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <StartJukeTask+0x3f4>)
 8003374:	2295      	movs	r2, #149	; 0x95
 8003376:	801a      	strh	r2, [r3, #0]
	osDelay(100);
 8003378:	2064      	movs	r0, #100	; 0x64
 800337a:	f005 fe9f 	bl	80090bc <osDelay>
	rightEncoderVal = 0;
 800337e:	4b34      	ldr	r3, [pc, #208]	; (8003450 <StartJukeTask+0x420>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
	leftEncoderVal = 0;
 8003384:	4b33      	ldr	r3, [pc, #204]	; (8003454 <StartJukeTask+0x424>)
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]

	straightUS = 1;
 800338a:	4b35      	ldr	r3, [pc, #212]	; (8003460 <StartJukeTask+0x430>)
 800338c:	2201      	movs	r2, #1
 800338e:	601a      	str	r2, [r3, #0]
	errorcorrection = 1;
 8003390:	4b2e      	ldr	r3, [pc, #184]	; (800344c <StartJukeTask+0x41c>)
 8003392:	2201      	movs	r2, #1
 8003394:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8003396:	4b24      	ldr	r3, [pc, #144]	; (8003428 <StartJukeTask+0x3f8>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
	moveCarStraightSensor(30);
 800339c:	201e      	movs	r0, #30
 800339e:	f7fe fb7d 	bl	8001a9c <moveCarStraightSensor>
	while(finishCheck());
 80033a2:	bf00      	nop
 80033a4:	f7fe ffcc 	bl	8002340 <finishCheck>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1fa      	bne.n	80033a4 <StartJukeTask+0x374>
	errorcorrection = 0;
 80033ae:	4b27      	ldr	r3, [pc, #156]	; (800344c <StartJukeTask+0x41c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
	straightUS = 0;
 80033b4:	4b2a      	ldr	r3, [pc, #168]	; (8003460 <StartJukeTask+0x430>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
	movebackL += leftEncoderVal;
 80033ba:	4b2a      	ldr	r3, [pc, #168]	; (8003464 <StartJukeTask+0x434>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4b25      	ldr	r3, [pc, #148]	; (8003454 <StartJukeTask+0x424>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4413      	add	r3, r2
 80033c4:	4a27      	ldr	r2, [pc, #156]	; (8003464 <StartJukeTask+0x434>)
 80033c6:	6013      	str	r3, [r2, #0]
	movebackR += rightEncoderVal;
 80033c8:	4b27      	ldr	r3, [pc, #156]	; (8003468 <StartJukeTask+0x438>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b20      	ldr	r3, [pc, #128]	; (8003450 <StartJukeTask+0x420>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4413      	add	r3, r2
 80033d2:	4a25      	ldr	r2, [pc, #148]	; (8003468 <StartJukeTask+0x438>)
 80033d4:	6013      	str	r3, [r2, #0]

	// try for triangle
	moveBackLeftRun2 += leftEncoderVal;
 80033d6:	4b25      	ldr	r3, [pc, #148]	; (800346c <StartJukeTask+0x43c>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b1e      	ldr	r3, [pc, #120]	; (8003454 <StartJukeTask+0x424>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4413      	add	r3, r2
 80033e0:	4a22      	ldr	r2, [pc, #136]	; (800346c <StartJukeTask+0x43c>)
 80033e2:	6013      	str	r3, [r2, #0]
	moveBackRightRun2 += rightEncoderVal;
 80033e4:	4b22      	ldr	r3, [pc, #136]	; (8003470 <StartJukeTask+0x440>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <StartJukeTask+0x420>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4413      	add	r3, r2
 80033ee:	4a20      	ldr	r2, [pc, #128]	; (8003470 <StartJukeTask+0x440>)
 80033f0:	6013      	str	r3, [r2, #0]
//	aRxBuffer[0] = 'R';  //HERE IF HARDCODE-------------------------
//	update=4; //HERE IF HARDCODE-------------------------



	nexttask = 'Z';
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <StartJukeTask+0x3f0>)
 80033f4:	225a      	movs	r2, #90	; 0x5a
 80033f6:	701a      	strb	r2, [r3, #0]
	while(nexttask == 'Z'){
 80033f8:	e04c      	b.n	8003494 <StartJukeTask+0x464>
 80033fa:	bf00      	nop
 80033fc:	f3af 8000 	nop.w
 8003400:	00000000 	.word	0x00000000
 8003404:	40490000 	.word	0x40490000
 8003408:	00000000 	.word	0x00000000
 800340c:	40590000 	.word	0x40590000
 8003410:	00000000 	.word	0x00000000
 8003414:	40468000 	.word	0x40468000
 8003418:	00000000 	.word	0x00000000
 800341c:	c0240000 	.word	0xc0240000
 8003420:	20000002 	.word	0x20000002
 8003424:	20000000 	.word	0x20000000
 8003428:	2000044c 	.word	0x2000044c
 800342c:	20000470 	.word	0x20000470
 8003430:	40140000 	.word	0x40140000
 8003434:	0800e894 	.word	0x0800e894
 8003438:	200003c8 	.word	0x200003c8
 800343c:	20000478 	.word	0x20000478
 8003440:	200005b0 	.word	0x200005b0
 8003444:	408c2000 	.word	0x408c2000
 8003448:	40180000 	.word	0x40180000
 800344c:	20000454 	.word	0x20000454
 8003450:	2000045c 	.word	0x2000045c
 8003454:	20000460 	.word	0x20000460
 8003458:	20000430 	.word	0x20000430
 800345c:	40020400 	.word	0x40020400
 8003460:	20000458 	.word	0x20000458
 8003464:	2000047c 	.word	0x2000047c
 8003468:	20000480 	.word	0x20000480
 800346c:	20000498 	.word	0x20000498
 8003470:	2000049c 	.word	0x2000049c
		if(update==4 && (aRxBuffer[0]=='L' || aRxBuffer[0]=='R')){
 8003474:	4ba2      	ldr	r3, [pc, #648]	; (8003700 <StartJukeTask+0x6d0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b04      	cmp	r3, #4
 800347a:	d10b      	bne.n	8003494 <StartJukeTask+0x464>
 800347c:	4ba1      	ldr	r3, [pc, #644]	; (8003704 <StartJukeTask+0x6d4>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b4c      	cmp	r3, #76	; 0x4c
 8003482:	d003      	beq.n	800348c <StartJukeTask+0x45c>
 8003484:	4b9f      	ldr	r3, [pc, #636]	; (8003704 <StartJukeTask+0x6d4>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b52      	cmp	r3, #82	; 0x52
 800348a:	d103      	bne.n	8003494 <StartJukeTask+0x464>
				nexttask = aRxBuffer[0];
 800348c:	4b9d      	ldr	r3, [pc, #628]	; (8003704 <StartJukeTask+0x6d4>)
 800348e:	781a      	ldrb	r2, [r3, #0]
 8003490:	4b9d      	ldr	r3, [pc, #628]	; (8003708 <StartJukeTask+0x6d8>)
 8003492:	701a      	strb	r2, [r3, #0]
	while(nexttask == 'Z'){
 8003494:	4b9c      	ldr	r3, [pc, #624]	; (8003708 <StartJukeTask+0x6d8>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b5a      	cmp	r3, #90	; 0x5a
 800349a:	d0eb      	beq.n	8003474 <StartJukeTask+0x444>
		}
	}

	// 53 - lab
	if (nexttask == 'R'){  //Second arrow is right
 800349c:	4b9a      	ldr	r3, [pc, #616]	; (8003708 <StartJukeTask+0x6d8>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b52      	cmp	r3, #82	; 0x52
 80034a2:	d15f      	bne.n	8003564 <StartJukeTask+0x534>

		times_acceptable=0;
 80034a4:	4b99      	ldr	r3, [pc, #612]	; (800370c <StartJukeTask+0x6dc>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
		moveCarRight(90);
 80034aa:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 80036e0 <StartJukeTask+0x6b0>
 80034ae:	f7fe fb15 	bl	8001adc <moveCarRight>
		while(finishCheck());
 80034b2:	bf00      	nop
 80034b4:	f7fe ff44 	bl	8002340 <finishCheck>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1fa      	bne.n	80034b4 <StartJukeTask+0x484>
		pwmVal_servo = 149;
 80034be:	4b94      	ldr	r3, [pc, #592]	; (8003710 <StartJukeTask+0x6e0>)
 80034c0:	2295      	movs	r2, #149	; 0x95
 80034c2:	801a      	strh	r2, [r3, #0]
		osDelay(200);
 80034c4:	20c8      	movs	r0, #200	; 0xc8
 80034c6:	f005 fdf9 	bl	80090bc <osDelay>


		pwmVal_servo = 106;
 80034ca:	4b91      	ldr	r3, [pc, #580]	; (8003710 <StartJukeTask+0x6e0>)
 80034cc:	226a      	movs	r2, #106	; 0x6a
 80034ce:	801a      	strh	r2, [r3, #0]
		osDelay(200);
 80034d0:	20c8      	movs	r0, #200	; 0xc8
 80034d2:	f005 fdf3 	bl	80090bc <osDelay>

		times_acceptable=0;
 80034d6:	4b8d      	ldr	r3, [pc, #564]	; (800370c <StartJukeTask+0x6dc>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
		moveCarLeft(180);
 80034dc:	ed9f 0b82 	vldr	d0, [pc, #520]	; 80036e8 <StartJukeTask+0x6b8>
 80034e0:	f7fe fb26 	bl	8001b30 <moveCarLeft>
		while(finishCheck());
 80034e4:	bf00      	nop
 80034e6:	f7fe ff2b 	bl	8002340 <finishCheck>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1fa      	bne.n	80034e6 <StartJukeTask+0x4b6>

		pwmVal_servo = 149;
 80034f0:	4b87      	ldr	r3, [pc, #540]	; (8003710 <StartJukeTask+0x6e0>)
 80034f2:	2295      	movs	r2, #149	; 0x95
 80034f4:	801a      	strh	r2, [r3, #0]
		osDelay(200);
 80034f6:	20c8      	movs	r0, #200	; 0xc8
 80034f8:	f005 fde0 	bl	80090bc <osDelay>

		errorcorrection = 1;
 80034fc:	4b85      	ldr	r3, [pc, #532]	; (8003714 <StartJukeTask+0x6e4>)
 80034fe:	2201      	movs	r2, #1
 8003500:	601a      	str	r2, [r3, #0]
		times_acceptable=0;
 8003502:	4b82      	ldr	r3, [pc, #520]	; (800370c <StartJukeTask+0x6dc>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
		leftEncoderVal = rightEncoderVal = 0;
 8003508:	4b83      	ldr	r3, [pc, #524]	; (8003718 <StartJukeTask+0x6e8>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	4b82      	ldr	r3, [pc, #520]	; (8003718 <StartJukeTask+0x6e8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a82      	ldr	r2, [pc, #520]	; (800371c <StartJukeTask+0x6ec>)
 8003514:	6013      	str	r3, [r2, #0]
		moveCarStraight(50);
 8003516:	ed9f 0b76 	vldr	d0, [pc, #472]	; 80036f0 <StartJukeTask+0x6c0>
 800351a:	f7fe fa59 	bl	80019d0 <moveCarStraight>
		while(finishCheck());
 800351e:	bf00      	nop
 8003520:	f7fe ff0e 	bl	8002340 <finishCheck>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1fa      	bne.n	8003520 <StartJukeTask+0x4f0>
		errorcorrection = 0;
 800352a:	4b7a      	ldr	r3, [pc, #488]	; (8003714 <StartJukeTask+0x6e4>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

		pwmVal_servo = 106;
 8003530:	4b77      	ldr	r3, [pc, #476]	; (8003710 <StartJukeTask+0x6e0>)
 8003532:	226a      	movs	r2, #106	; 0x6a
 8003534:	801a      	strh	r2, [r3, #0]
		osDelay(200);
 8003536:	20c8      	movs	r0, #200	; 0xc8
 8003538:	f005 fdc0 	bl	80090bc <osDelay>

		times_acceptable=0;
 800353c:	4b73      	ldr	r3, [pc, #460]	; (800370c <StartJukeTask+0x6dc>)
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
		moveCarLeft(90);
 8003542:	ed9f 0b67 	vldr	d0, [pc, #412]	; 80036e0 <StartJukeTask+0x6b0>
 8003546:	f7fe faf3 	bl	8001b30 <moveCarLeft>
		while(finishCheck());
 800354a:	bf00      	nop
 800354c:	f7fe fef8 	bl	8002340 <finishCheck>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1fa      	bne.n	800354c <StartJukeTask+0x51c>

		pwmVal_servo = 149;
 8003556:	4b6e      	ldr	r3, [pc, #440]	; (8003710 <StartJukeTask+0x6e0>)
 8003558:	2295      	movs	r2, #149	; 0x95
 800355a:	801a      	strh	r2, [r3, #0]
		osDelay(200);
 800355c:	20c8      	movs	r0, #200	; 0xc8
 800355e:	f005 fdad 	bl	80090bc <osDelay>
 8003562:	e062      	b.n	800362a <StartJukeTask+0x5fa>



	}
	else if(nexttask == 'L'){
 8003564:	4b68      	ldr	r3, [pc, #416]	; (8003708 <StartJukeTask+0x6d8>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b4c      	cmp	r3, #76	; 0x4c
 800356a:	d15e      	bne.n	800362a <StartJukeTask+0x5fa>

		times_acceptable=0;
 800356c:	4b67      	ldr	r3, [pc, #412]	; (800370c <StartJukeTask+0x6dc>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
		moveCarLeft(90);
 8003572:	ed9f 0b5b 	vldr	d0, [pc, #364]	; 80036e0 <StartJukeTask+0x6b0>
 8003576:	f7fe fadb 	bl	8001b30 <moveCarLeft>
		while(finishCheck());
 800357a:	bf00      	nop
 800357c:	f7fe fee0 	bl	8002340 <finishCheck>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1fa      	bne.n	800357c <StartJukeTask+0x54c>
		pwmVal_servo = 149;
 8003586:	4b62      	ldr	r3, [pc, #392]	; (8003710 <StartJukeTask+0x6e0>)
 8003588:	2295      	movs	r2, #149	; 0x95
 800358a:	801a      	strh	r2, [r3, #0]
		osDelay(200);
 800358c:	20c8      	movs	r0, #200	; 0xc8
 800358e:	f005 fd95 	bl	80090bc <osDelay>


		pwmVal_servo = 230;
 8003592:	4b5f      	ldr	r3, [pc, #380]	; (8003710 <StartJukeTask+0x6e0>)
 8003594:	22e6      	movs	r2, #230	; 0xe6
 8003596:	801a      	strh	r2, [r3, #0]
		osDelay(200);
 8003598:	20c8      	movs	r0, #200	; 0xc8
 800359a:	f005 fd8f 	bl	80090bc <osDelay>

		times_acceptable=0;
 800359e:	4b5b      	ldr	r3, [pc, #364]	; (800370c <StartJukeTask+0x6dc>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
		moveCarRight(180);
 80035a4:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80036e8 <StartJukeTask+0x6b8>
 80035a8:	f7fe fa98 	bl	8001adc <moveCarRight>
		while(finishCheck());
 80035ac:	bf00      	nop
 80035ae:	f7fe fec7 	bl	8002340 <finishCheck>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1fa      	bne.n	80035ae <StartJukeTask+0x57e>

		pwmVal_servo = 149;
 80035b8:	4b55      	ldr	r3, [pc, #340]	; (8003710 <StartJukeTask+0x6e0>)
 80035ba:	2295      	movs	r2, #149	; 0x95
 80035bc:	801a      	strh	r2, [r3, #0]
		osDelay(200);
 80035be:	20c8      	movs	r0, #200	; 0xc8
 80035c0:	f005 fd7c 	bl	80090bc <osDelay>

		errorcorrection = 1;
 80035c4:	4b53      	ldr	r3, [pc, #332]	; (8003714 <StartJukeTask+0x6e4>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
		times_acceptable=0;
 80035ca:	4b50      	ldr	r3, [pc, #320]	; (800370c <StartJukeTask+0x6dc>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
		leftEncoderVal = rightEncoderVal = 0;
 80035d0:	4b51      	ldr	r3, [pc, #324]	; (8003718 <StartJukeTask+0x6e8>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	4b50      	ldr	r3, [pc, #320]	; (8003718 <StartJukeTask+0x6e8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a50      	ldr	r2, [pc, #320]	; (800371c <StartJukeTask+0x6ec>)
 80035dc:	6013      	str	r3, [r2, #0]
		moveCarStraight(50);
 80035de:	ed9f 0b44 	vldr	d0, [pc, #272]	; 80036f0 <StartJukeTask+0x6c0>
 80035e2:	f7fe f9f5 	bl	80019d0 <moveCarStraight>
		while(finishCheck());
 80035e6:	bf00      	nop
 80035e8:	f7fe feaa 	bl	8002340 <finishCheck>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1fa      	bne.n	80035e8 <StartJukeTask+0x5b8>
		errorcorrection = 0;
 80035f2:	4b48      	ldr	r3, [pc, #288]	; (8003714 <StartJukeTask+0x6e4>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

		pwmVal_servo = 230;
 80035f8:	4b45      	ldr	r3, [pc, #276]	; (8003710 <StartJukeTask+0x6e0>)
 80035fa:	22e6      	movs	r2, #230	; 0xe6
 80035fc:	801a      	strh	r2, [r3, #0]
		osDelay(200);
 80035fe:	20c8      	movs	r0, #200	; 0xc8
 8003600:	f005 fd5c 	bl	80090bc <osDelay>

		times_acceptable = 0;
 8003604:	4b41      	ldr	r3, [pc, #260]	; (800370c <StartJukeTask+0x6dc>)
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
		moveCarRight(90);
 800360a:	ed9f 0b35 	vldr	d0, [pc, #212]	; 80036e0 <StartJukeTask+0x6b0>
 800360e:	f7fe fa65 	bl	8001adc <moveCarRight>
		while(finishCheck());
 8003612:	bf00      	nop
 8003614:	f7fe fe94 	bl	8002340 <finishCheck>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1fa      	bne.n	8003614 <StartJukeTask+0x5e4>

		pwmVal_servo = 149;
 800361e:	4b3c      	ldr	r3, [pc, #240]	; (8003710 <StartJukeTask+0x6e0>)
 8003620:	2295      	movs	r2, #149	; 0x95
 8003622:	801a      	strh	r2, [r3, #0]
		osDelay(200);
 8003624:	20c8      	movs	r0, #200	; 0xc8
 8003626:	f005 fd49 	bl	80090bc <osDelay>
	}

	// for slide turning idea
   //movebackR = (movebackR + movebackL)/2 + 11007;
	// move car more than halfway back then slideturn
	movebackR = (moveBackRightRun2 + moveBackLeftRun2)/2 + 13907;
 800362a:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <StartJukeTask+0x6f0>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4b3d      	ldr	r3, [pc, #244]	; (8003724 <StartJukeTask+0x6f4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4413      	add	r3, r2
 8003634:	0fda      	lsrs	r2, r3, #31
 8003636:	4413      	add	r3, r2
 8003638:	105b      	asrs	r3, r3, #1
 800363a:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 800363e:	3313      	adds	r3, #19
 8003640:	4a39      	ldr	r2, [pc, #228]	; (8003728 <StartJukeTask+0x6f8>)
 8003642:	6013      	str	r3, [r2, #0]
	leftEncoderVal = rightEncoderVal = 0;
 8003644:	4b34      	ldr	r3, [pc, #208]	; (8003718 <StartJukeTask+0x6e8>)
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	4b33      	ldr	r3, [pc, #204]	; (8003718 <StartJukeTask+0x6e8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a33      	ldr	r2, [pc, #204]	; (800371c <StartJukeTask+0x6ec>)
 8003650:	6013      	str	r3, [r2, #0]
	straightUS = 0;
 8003652:	4b36      	ldr	r3, [pc, #216]	; (800372c <StartJukeTask+0x6fc>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
	errorcorrection = 1;
 8003658:	4b2e      	ldr	r3, [pc, #184]	; (8003714 <StartJukeTask+0x6e4>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 800365e:	4b2b      	ldr	r3, [pc, #172]	; (800370c <StartJukeTask+0x6dc>)
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
	moveCarStraight((movebackR/75.6) - 85);
 8003664:	4b30      	ldr	r3, [pc, #192]	; (8003728 <StartJukeTask+0x6f8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7fc ff5b 	bl	8000524 <__aeabi_i2d>
 800366e:	a322      	add	r3, pc, #136	; (adr r3, 80036f8 <StartJukeTask+0x6c8>)
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f7fd f8ea 	bl	800084c <__aeabi_ddiv>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <StartJukeTask+0x700>)
 8003686:	f7fc fdff 	bl	8000288 <__aeabi_dsub>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	ec43 2b17 	vmov	d7, r2, r3
 8003692:	eeb0 0a47 	vmov.f32	s0, s14
 8003696:	eef0 0a67 	vmov.f32	s1, s15
 800369a:	f7fe f999 	bl	80019d0 <moveCarStraight>
	while(finishCheck());
 800369e:	bf00      	nop
 80036a0:	f7fe fe4e 	bl	8002340 <finishCheck>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1fa      	bne.n	80036a0 <StartJukeTask+0x670>
	errorcorrection = 0;
 80036aa:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <StartJukeTask+0x6e4>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
	// second half



	// turn into carpark using slide idea
	if(nexttask == 'R'){
 80036b0:	4b15      	ldr	r3, [pc, #84]	; (8003708 <StartJukeTask+0x6d8>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b52      	cmp	r3, #82	; 0x52
 80036b6:	d13d      	bne.n	8003734 <StartJukeTask+0x704>
		times_acceptable=0;
 80036b8:	4b14      	ldr	r3, [pc, #80]	; (800370c <StartJukeTask+0x6dc>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
		moveCarSlideLeft(75);
 80036be:	204b      	movs	r0, #75	; 0x4b
 80036c0:	f7fe faa8 	bl	8001c14 <moveCarSlideLeft>
		while(finishCheck());
 80036c4:	bf00      	nop
 80036c6:	f7fe fe3b 	bl	8002340 <finishCheck>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1fa      	bne.n	80036c6 <StartJukeTask+0x696>
		pwmVal_servo = 149;
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <StartJukeTask+0x6e0>)
 80036d2:	2295      	movs	r2, #149	; 0x95
 80036d4:	801a      	strh	r2, [r3, #0]
		osDelay(200);
 80036d6:	20c8      	movs	r0, #200	; 0xc8
 80036d8:	f005 fcf0 	bl	80090bc <osDelay>
 80036dc:	e040      	b.n	8003760 <StartJukeTask+0x730>
 80036de:	bf00      	nop
 80036e0:	00000000 	.word	0x00000000
 80036e4:	40568000 	.word	0x40568000
 80036e8:	00000000 	.word	0x00000000
 80036ec:	40668000 	.word	0x40668000
 80036f0:	00000000 	.word	0x00000000
 80036f4:	40490000 	.word	0x40490000
 80036f8:	66666666 	.word	0x66666666
 80036fc:	4052e666 	.word	0x4052e666
 8003700:	20000444 	.word	0x20000444
 8003704:	20000430 	.word	0x20000430
 8003708:	20000002 	.word	0x20000002
 800370c:	2000044c 	.word	0x2000044c
 8003710:	20000000 	.word	0x20000000
 8003714:	20000454 	.word	0x20000454
 8003718:	2000045c 	.word	0x2000045c
 800371c:	20000460 	.word	0x20000460
 8003720:	2000049c 	.word	0x2000049c
 8003724:	20000498 	.word	0x20000498
 8003728:	20000480 	.word	0x20000480
 800372c:	20000458 	.word	0x20000458
 8003730:	40554000 	.word	0x40554000
	}
	else if(nexttask == 'L'){
 8003734:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <StartJukeTask+0x780>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b4c      	cmp	r3, #76	; 0x4c
 800373a:	d111      	bne.n	8003760 <StartJukeTask+0x730>
		times_acceptable=0;
 800373c:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <StartJukeTask+0x784>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
		moveCarSlideRight(70);
 8003742:	2046      	movs	r0, #70	; 0x46
 8003744:	f7fe fa1e 	bl	8001b84 <moveCarSlideRight>
		while(finishCheck());
 8003748:	bf00      	nop
 800374a:	f7fe fdf9 	bl	8002340 <finishCheck>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1fa      	bne.n	800374a <StartJukeTask+0x71a>
		pwmVal_servo = 149;
 8003754:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <StartJukeTask+0x788>)
 8003756:	2295      	movs	r2, #149	; 0x95
 8003758:	801a      	strh	r2, [r3, #0]
		osDelay(200);
 800375a:	20c8      	movs	r0, #200	; 0xc8
 800375c:	f005 fcae 	bl	80090bc <osDelay>
	}

	pwmVal_servo = 149;
 8003760:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <StartJukeTask+0x788>)
 8003762:	2295      	movs	r2, #149	; 0x95
 8003764:	801a      	strh	r2, [r3, #0]
	osDelay(100);
 8003766:	2064      	movs	r0, #100	; 0x64
 8003768:	f005 fca8 	bl	80090bc <osDelay>
	rightEncoderVal = 0;
 800376c:	4b13      	ldr	r3, [pc, #76]	; (80037bc <StartJukeTask+0x78c>)
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
	leftEncoderVal = 0;
 8003772:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <StartJukeTask+0x790>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

	straightUS = 1;
 8003778:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <StartJukeTask+0x794>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]
	errorcorrection = 1;
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <StartJukeTask+0x798>)
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <StartJukeTask+0x784>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
	moveCarStraightSensor(22);
 800378a:	2016      	movs	r0, #22
 800378c:	f7fe f986 	bl	8001a9c <moveCarStraightSensor>
	while(finishCheck());
 8003790:	bf00      	nop
 8003792:	f7fe fdd5 	bl	8002340 <finishCheck>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1fa      	bne.n	8003792 <StartJukeTask+0x762>
	errorcorrection = 0;
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <StartJukeTask+0x798>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
	straightUS = 0;
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <StartJukeTask+0x794>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

	// turn into carpark using triangle idea


	osDelay(10000000);
 80037a8:	4808      	ldr	r0, [pc, #32]	; (80037cc <StartJukeTask+0x79c>)
 80037aa:	f005 fc87 	bl	80090bc <osDelay>
	while(notdone){
 80037ae:	e447      	b.n	8003040 <StartJukeTask+0x10>
 80037b0:	20000002 	.word	0x20000002
 80037b4:	2000044c 	.word	0x2000044c
 80037b8:	20000000 	.word	0x20000000
 80037bc:	2000045c 	.word	0x2000045c
 80037c0:	20000460 	.word	0x20000460
 80037c4:	20000458 	.word	0x20000458
 80037c8:	20000454 	.word	0x20000454
 80037cc:	00989680 	.word	0x00989680

080037d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037d4:	b672      	cpsid	i
}
 80037d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037d8:	e7fe      	b.n	80037d8 <Error_Handler+0x8>
	...

080037dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	4b16      	ldr	r3, [pc, #88]	; (8003840 <HAL_MspInit+0x64>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	4a15      	ldr	r2, [pc, #84]	; (8003840 <HAL_MspInit+0x64>)
 80037ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f0:	6453      	str	r3, [r2, #68]	; 0x44
 80037f2:	4b13      	ldr	r3, [pc, #76]	; (8003840 <HAL_MspInit+0x64>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037fa:	607b      	str	r3, [r7, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <HAL_MspInit+0x64>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	4a0e      	ldr	r2, [pc, #56]	; (8003840 <HAL_MspInit+0x64>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380c:	6413      	str	r3, [r2, #64]	; 0x40
 800380e:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <HAL_MspInit+0x64>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800381a:	2200      	movs	r2, #0
 800381c:	210f      	movs	r1, #15
 800381e:	f06f 0001 	mvn.w	r0, #1
 8003822:	f000 ff42 	bl	80046aa <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003826:	2200      	movs	r2, #0
 8003828:	2105      	movs	r1, #5
 800382a:	2005      	movs	r0, #5
 800382c:	f000 ff3d 	bl	80046aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003830:	2005      	movs	r0, #5
 8003832:	f000 ff56 	bl	80046e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800

08003844 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	; 0x28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800384c:	f107 0314 	add.w	r3, r7, #20
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	605a      	str	r2, [r3, #4]
 8003856:	609a      	str	r2, [r3, #8]
 8003858:	60da      	str	r2, [r3, #12]
 800385a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <HAL_I2C_MspInit+0x84>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d12c      	bne.n	80038c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	4b18      	ldr	r3, [pc, #96]	; (80038cc <HAL_I2C_MspInit+0x88>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	4a17      	ldr	r2, [pc, #92]	; (80038cc <HAL_I2C_MspInit+0x88>)
 8003870:	f043 0302 	orr.w	r3, r3, #2
 8003874:	6313      	str	r3, [r2, #48]	; 0x30
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <HAL_I2C_MspInit+0x88>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003882:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003888:	2312      	movs	r3, #18
 800388a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003890:	2303      	movs	r3, #3
 8003892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003894:	2304      	movs	r3, #4
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003898:	f107 0314 	add.w	r3, r7, #20
 800389c:	4619      	mov	r1, r3
 800389e:	480c      	ldr	r0, [pc, #48]	; (80038d0 <HAL_I2C_MspInit+0x8c>)
 80038a0:	f000 ffcc 	bl	800483c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <HAL_I2C_MspInit+0x88>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	4a07      	ldr	r2, [pc, #28]	; (80038cc <HAL_I2C_MspInit+0x88>)
 80038ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038b2:	6413      	str	r3, [r2, #64]	; 0x40
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_I2C_MspInit+0x88>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80038c0:	bf00      	nop
 80038c2:	3728      	adds	r7, #40	; 0x28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40005400 	.word	0x40005400
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020400 	.word	0x40020400

080038d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	; 0x28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038dc:	f107 0314 	add.w	r3, r7, #20
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a2f      	ldr	r2, [pc, #188]	; (80039b0 <HAL_TIM_Base_MspInit+0xdc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d11e      	bne.n	8003934 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	4b2e      	ldr	r3, [pc, #184]	; (80039b4 <HAL_TIM_Base_MspInit+0xe0>)
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	4a2d      	ldr	r2, [pc, #180]	; (80039b4 <HAL_TIM_Base_MspInit+0xe0>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	6453      	str	r3, [r2, #68]	; 0x44
 8003906:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_TIM_Base_MspInit+0xe0>)
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003912:	2200      	movs	r2, #0
 8003914:	2105      	movs	r1, #5
 8003916:	2018      	movs	r0, #24
 8003918:	f000 fec7 	bl	80046aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800391c:	2018      	movs	r0, #24
 800391e:	f000 fee0 	bl	80046e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003922:	2200      	movs	r2, #0
 8003924:	2105      	movs	r1, #5
 8003926:	2019      	movs	r0, #25
 8003928:	f000 febf 	bl	80046aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800392c:	2019      	movs	r0, #25
 800392e:	f000 fed8 	bl	80046e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003932:	e038      	b.n	80039a6 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM8)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1f      	ldr	r2, [pc, #124]	; (80039b8 <HAL_TIM_Base_MspInit+0xe4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d133      	bne.n	80039a6 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	4b1c      	ldr	r3, [pc, #112]	; (80039b4 <HAL_TIM_Base_MspInit+0xe0>)
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	4a1b      	ldr	r2, [pc, #108]	; (80039b4 <HAL_TIM_Base_MspInit+0xe0>)
 8003948:	f043 0302 	orr.w	r3, r3, #2
 800394c:	6453      	str	r3, [r2, #68]	; 0x44
 800394e:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_TIM_Base_MspInit+0xe0>)
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <HAL_TIM_Base_MspInit+0xe0>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	4a14      	ldr	r2, [pc, #80]	; (80039b4 <HAL_TIM_Base_MspInit+0xe0>)
 8003964:	f043 0304 	orr.w	r3, r3, #4
 8003968:	6313      	str	r3, [r2, #48]	; 0x30
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_TIM_Base_MspInit+0xe0>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003976:	23c0      	movs	r3, #192	; 0xc0
 8003978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397a:	2302      	movs	r3, #2
 800397c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003982:	2300      	movs	r3, #0
 8003984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003986:	2303      	movs	r3, #3
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800398a:	f107 0314 	add.w	r3, r7, #20
 800398e:	4619      	mov	r1, r3
 8003990:	480a      	ldr	r0, [pc, #40]	; (80039bc <HAL_TIM_Base_MspInit+0xe8>)
 8003992:	f000 ff53 	bl	800483c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8003996:	2200      	movs	r2, #0
 8003998:	2105      	movs	r1, #5
 800399a:	202d      	movs	r0, #45	; 0x2d
 800399c:	f000 fe85 	bl	80046aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80039a0:	202d      	movs	r0, #45	; 0x2d
 80039a2:	f000 fe9e 	bl	80046e2 <HAL_NVIC_EnableIRQ>
}
 80039a6:	bf00      	nop
 80039a8:	3728      	adds	r7, #40	; 0x28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40023800 	.word	0x40023800
 80039b8:	40010400 	.word	0x40010400
 80039bc:	40020800 	.word	0x40020800

080039c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08c      	sub	sp, #48	; 0x30
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c8:	f107 031c 	add.w	r3, r7, #28
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	60da      	str	r2, [r3, #12]
 80039d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e0:	d14b      	bne.n	8003a7a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	4b3f      	ldr	r3, [pc, #252]	; (8003ae4 <HAL_TIM_Encoder_MspInit+0x124>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	4a3e      	ldr	r2, [pc, #248]	; (8003ae4 <HAL_TIM_Encoder_MspInit+0x124>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6413      	str	r3, [r2, #64]	; 0x40
 80039f2:	4b3c      	ldr	r3, [pc, #240]	; (8003ae4 <HAL_TIM_Encoder_MspInit+0x124>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	4b38      	ldr	r3, [pc, #224]	; (8003ae4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	4a37      	ldr	r2, [pc, #220]	; (8003ae4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0e:	4b35      	ldr	r3, [pc, #212]	; (8003ae4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	4b31      	ldr	r3, [pc, #196]	; (8003ae4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	4a30      	ldr	r2, [pc, #192]	; (8003ae4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a24:	f043 0302 	orr.w	r3, r3, #2
 8003a28:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2a:	4b2e      	ldr	r3, [pc, #184]	; (8003ae4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_CH1_Pin;
 8003a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a44:	2300      	movs	r3, #0
 8003a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH1_GPIO_Port, &GPIO_InitStruct);
 8003a4c:	f107 031c 	add.w	r3, r7, #28
 8003a50:	4619      	mov	r1, r3
 8003a52:	4825      	ldr	r0, [pc, #148]	; (8003ae8 <HAL_TIM_Encoder_MspInit+0x128>)
 8003a54:	f000 fef2 	bl	800483c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA_CH2_Pin;
 8003a58:	2308      	movs	r3, #8
 8003a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a64:	2300      	movs	r3, #0
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH2_GPIO_Port, &GPIO_InitStruct);
 8003a6c:	f107 031c 	add.w	r3, r7, #28
 8003a70:	4619      	mov	r1, r3
 8003a72:	481e      	ldr	r0, [pc, #120]	; (8003aec <HAL_TIM_Encoder_MspInit+0x12c>)
 8003a74:	f000 fee2 	bl	800483c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a78:	e030      	b.n	8003adc <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1c      	ldr	r2, [pc, #112]	; (8003af0 <HAL_TIM_Encoder_MspInit+0x130>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d12b      	bne.n	8003adc <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	4b16      	ldr	r3, [pc, #88]	; (8003ae4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a8e:	f043 0302 	orr.w	r3, r3, #2
 8003a92:	6413      	str	r3, [r2, #64]	; 0x40
 8003a94:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60bb      	str	r3, [r7, #8]
 8003aa4:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	4a0e      	ldr	r2, [pc, #56]	; (8003ae4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderB_CH1_Pin|EncoderB_CH2_Pin;
 8003abc:	23c0      	movs	r3, #192	; 0xc0
 8003abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003acc:	2302      	movs	r3, #2
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad0:	f107 031c 	add.w	r3, r7, #28
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4804      	ldr	r0, [pc, #16]	; (8003ae8 <HAL_TIM_Encoder_MspInit+0x128>)
 8003ad8:	f000 feb0 	bl	800483c <HAL_GPIO_Init>
}
 8003adc:	bf00      	nop
 8003ade:	3730      	adds	r7, #48	; 0x30
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40020000 	.word	0x40020000
 8003aec:	40020400 	.word	0x40020400
 8003af0:	40000400 	.word	0x40000400

08003af4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	; 0x28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003afc:	f107 0314 	add.w	r3, r7, #20
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a1d      	ldr	r2, [pc, #116]	; (8003b88 <HAL_TIM_IC_MspInit+0x94>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d134      	bne.n	8003b80 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <HAL_TIM_IC_MspInit+0x98>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <HAL_TIM_IC_MspInit+0x98>)
 8003b20:	f043 0304 	orr.w	r3, r3, #4
 8003b24:	6413      	str	r3, [r2, #64]	; 0x40
 8003b26:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <HAL_TIM_IC_MspInit+0x98>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <HAL_TIM_IC_MspInit+0x98>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	4a14      	ldr	r2, [pc, #80]	; (8003b8c <HAL_TIM_IC_MspInit+0x98>)
 8003b3c:	f043 0308 	orr.w	r3, r3, #8
 8003b40:	6313      	str	r3, [r2, #48]	; 0x30
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <HAL_TIM_IC_MspInit+0x98>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = ultra_ECHO_Pin;
 8003b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b54:	2302      	movs	r3, #2
 8003b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b60:	2302      	movs	r3, #2
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ultra_ECHO_GPIO_Port, &GPIO_InitStruct);
 8003b64:	f107 0314 	add.w	r3, r7, #20
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4809      	ldr	r0, [pc, #36]	; (8003b90 <HAL_TIM_IC_MspInit+0x9c>)
 8003b6c:	f000 fe66 	bl	800483c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003b70:	2200      	movs	r2, #0
 8003b72:	2105      	movs	r1, #5
 8003b74:	201e      	movs	r0, #30
 8003b76:	f000 fd98 	bl	80046aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b7a:	201e      	movs	r0, #30
 8003b7c:	f000 fdb1 	bl	80046e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003b80:	bf00      	nop
 8003b82:	3728      	adds	r7, #40	; 0x28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40000800 	.word	0x40000800
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40020c00 	.word	0x40020c00

08003b94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9c:	f107 030c 	add.w	r3, r7, #12
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a12      	ldr	r2, [pc, #72]	; (8003bfc <HAL_TIM_MspPostInit+0x68>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d11e      	bne.n	8003bf4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <HAL_TIM_MspPostInit+0x6c>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	4a10      	ldr	r2, [pc, #64]	; (8003c00 <HAL_TIM_MspPostInit+0x6c>)
 8003bc0:	f043 0310 	orr.w	r3, r3, #16
 8003bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc6:	4b0e      	ldr	r3, [pc, #56]	; (8003c00 <HAL_TIM_MspPostInit+0x6c>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003bd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003be4:	2301      	movs	r3, #1
 8003be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003be8:	f107 030c 	add.w	r3, r7, #12
 8003bec:	4619      	mov	r1, r3
 8003bee:	4805      	ldr	r0, [pc, #20]	; (8003c04 <HAL_TIM_MspPostInit+0x70>)
 8003bf0:	f000 fe24 	bl	800483c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003bf4:	bf00      	nop
 8003bf6:	3720      	adds	r7, #32
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40021000 	.word	0x40021000

08003c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08a      	sub	sp, #40	; 0x28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c10:	f107 0314 	add.w	r3, r7, #20
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
 8003c1c:	60da      	str	r2, [r3, #12]
 8003c1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1d      	ldr	r2, [pc, #116]	; (8003c9c <HAL_UART_MspInit+0x94>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d134      	bne.n	8003c94 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ca0 <HAL_UART_MspInit+0x98>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <HAL_UART_MspInit+0x98>)
 8003c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c38:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3a:	4b19      	ldr	r3, [pc, #100]	; (8003ca0 <HAL_UART_MspInit+0x98>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <HAL_UART_MspInit+0x98>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	4a14      	ldr	r2, [pc, #80]	; (8003ca0 <HAL_UART_MspInit+0x98>)
 8003c50:	f043 0304 	orr.w	r3, r3, #4
 8003c54:	6313      	str	r3, [r2, #48]	; 0x30
 8003c56:	4b12      	ldr	r3, [pc, #72]	; (8003ca0 <HAL_UART_MspInit+0x98>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003c62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c70:	2303      	movs	r3, #3
 8003c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c74:	2307      	movs	r3, #7
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c78:	f107 0314 	add.w	r3, r7, #20
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4809      	ldr	r0, [pc, #36]	; (8003ca4 <HAL_UART_MspInit+0x9c>)
 8003c80:	f000 fddc 	bl	800483c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003c84:	2200      	movs	r2, #0
 8003c86:	2105      	movs	r1, #5
 8003c88:	2027      	movs	r0, #39	; 0x27
 8003c8a:	f000 fd0e 	bl	80046aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c8e:	2027      	movs	r0, #39	; 0x27
 8003c90:	f000 fd27 	bl	80046e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c94:	bf00      	nop
 8003c96:	3728      	adds	r7, #40	; 0x28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40004800 	.word	0x40004800
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40020800 	.word	0x40020800

08003ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cac:	e7fe      	b.n	8003cac <NMI_Handler+0x4>

08003cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cb2:	e7fe      	b.n	8003cb2 <HardFault_Handler+0x4>

08003cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cb8:	e7fe      	b.n	8003cb8 <MemManage_Handler+0x4>

08003cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cbe:	e7fe      	b.n	8003cbe <BusFault_Handler+0x4>

08003cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cc4:	e7fe      	b.n	8003cc4 <UsageFault_Handler+0x4>

08003cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cd8:	f000 fbc8 	bl	800446c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003cdc:	f006 fe26 	bl	800a92c <xTaskGetSchedulerState>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d001      	beq.n	8003cea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003ce6:	f007 fc0f 	bl	800b508 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}

08003cee <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d00:	4802      	ldr	r0, [pc, #8]	; (8003d0c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003d02:	f002 ff9d 	bl	8006c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000260 	.word	0x20000260

08003d10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d14:	4802      	ldr	r0, [pc, #8]	; (8003d20 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003d16:	f002 ff93 	bl	8006c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000260 	.word	0x20000260

08003d24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003d28:	4802      	ldr	r0, [pc, #8]	; (8003d34 <TIM4_IRQHandler+0x10>)
 8003d2a:	f002 ff89 	bl	8006c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000338 	.word	0x20000338

08003d38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d3c:	4802      	ldr	r0, [pc, #8]	; (8003d48 <USART3_IRQHandler+0x10>)
 8003d3e:	f004 f945 	bl	8007fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	200003c8 	.word	0x200003c8

08003d4c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003d50:	4802      	ldr	r0, [pc, #8]	; (8003d5c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003d52:	f002 ff75 	bl	8006c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000380 	.word	0x20000380

08003d60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return 1;
 8003d64:	2301      	movs	r3, #1
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <_kill>:

int _kill(int pid, int sig)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d7a:	f008 fc61 	bl	800c640 <__errno>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2216      	movs	r2, #22
 8003d82:	601a      	str	r2, [r3, #0]
  return -1;
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <_exit>:

void _exit (int status)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d98:	f04f 31ff 	mov.w	r1, #4294967295
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff ffe7 	bl	8003d70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003da2:	e7fe      	b.n	8003da2 <_exit+0x12>

08003da4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	e00a      	b.n	8003dcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003db6:	f3af 8000 	nop.w
 8003dba:	4601      	mov	r1, r0
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	60ba      	str	r2, [r7, #8]
 8003dc2:	b2ca      	uxtb	r2, r1
 8003dc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	dbf0      	blt.n	8003db6 <_read+0x12>
  }

  return len;
 8003dd4:	687b      	ldr	r3, [r7, #4]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b086      	sub	sp, #24
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e009      	b.n	8003e04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	60ba      	str	r2, [r7, #8]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	3301      	adds	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	dbf1      	blt.n	8003df0 <_write+0x12>
  }
  return len;
 8003e0c:	687b      	ldr	r3, [r7, #4]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <_close>:

int _close(int file)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e3e:	605a      	str	r2, [r3, #4]
  return 0;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <_isatty>:

int _isatty(int file)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e56:	2301      	movs	r3, #1
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e88:	4a14      	ldr	r2, [pc, #80]	; (8003edc <_sbrk+0x5c>)
 8003e8a:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <_sbrk+0x60>)
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e94:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <_sbrk+0x64>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e9c:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <_sbrk+0x64>)
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <_sbrk+0x68>)
 8003ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <_sbrk+0x64>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d207      	bcs.n	8003ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003eb0:	f008 fbc6 	bl	800c640 <__errno>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	220c      	movs	r2, #12
 8003eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003eba:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebe:	e009      	b.n	8003ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ec0:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <_sbrk+0x64>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ec6:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <_sbrk+0x64>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	4a05      	ldr	r2, [pc, #20]	; (8003ee4 <_sbrk+0x64>)
 8003ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20020000 	.word	0x20020000
 8003ee0:	00000400 	.word	0x00000400
 8003ee4:	200005b8 	.word	0x200005b8
 8003ee8:	200054f8 	.word	0x200054f8

08003eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ef0:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <SystemInit+0x20>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef6:	4a05      	ldr	r2, [pc, #20]	; (8003f0c <SystemInit+0x20>)
 8003ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	e000ed00 	.word	0xe000ed00

08003f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f14:	480d      	ldr	r0, [pc, #52]	; (8003f4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f16:	490e      	ldr	r1, [pc, #56]	; (8003f50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f18:	4a0e      	ldr	r2, [pc, #56]	; (8003f54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f1c:	e002      	b.n	8003f24 <LoopCopyDataInit>

08003f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f22:	3304      	adds	r3, #4

08003f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f28:	d3f9      	bcc.n	8003f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f2a:	4a0b      	ldr	r2, [pc, #44]	; (8003f58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f2c:	4c0b      	ldr	r4, [pc, #44]	; (8003f5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f30:	e001      	b.n	8003f36 <LoopFillZerobss>

08003f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f34:	3204      	adds	r2, #4

08003f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f38:	d3fb      	bcc.n	8003f32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f3a:	f7ff ffd7 	bl	8003eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f3e:	f008 fb85 	bl	800c64c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f42:	f7fc ffcf 	bl	8000ee4 <main>
  bx  lr    
 8003f46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003f48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f50:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003f54:	0800f7f4 	.word	0x0800f7f4
  ldr r2, =_sbss
 8003f58:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003f5c:	200054f4 	.word	0x200054f4

08003f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f60:	e7fe      	b.n	8003f60 <ADC_IRQHandler>
	...

08003f64 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	71fb      	strb	r3, [r7, #7]
 8003f6e:	e026      	b.n	8003fbe <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	3b50      	subs	r3, #80	; 0x50
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 f82b 	bl	8003fd4 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8003f7e:	2100      	movs	r1, #0
 8003f80:	2000      	movs	r0, #0
 8003f82:	f000 f827 	bl	8003fd4 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8003f86:	2100      	movs	r1, #0
 8003f88:	2010      	movs	r0, #16
 8003f8a:	f000 f823 	bl	8003fd4 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8003f8e:	2300      	movs	r3, #0
 8003f90:	71bb      	strb	r3, [r7, #6]
 8003f92:	e00d      	b.n	8003fb0 <OLED_Refresh_Gram+0x4c>
 8003f94:	79ba      	ldrb	r2, [r7, #6]
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	490d      	ldr	r1, [pc, #52]	; (8003fd0 <OLED_Refresh_Gram+0x6c>)
 8003f9a:	00d2      	lsls	r2, r2, #3
 8003f9c:	440a      	add	r2, r1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 f815 	bl	8003fd4 <OLED_WR_Byte>
 8003faa:	79bb      	ldrb	r3, [r7, #6]
 8003fac:	3301      	adds	r3, #1
 8003fae:	71bb      	strb	r3, [r7, #6]
 8003fb0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	daed      	bge.n	8003f94 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	71fb      	strb	r3, [r7, #7]
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	2b07      	cmp	r3, #7
 8003fc2:	d9d5      	bls.n	8003f70 <OLED_Refresh_Gram+0xc>
	}   
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	200005bc 	.word	0x200005bc

08003fd4 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	460a      	mov	r2, r1
 8003fde:	71fb      	strb	r3, [r7, #7]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8003fe4:	79bb      	ldrb	r3, [r7, #6]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d006      	beq.n	8003ff8 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8003fea:	2201      	movs	r2, #1
 8003fec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ff0:	481c      	ldr	r0, [pc, #112]	; (8004064 <OLED_WR_Byte+0x90>)
 8003ff2:	f000 fdbf 	bl	8004b74 <HAL_GPIO_WritePin>
 8003ff6:	e005      	b.n	8004004 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ffe:	4819      	ldr	r0, [pc, #100]	; (8004064 <OLED_WR_Byte+0x90>)
 8004000:	f000 fdb8 	bl	8004b74 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8004004:	2300      	movs	r3, #0
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	e01e      	b.n	8004048 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800400a:	2200      	movs	r2, #0
 800400c:	2120      	movs	r1, #32
 800400e:	4815      	ldr	r0, [pc, #84]	; (8004064 <OLED_WR_Byte+0x90>)
 8004010:	f000 fdb0 	bl	8004b74 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8004014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004018:	2b00      	cmp	r3, #0
 800401a:	da05      	bge.n	8004028 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800401c:	2201      	movs	r2, #1
 800401e:	2140      	movs	r1, #64	; 0x40
 8004020:	4810      	ldr	r0, [pc, #64]	; (8004064 <OLED_WR_Byte+0x90>)
 8004022:	f000 fda7 	bl	8004b74 <HAL_GPIO_WritePin>
 8004026:	e004      	b.n	8004032 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8004028:	2200      	movs	r2, #0
 800402a:	2140      	movs	r1, #64	; 0x40
 800402c:	480d      	ldr	r0, [pc, #52]	; (8004064 <OLED_WR_Byte+0x90>)
 800402e:	f000 fda1 	bl	8004b74 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8004032:	2201      	movs	r2, #1
 8004034:	2120      	movs	r1, #32
 8004036:	480b      	ldr	r0, [pc, #44]	; (8004064 <OLED_WR_Byte+0x90>)
 8004038:	f000 fd9c 	bl	8004b74 <HAL_GPIO_WritePin>
		dat<<=1;   
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	3301      	adds	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	2b07      	cmp	r3, #7
 800404c:	d9dd      	bls.n	800400a <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800404e:	2201      	movs	r2, #1
 8004050:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004054:	4803      	ldr	r0, [pc, #12]	; (8004064 <OLED_WR_Byte+0x90>)
 8004056:	f000 fd8d 	bl	8004b74 <HAL_GPIO_WritePin>
} 
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000

08004068 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800406e:	2300      	movs	r3, #0
 8004070:	71fb      	strb	r3, [r7, #7]
 8004072:	e014      	b.n	800409e <OLED_Clear+0x36>
 8004074:	2300      	movs	r3, #0
 8004076:	71bb      	strb	r3, [r7, #6]
 8004078:	e00a      	b.n	8004090 <OLED_Clear+0x28>
 800407a:	79ba      	ldrb	r2, [r7, #6]
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	490c      	ldr	r1, [pc, #48]	; (80040b0 <OLED_Clear+0x48>)
 8004080:	00d2      	lsls	r2, r2, #3
 8004082:	440a      	add	r2, r1
 8004084:	4413      	add	r3, r2
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]
 800408a:	79bb      	ldrb	r3, [r7, #6]
 800408c:	3301      	adds	r3, #1
 800408e:	71bb      	strb	r3, [r7, #6]
 8004090:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004094:	2b00      	cmp	r3, #0
 8004096:	daf0      	bge.n	800407a <OLED_Clear+0x12>
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	3301      	adds	r3, #1
 800409c:	71fb      	strb	r3, [r7, #7]
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	2b07      	cmp	r3, #7
 80040a2:	d9e7      	bls.n	8004074 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80040a4:	f7ff ff5e 	bl	8003f64 <OLED_Refresh_Gram>
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	200005bc 	.word	0x200005bc

080040b4 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	71fb      	strb	r3, [r7, #7]
 80040be:	460b      	mov	r3, r1
 80040c0:	71bb      	strb	r3, [r7, #6]
 80040c2:	4613      	mov	r3, r2
 80040c4:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	db41      	blt.n	8004156 <OLED_DrawPoint+0xa2>
 80040d2:	79bb      	ldrb	r3, [r7, #6]
 80040d4:	2b3f      	cmp	r3, #63	; 0x3f
 80040d6:	d83e      	bhi.n	8004156 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80040d8:	79bb      	ldrb	r3, [r7, #6]
 80040da:	08db      	lsrs	r3, r3, #3
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	f1c3 0307 	rsb	r3, r3, #7
 80040e2:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80040e4:	79bb      	ldrb	r3, [r7, #6]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80040ec:	7b7b      	ldrb	r3, [r7, #13]
 80040ee:	f1c3 0307 	rsb	r3, r3, #7
 80040f2:	2201      	movs	r2, #1
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80040fa:	797b      	ldrb	r3, [r7, #5]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d012      	beq.n	8004126 <OLED_DrawPoint+0x72>
 8004100:	79fa      	ldrb	r2, [r7, #7]
 8004102:	7bbb      	ldrb	r3, [r7, #14]
 8004104:	4917      	ldr	r1, [pc, #92]	; (8004164 <OLED_DrawPoint+0xb0>)
 8004106:	00d2      	lsls	r2, r2, #3
 8004108:	440a      	add	r2, r1
 800410a:	4413      	add	r3, r2
 800410c:	7818      	ldrb	r0, [r3, #0]
 800410e:	79fa      	ldrb	r2, [r7, #7]
 8004110:	7bbb      	ldrb	r3, [r7, #14]
 8004112:	7bf9      	ldrb	r1, [r7, #15]
 8004114:	4301      	orrs	r1, r0
 8004116:	b2c8      	uxtb	r0, r1
 8004118:	4912      	ldr	r1, [pc, #72]	; (8004164 <OLED_DrawPoint+0xb0>)
 800411a:	00d2      	lsls	r2, r2, #3
 800411c:	440a      	add	r2, r1
 800411e:	4413      	add	r3, r2
 8004120:	4602      	mov	r2, r0
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	e018      	b.n	8004158 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8004126:	79fa      	ldrb	r2, [r7, #7]
 8004128:	7bbb      	ldrb	r3, [r7, #14]
 800412a:	490e      	ldr	r1, [pc, #56]	; (8004164 <OLED_DrawPoint+0xb0>)
 800412c:	00d2      	lsls	r2, r2, #3
 800412e:	440a      	add	r2, r1
 8004130:	4413      	add	r3, r2
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	b25a      	sxtb	r2, r3
 8004136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800413a:	43db      	mvns	r3, r3
 800413c:	b25b      	sxtb	r3, r3
 800413e:	4013      	ands	r3, r2
 8004140:	b259      	sxtb	r1, r3
 8004142:	79fa      	ldrb	r2, [r7, #7]
 8004144:	7bbb      	ldrb	r3, [r7, #14]
 8004146:	b2c8      	uxtb	r0, r1
 8004148:	4906      	ldr	r1, [pc, #24]	; (8004164 <OLED_DrawPoint+0xb0>)
 800414a:	00d2      	lsls	r2, r2, #3
 800414c:	440a      	add	r2, r1
 800414e:	4413      	add	r3, r2
 8004150:	4602      	mov	r2, r0
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e000      	b.n	8004158 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8004156:	bf00      	nop
}
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	200005bc 	.word	0x200005bc

08004168 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8004168:	b590      	push	{r4, r7, lr}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	4604      	mov	r4, r0
 8004170:	4608      	mov	r0, r1
 8004172:	4611      	mov	r1, r2
 8004174:	461a      	mov	r2, r3
 8004176:	4623      	mov	r3, r4
 8004178:	71fb      	strb	r3, [r7, #7]
 800417a:	4603      	mov	r3, r0
 800417c:	71bb      	strb	r3, [r7, #6]
 800417e:	460b      	mov	r3, r1
 8004180:	717b      	strb	r3, [r7, #5]
 8004182:	4613      	mov	r3, r2
 8004184:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8004186:	79bb      	ldrb	r3, [r7, #6]
 8004188:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800418a:	797b      	ldrb	r3, [r7, #5]
 800418c:	3b20      	subs	r3, #32
 800418e:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8004190:	2300      	movs	r3, #0
 8004192:	73bb      	strb	r3, [r7, #14]
 8004194:	e04d      	b.n	8004232 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8004196:	793b      	ldrb	r3, [r7, #4]
 8004198:	2b0c      	cmp	r3, #12
 800419a:	d10b      	bne.n	80041b4 <OLED_ShowChar+0x4c>
 800419c:	797a      	ldrb	r2, [r7, #5]
 800419e:	7bb9      	ldrb	r1, [r7, #14]
 80041a0:	4828      	ldr	r0, [pc, #160]	; (8004244 <OLED_ShowChar+0xdc>)
 80041a2:	4613      	mov	r3, r2
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4403      	add	r3, r0
 80041ac:	440b      	add	r3, r1
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	73fb      	strb	r3, [r7, #15]
 80041b2:	e007      	b.n	80041c4 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80041b4:	797a      	ldrb	r2, [r7, #5]
 80041b6:	7bbb      	ldrb	r3, [r7, #14]
 80041b8:	4923      	ldr	r1, [pc, #140]	; (8004248 <OLED_ShowChar+0xe0>)
 80041ba:	0112      	lsls	r2, r2, #4
 80041bc:	440a      	add	r2, r1
 80041be:	4413      	add	r3, r2
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80041c4:	2300      	movs	r3, #0
 80041c6:	737b      	strb	r3, [r7, #13]
 80041c8:	e02d      	b.n	8004226 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80041ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	da07      	bge.n	80041e2 <OLED_ShowChar+0x7a>
 80041d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80041d6:	79b9      	ldrb	r1, [r7, #6]
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff ff6a 	bl	80040b4 <OLED_DrawPoint>
 80041e0:	e00c      	b.n	80041fc <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80041e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	bf0c      	ite	eq
 80041ea:	2301      	moveq	r3, #1
 80041ec:	2300      	movne	r3, #0
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	79b9      	ldrb	r1, [r7, #6]
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff ff5c 	bl	80040b4 <OLED_DrawPoint>
			temp<<=1;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
			y++;
 8004202:	79bb      	ldrb	r3, [r7, #6]
 8004204:	3301      	adds	r3, #1
 8004206:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8004208:	79ba      	ldrb	r2, [r7, #6]
 800420a:	7b3b      	ldrb	r3, [r7, #12]
 800420c:	1ad2      	subs	r2, r2, r3
 800420e:	793b      	ldrb	r3, [r7, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	d105      	bne.n	8004220 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8004214:	7b3b      	ldrb	r3, [r7, #12]
 8004216:	71bb      	strb	r3, [r7, #6]
				x++;
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	3301      	adds	r3, #1
 800421c:	71fb      	strb	r3, [r7, #7]
				break;
 800421e:	e005      	b.n	800422c <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8004220:	7b7b      	ldrb	r3, [r7, #13]
 8004222:	3301      	adds	r3, #1
 8004224:	737b      	strb	r3, [r7, #13]
 8004226:	7b7b      	ldrb	r3, [r7, #13]
 8004228:	2b07      	cmp	r3, #7
 800422a:	d9ce      	bls.n	80041ca <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800422c:	7bbb      	ldrb	r3, [r7, #14]
 800422e:	3301      	adds	r3, #1
 8004230:	73bb      	strb	r3, [r7, #14]
 8004232:	7bba      	ldrb	r2, [r7, #14]
 8004234:	793b      	ldrb	r3, [r7, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d3ad      	bcc.n	8004196 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800423a:	bf00      	nop
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	bd90      	pop	{r4, r7, pc}
 8004244:	0800ea0c 	.word	0x0800ea0c
 8004248:	0800ee80 	.word	0x0800ee80

0800424c <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af02      	add	r7, sp, #8
 8004252:	4603      	mov	r3, r0
 8004254:	603a      	str	r2, [r7, #0]
 8004256:	71fb      	strb	r3, [r7, #7]
 8004258:	460b      	mov	r3, r1
 800425a:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800425c:	e01f      	b.n	800429e <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	2b7a      	cmp	r3, #122	; 0x7a
 8004262:	d904      	bls.n	800426e <OLED_ShowString+0x22>
 8004264:	2300      	movs	r3, #0
 8004266:	71fb      	strb	r3, [r7, #7]
 8004268:	79bb      	ldrb	r3, [r7, #6]
 800426a:	3310      	adds	r3, #16
 800426c:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800426e:	79bb      	ldrb	r3, [r7, #6]
 8004270:	2b3a      	cmp	r3, #58	; 0x3a
 8004272:	d905      	bls.n	8004280 <OLED_ShowString+0x34>
 8004274:	2300      	movs	r3, #0
 8004276:	71fb      	strb	r3, [r7, #7]
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	71bb      	strb	r3, [r7, #6]
 800427c:	f7ff fef4 	bl	8004068 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	79b9      	ldrb	r1, [r7, #6]
 8004286:	79f8      	ldrb	r0, [r7, #7]
 8004288:	2301      	movs	r3, #1
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	230c      	movs	r3, #12
 800428e:	f7ff ff6b 	bl	8004168 <OLED_ShowChar>
        x+=8;
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	3308      	adds	r3, #8
 8004296:	71fb      	strb	r3, [r7, #7]
        p++;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	3301      	adds	r3, #1
 800429c:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1db      	bne.n	800425e <OLED_ShowString+0x12>
    }  
}	 
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <OLED_Init>:

void OLED_Init(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80042b4:	f001 fc28 	bl	8005b08 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80042b8:	4b41      	ldr	r3, [pc, #260]	; (80043c0 <OLED_Init+0x110>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042bc:	4a40      	ldr	r2, [pc, #256]	; (80043c0 <OLED_Init+0x110>)
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	6713      	str	r3, [r2, #112]	; 0x70
 80042c4:	4b3e      	ldr	r3, [pc, #248]	; (80043c0 <OLED_Init+0x110>)
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	4a3d      	ldr	r2, [pc, #244]	; (80043c0 <OLED_Init+0x110>)
 80042ca:	f023 0304 	bic.w	r3, r3, #4
 80042ce:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80042d0:	f001 fc2e 	bl	8005b30 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80042d4:	2200      	movs	r2, #0
 80042d6:	2180      	movs	r1, #128	; 0x80
 80042d8:	483a      	ldr	r0, [pc, #232]	; (80043c4 <OLED_Init+0x114>)
 80042da:	f000 fc4b 	bl	8004b74 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80042de:	2064      	movs	r0, #100	; 0x64
 80042e0:	f000 f8e4 	bl	80044ac <HAL_Delay>
	OLED_RST_Set();
 80042e4:	2201      	movs	r2, #1
 80042e6:	2180      	movs	r1, #128	; 0x80
 80042e8:	4836      	ldr	r0, [pc, #216]	; (80043c4 <OLED_Init+0x114>)
 80042ea:	f000 fc43 	bl	8004b74 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80042ee:	2100      	movs	r1, #0
 80042f0:	20ae      	movs	r0, #174	; 0xae
 80042f2:	f7ff fe6f 	bl	8003fd4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80042f6:	2100      	movs	r1, #0
 80042f8:	20d5      	movs	r0, #213	; 0xd5
 80042fa:	f7ff fe6b 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80042fe:	2100      	movs	r1, #0
 8004300:	2050      	movs	r0, #80	; 0x50
 8004302:	f7ff fe67 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8004306:	2100      	movs	r1, #0
 8004308:	20a8      	movs	r0, #168	; 0xa8
 800430a:	f7ff fe63 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800430e:	2100      	movs	r1, #0
 8004310:	203f      	movs	r0, #63	; 0x3f
 8004312:	f7ff fe5f 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8004316:	2100      	movs	r1, #0
 8004318:	20d3      	movs	r0, #211	; 0xd3
 800431a:	f7ff fe5b 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800431e:	2100      	movs	r1, #0
 8004320:	2000      	movs	r0, #0
 8004322:	f7ff fe57 	bl	8003fd4 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8004326:	2100      	movs	r1, #0
 8004328:	2040      	movs	r0, #64	; 0x40
 800432a:	f7ff fe53 	bl	8003fd4 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800432e:	2100      	movs	r1, #0
 8004330:	208d      	movs	r0, #141	; 0x8d
 8004332:	f7ff fe4f 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8004336:	2100      	movs	r1, #0
 8004338:	2014      	movs	r0, #20
 800433a:	f7ff fe4b 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800433e:	2100      	movs	r1, #0
 8004340:	2020      	movs	r0, #32
 8004342:	f7ff fe47 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8004346:	2100      	movs	r1, #0
 8004348:	2002      	movs	r0, #2
 800434a:	f7ff fe43 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800434e:	2100      	movs	r1, #0
 8004350:	20a1      	movs	r0, #161	; 0xa1
 8004352:	f7ff fe3f 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8004356:	2100      	movs	r1, #0
 8004358:	20c0      	movs	r0, #192	; 0xc0
 800435a:	f7ff fe3b 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800435e:	2100      	movs	r1, #0
 8004360:	20da      	movs	r0, #218	; 0xda
 8004362:	f7ff fe37 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8004366:	2100      	movs	r1, #0
 8004368:	2012      	movs	r0, #18
 800436a:	f7ff fe33 	bl	8003fd4 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800436e:	2100      	movs	r1, #0
 8004370:	2081      	movs	r0, #129	; 0x81
 8004372:	f7ff fe2f 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8004376:	2100      	movs	r1, #0
 8004378:	20ef      	movs	r0, #239	; 0xef
 800437a:	f7ff fe2b 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800437e:	2100      	movs	r1, #0
 8004380:	20d9      	movs	r0, #217	; 0xd9
 8004382:	f7ff fe27 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8004386:	2100      	movs	r1, #0
 8004388:	20f1      	movs	r0, #241	; 0xf1
 800438a:	f7ff fe23 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800438e:	2100      	movs	r1, #0
 8004390:	20db      	movs	r0, #219	; 0xdb
 8004392:	f7ff fe1f 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8004396:	2100      	movs	r1, #0
 8004398:	2030      	movs	r0, #48	; 0x30
 800439a:	f7ff fe1b 	bl	8003fd4 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800439e:	2100      	movs	r1, #0
 80043a0:	20a4      	movs	r0, #164	; 0xa4
 80043a2:	f7ff fe17 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80043a6:	2100      	movs	r1, #0
 80043a8:	20a6      	movs	r0, #166	; 0xa6
 80043aa:	f7ff fe13 	bl	8003fd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80043ae:	2100      	movs	r1, #0
 80043b0:	20af      	movs	r0, #175	; 0xaf
 80043b2:	f7ff fe0f 	bl	8003fd4 <OLED_WR_Byte>
	OLED_Clear(); 
 80043b6:	f7ff fe57 	bl	8004068 <OLED_Clear>
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40021000 	.word	0x40021000

080043c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043cc:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <HAL_Init+0x40>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a0d      	ldr	r2, [pc, #52]	; (8004408 <HAL_Init+0x40>)
 80043d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_Init+0x40>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <HAL_Init+0x40>)
 80043de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043e4:	4b08      	ldr	r3, [pc, #32]	; (8004408 <HAL_Init+0x40>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a07      	ldr	r2, [pc, #28]	; (8004408 <HAL_Init+0x40>)
 80043ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043f0:	2003      	movs	r0, #3
 80043f2:	f000 f94f 	bl	8004694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043f6:	200f      	movs	r0, #15
 80043f8:	f000 f808 	bl	800440c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043fc:	f7ff f9ee 	bl	80037dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40023c00 	.word	0x40023c00

0800440c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004414:	4b12      	ldr	r3, [pc, #72]	; (8004460 <HAL_InitTick+0x54>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4b12      	ldr	r3, [pc, #72]	; (8004464 <HAL_InitTick+0x58>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	4619      	mov	r1, r3
 800441e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004422:	fbb3 f3f1 	udiv	r3, r3, r1
 8004426:	fbb2 f3f3 	udiv	r3, r2, r3
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f967 	bl	80046fe <HAL_SYSTICK_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e00e      	b.n	8004458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b0f      	cmp	r3, #15
 800443e:	d80a      	bhi.n	8004456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004440:	2200      	movs	r2, #0
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	f04f 30ff 	mov.w	r0, #4294967295
 8004448:	f000 f92f 	bl	80046aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800444c:	4a06      	ldr	r2, [pc, #24]	; (8004468 <HAL_InitTick+0x5c>)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e000      	b.n	8004458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000014 	.word	0x20000014
 8004464:	2000001c 	.word	0x2000001c
 8004468:	20000018 	.word	0x20000018

0800446c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <HAL_IncTick+0x20>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <HAL_IncTick+0x24>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4413      	add	r3, r2
 800447c:	4a04      	ldr	r2, [pc, #16]	; (8004490 <HAL_IncTick+0x24>)
 800447e:	6013      	str	r3, [r2, #0]
}
 8004480:	bf00      	nop
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	2000001c 	.word	0x2000001c
 8004490:	200009bc 	.word	0x200009bc

08004494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return uwTick;
 8004498:	4b03      	ldr	r3, [pc, #12]	; (80044a8 <HAL_GetTick+0x14>)
 800449a:	681b      	ldr	r3, [r3, #0]
}
 800449c:	4618      	mov	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	200009bc 	.word	0x200009bc

080044ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044b4:	f7ff ffee 	bl	8004494 <HAL_GetTick>
 80044b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d005      	beq.n	80044d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044c6:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <HAL_Delay+0x44>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044d2:	bf00      	nop
 80044d4:	f7ff ffde 	bl	8004494 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d8f7      	bhi.n	80044d4 <HAL_Delay+0x28>
  {
  }
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	2000001c 	.word	0x2000001c

080044f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004504:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004510:	4013      	ands	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800451c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004526:	4a04      	ldr	r2, [pc, #16]	; (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	60d3      	str	r3, [r2, #12]
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <__NVIC_GetPriorityGrouping+0x18>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	f003 0307 	and.w	r3, r3, #7
}
 800454a:	4618      	mov	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004566:	2b00      	cmp	r3, #0
 8004568:	db0b      	blt.n	8004582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	f003 021f 	and.w	r2, r3, #31
 8004570:	4907      	ldr	r1, [pc, #28]	; (8004590 <__NVIC_EnableIRQ+0x38>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2001      	movs	r0, #1
 800457a:	fa00 f202 	lsl.w	r2, r0, r2
 800457e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	e000e100 	.word	0xe000e100

08004594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	6039      	str	r1, [r7, #0]
 800459e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	db0a      	blt.n	80045be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	490c      	ldr	r1, [pc, #48]	; (80045e0 <__NVIC_SetPriority+0x4c>)
 80045ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b2:	0112      	lsls	r2, r2, #4
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	440b      	add	r3, r1
 80045b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045bc:	e00a      	b.n	80045d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	4908      	ldr	r1, [pc, #32]	; (80045e4 <__NVIC_SetPriority+0x50>)
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	3b04      	subs	r3, #4
 80045cc:	0112      	lsls	r2, r2, #4
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	440b      	add	r3, r1
 80045d2:	761a      	strb	r2, [r3, #24]
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000e100 	.word	0xe000e100
 80045e4:	e000ed00 	.word	0xe000ed00

080045e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b089      	sub	sp, #36	; 0x24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f1c3 0307 	rsb	r3, r3, #7
 8004602:	2b04      	cmp	r3, #4
 8004604:	bf28      	it	cs
 8004606:	2304      	movcs	r3, #4
 8004608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3304      	adds	r3, #4
 800460e:	2b06      	cmp	r3, #6
 8004610:	d902      	bls.n	8004618 <NVIC_EncodePriority+0x30>
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3b03      	subs	r3, #3
 8004616:	e000      	b.n	800461a <NVIC_EncodePriority+0x32>
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800461c:	f04f 32ff 	mov.w	r2, #4294967295
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43da      	mvns	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	401a      	ands	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004630:	f04f 31ff 	mov.w	r1, #4294967295
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	fa01 f303 	lsl.w	r3, r1, r3
 800463a:	43d9      	mvns	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004640:	4313      	orrs	r3, r2
         );
}
 8004642:	4618      	mov	r0, r3
 8004644:	3724      	adds	r7, #36	; 0x24
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3b01      	subs	r3, #1
 800465c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004660:	d301      	bcc.n	8004666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004662:	2301      	movs	r3, #1
 8004664:	e00f      	b.n	8004686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004666:	4a0a      	ldr	r2, [pc, #40]	; (8004690 <SysTick_Config+0x40>)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3b01      	subs	r3, #1
 800466c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800466e:	210f      	movs	r1, #15
 8004670:	f04f 30ff 	mov.w	r0, #4294967295
 8004674:	f7ff ff8e 	bl	8004594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <SysTick_Config+0x40>)
 800467a:	2200      	movs	r2, #0
 800467c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800467e:	4b04      	ldr	r3, [pc, #16]	; (8004690 <SysTick_Config+0x40>)
 8004680:	2207      	movs	r2, #7
 8004682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	e000e010 	.word	0xe000e010

08004694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ff29 	bl	80044f4 <__NVIC_SetPriorityGrouping>
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b086      	sub	sp, #24
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	4603      	mov	r3, r0
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046bc:	f7ff ff3e 	bl	800453c <__NVIC_GetPriorityGrouping>
 80046c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	6978      	ldr	r0, [r7, #20]
 80046c8:	f7ff ff8e 	bl	80045e8 <NVIC_EncodePriority>
 80046cc:	4602      	mov	r2, r0
 80046ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ff5d 	bl	8004594 <__NVIC_SetPriority>
}
 80046da:	bf00      	nop
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	4603      	mov	r3, r0
 80046ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff31 	bl	8004558 <__NVIC_EnableIRQ>
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff ffa2 	bl	8004650 <SysTick_Config>
 800470c:	4603      	mov	r3, r0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004722:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004724:	f7ff feb6 	bl	8004494 <HAL_GetTick>
 8004728:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d008      	beq.n	8004748 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2280      	movs	r2, #128	; 0x80
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e052      	b.n	80047ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0216 	bic.w	r2, r2, #22
 8004756:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695a      	ldr	r2, [r3, #20]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004766:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d103      	bne.n	8004778 <HAL_DMA_Abort+0x62>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004774:	2b00      	cmp	r3, #0
 8004776:	d007      	beq.n	8004788 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0208 	bic.w	r2, r2, #8
 8004786:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004798:	e013      	b.n	80047c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800479a:	f7ff fe7b 	bl	8004494 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d90c      	bls.n	80047c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2203      	movs	r2, #3
 80047b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e015      	b.n	80047ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e4      	bne.n	800479a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d4:	223f      	movs	r2, #63	; 0x3f
 80047d6:	409a      	lsls	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d004      	beq.n	8004814 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2280      	movs	r2, #128	; 0x80
 800480e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e00c      	b.n	800482e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2205      	movs	r2, #5
 8004818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0201 	bic.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800483c:	b480      	push	{r7}
 800483e:	b089      	sub	sp, #36	; 0x24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800484a:	2300      	movs	r3, #0
 800484c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800484e:	2300      	movs	r3, #0
 8004850:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	e16b      	b.n	8004b30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004858:	2201      	movs	r2, #1
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4013      	ands	r3, r2
 800486a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	429a      	cmp	r2, r3
 8004872:	f040 815a 	bne.w	8004b2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b01      	cmp	r3, #1
 8004880:	d005      	beq.n	800488e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800488a:	2b02      	cmp	r3, #2
 800488c:	d130      	bne.n	80048f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	2203      	movs	r2, #3
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	43db      	mvns	r3, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4013      	ands	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048c4:	2201      	movs	r2, #1
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	091b      	lsrs	r3, r3, #4
 80048da:	f003 0201 	and.w	r2, r3, #1
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d017      	beq.n	800492c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	2203      	movs	r2, #3
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	43db      	mvns	r3, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4013      	ands	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4313      	orrs	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d123      	bne.n	8004980 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	08da      	lsrs	r2, r3, #3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3208      	adds	r2, #8
 8004940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004944:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	220f      	movs	r2, #15
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4013      	ands	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	08da      	lsrs	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3208      	adds	r2, #8
 800497a:	69b9      	ldr	r1, [r7, #24]
 800497c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	2203      	movs	r2, #3
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4013      	ands	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 0203 	and.w	r2, r3, #3
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80b4 	beq.w	8004b2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	4b60      	ldr	r3, [pc, #384]	; (8004b48 <HAL_GPIO_Init+0x30c>)
 80049c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ca:	4a5f      	ldr	r2, [pc, #380]	; (8004b48 <HAL_GPIO_Init+0x30c>)
 80049cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049d0:	6453      	str	r3, [r2, #68]	; 0x44
 80049d2:	4b5d      	ldr	r3, [pc, #372]	; (8004b48 <HAL_GPIO_Init+0x30c>)
 80049d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049de:	4a5b      	ldr	r2, [pc, #364]	; (8004b4c <HAL_GPIO_Init+0x310>)
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	089b      	lsrs	r3, r3, #2
 80049e4:	3302      	adds	r3, #2
 80049e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	220f      	movs	r2, #15
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	43db      	mvns	r3, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4013      	ands	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a52      	ldr	r2, [pc, #328]	; (8004b50 <HAL_GPIO_Init+0x314>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d02b      	beq.n	8004a62 <HAL_GPIO_Init+0x226>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a51      	ldr	r2, [pc, #324]	; (8004b54 <HAL_GPIO_Init+0x318>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d025      	beq.n	8004a5e <HAL_GPIO_Init+0x222>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a50      	ldr	r2, [pc, #320]	; (8004b58 <HAL_GPIO_Init+0x31c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01f      	beq.n	8004a5a <HAL_GPIO_Init+0x21e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a4f      	ldr	r2, [pc, #316]	; (8004b5c <HAL_GPIO_Init+0x320>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d019      	beq.n	8004a56 <HAL_GPIO_Init+0x21a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a4e      	ldr	r2, [pc, #312]	; (8004b60 <HAL_GPIO_Init+0x324>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d013      	beq.n	8004a52 <HAL_GPIO_Init+0x216>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a4d      	ldr	r2, [pc, #308]	; (8004b64 <HAL_GPIO_Init+0x328>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00d      	beq.n	8004a4e <HAL_GPIO_Init+0x212>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a4c      	ldr	r2, [pc, #304]	; (8004b68 <HAL_GPIO_Init+0x32c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d007      	beq.n	8004a4a <HAL_GPIO_Init+0x20e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a4b      	ldr	r2, [pc, #300]	; (8004b6c <HAL_GPIO_Init+0x330>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d101      	bne.n	8004a46 <HAL_GPIO_Init+0x20a>
 8004a42:	2307      	movs	r3, #7
 8004a44:	e00e      	b.n	8004a64 <HAL_GPIO_Init+0x228>
 8004a46:	2308      	movs	r3, #8
 8004a48:	e00c      	b.n	8004a64 <HAL_GPIO_Init+0x228>
 8004a4a:	2306      	movs	r3, #6
 8004a4c:	e00a      	b.n	8004a64 <HAL_GPIO_Init+0x228>
 8004a4e:	2305      	movs	r3, #5
 8004a50:	e008      	b.n	8004a64 <HAL_GPIO_Init+0x228>
 8004a52:	2304      	movs	r3, #4
 8004a54:	e006      	b.n	8004a64 <HAL_GPIO_Init+0x228>
 8004a56:	2303      	movs	r3, #3
 8004a58:	e004      	b.n	8004a64 <HAL_GPIO_Init+0x228>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e002      	b.n	8004a64 <HAL_GPIO_Init+0x228>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <HAL_GPIO_Init+0x228>
 8004a62:	2300      	movs	r3, #0
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	f002 0203 	and.w	r2, r2, #3
 8004a6a:	0092      	lsls	r2, r2, #2
 8004a6c:	4093      	lsls	r3, r2
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a74:	4935      	ldr	r1, [pc, #212]	; (8004b4c <HAL_GPIO_Init+0x310>)
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	089b      	lsrs	r3, r3, #2
 8004a7a:	3302      	adds	r3, #2
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a82:	4b3b      	ldr	r3, [pc, #236]	; (8004b70 <HAL_GPIO_Init+0x334>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004aa6:	4a32      	ldr	r2, [pc, #200]	; (8004b70 <HAL_GPIO_Init+0x334>)
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004aac:	4b30      	ldr	r3, [pc, #192]	; (8004b70 <HAL_GPIO_Init+0x334>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ad0:	4a27      	ldr	r2, [pc, #156]	; (8004b70 <HAL_GPIO_Init+0x334>)
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ad6:	4b26      	ldr	r3, [pc, #152]	; (8004b70 <HAL_GPIO_Init+0x334>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004afa:	4a1d      	ldr	r2, [pc, #116]	; (8004b70 <HAL_GPIO_Init+0x334>)
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b00:	4b1b      	ldr	r3, [pc, #108]	; (8004b70 <HAL_GPIO_Init+0x334>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b24:	4a12      	ldr	r2, [pc, #72]	; (8004b70 <HAL_GPIO_Init+0x334>)
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	61fb      	str	r3, [r7, #28]
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	2b0f      	cmp	r3, #15
 8004b34:	f67f ae90 	bls.w	8004858 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	3724      	adds	r7, #36	; 0x24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	40013800 	.word	0x40013800
 8004b50:	40020000 	.word	0x40020000
 8004b54:	40020400 	.word	0x40020400
 8004b58:	40020800 	.word	0x40020800
 8004b5c:	40020c00 	.word	0x40020c00
 8004b60:	40021000 	.word	0x40021000
 8004b64:	40021400 	.word	0x40021400
 8004b68:	40021800 	.word	0x40021800
 8004b6c:	40021c00 	.word	0x40021c00
 8004b70:	40013c00 	.word	0x40013c00

08004b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	807b      	strh	r3, [r7, #2]
 8004b80:	4613      	mov	r3, r2
 8004b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b84:	787b      	ldrb	r3, [r7, #1]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b8a:	887a      	ldrh	r2, [r7, #2]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b90:	e003      	b.n	8004b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b92:	887b      	ldrh	r3, [r7, #2]
 8004b94:	041a      	lsls	r2, r3, #16
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	619a      	str	r2, [r3, #24]
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bb8:	887a      	ldrh	r2, [r7, #2]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	041a      	lsls	r2, r3, #16
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	43d9      	mvns	r1, r3
 8004bc4:	887b      	ldrh	r3, [r7, #2]
 8004bc6:	400b      	ands	r3, r1
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	619a      	str	r2, [r3, #24]
}
 8004bce:	bf00      	nop
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e12b      	b.n	8004e46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fe fe1e 	bl	8003844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2224      	movs	r2, #36	; 0x24
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0201 	bic.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c40:	f001 fbba 	bl	80063b8 <HAL_RCC_GetPCLK1Freq>
 8004c44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4a81      	ldr	r2, [pc, #516]	; (8004e50 <HAL_I2C_Init+0x274>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d807      	bhi.n	8004c60 <HAL_I2C_Init+0x84>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4a80      	ldr	r2, [pc, #512]	; (8004e54 <HAL_I2C_Init+0x278>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	bf94      	ite	ls
 8004c58:	2301      	movls	r3, #1
 8004c5a:	2300      	movhi	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	e006      	b.n	8004c6e <HAL_I2C_Init+0x92>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4a7d      	ldr	r2, [pc, #500]	; (8004e58 <HAL_I2C_Init+0x27c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	bf94      	ite	ls
 8004c68:	2301      	movls	r3, #1
 8004c6a:	2300      	movhi	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e0e7      	b.n	8004e46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4a78      	ldr	r2, [pc, #480]	; (8004e5c <HAL_I2C_Init+0x280>)
 8004c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7e:	0c9b      	lsrs	r3, r3, #18
 8004c80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	4a6a      	ldr	r2, [pc, #424]	; (8004e50 <HAL_I2C_Init+0x274>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d802      	bhi.n	8004cb0 <HAL_I2C_Init+0xd4>
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	3301      	adds	r3, #1
 8004cae:	e009      	b.n	8004cc4 <HAL_I2C_Init+0xe8>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	4a69      	ldr	r2, [pc, #420]	; (8004e60 <HAL_I2C_Init+0x284>)
 8004cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc0:	099b      	lsrs	r3, r3, #6
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004cd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	495c      	ldr	r1, [pc, #368]	; (8004e50 <HAL_I2C_Init+0x274>)
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	d819      	bhi.n	8004d18 <HAL_I2C_Init+0x13c>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1e59      	subs	r1, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cf2:	1c59      	adds	r1, r3, #1
 8004cf4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004cf8:	400b      	ands	r3, r1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_I2C_Init+0x138>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1e59      	subs	r1, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d12:	e051      	b.n	8004db8 <HAL_I2C_Init+0x1dc>
 8004d14:	2304      	movs	r3, #4
 8004d16:	e04f      	b.n	8004db8 <HAL_I2C_Init+0x1dc>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d111      	bne.n	8004d44 <HAL_I2C_Init+0x168>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	1e58      	subs	r0, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6859      	ldr	r1, [r3, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	440b      	add	r3, r1
 8004d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d32:	3301      	adds	r3, #1
 8004d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf0c      	ite	eq
 8004d3c:	2301      	moveq	r3, #1
 8004d3e:	2300      	movne	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	e012      	b.n	8004d6a <HAL_I2C_Init+0x18e>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	1e58      	subs	r0, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6859      	ldr	r1, [r3, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	0099      	lsls	r1, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bf0c      	ite	eq
 8004d64:	2301      	moveq	r3, #1
 8004d66:	2300      	movne	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_I2C_Init+0x196>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e022      	b.n	8004db8 <HAL_I2C_Init+0x1dc>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10e      	bne.n	8004d98 <HAL_I2C_Init+0x1bc>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1e58      	subs	r0, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6859      	ldr	r1, [r3, #4]
 8004d82:	460b      	mov	r3, r1
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	440b      	add	r3, r1
 8004d88:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d96:	e00f      	b.n	8004db8 <HAL_I2C_Init+0x1dc>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	1e58      	subs	r0, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6859      	ldr	r1, [r3, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	0099      	lsls	r1, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dae:	3301      	adds	r3, #1
 8004db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	6809      	ldr	r1, [r1, #0]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69da      	ldr	r2, [r3, #28]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004de6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6911      	ldr	r1, [r2, #16]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68d2      	ldr	r2, [r2, #12]
 8004df2:	4311      	orrs	r1, r2
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695a      	ldr	r2, [r3, #20]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	000186a0 	.word	0x000186a0
 8004e54:	001e847f 	.word	0x001e847f
 8004e58:	003d08ff 	.word	0x003d08ff
 8004e5c:	431bde83 	.word	0x431bde83
 8004e60:	10624dd3 	.word	0x10624dd3

08004e64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	607a      	str	r2, [r7, #4]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	460b      	mov	r3, r1
 8004e72:	817b      	strh	r3, [r7, #10]
 8004e74:	4613      	mov	r3, r2
 8004e76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e78:	f7ff fb0c 	bl	8004494 <HAL_GetTick>
 8004e7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	f040 80e0 	bne.w	800504c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	2319      	movs	r3, #25
 8004e92:	2201      	movs	r2, #1
 8004e94:	4970      	ldr	r1, [pc, #448]	; (8005058 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 fc58 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e0d3      	b.n	800504e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d101      	bne.n	8004eb4 <HAL_I2C_Master_Transmit+0x50>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e0cc      	b.n	800504e <HAL_I2C_Master_Transmit+0x1ea>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d007      	beq.n	8004eda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f042 0201 	orr.w	r2, r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ee8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2221      	movs	r2, #33	; 0x21
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2210      	movs	r2, #16
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	893a      	ldrh	r2, [r7, #8]
 8004f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a50      	ldr	r2, [pc, #320]	; (800505c <HAL_I2C_Master_Transmit+0x1f8>)
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f1c:	8979      	ldrh	r1, [r7, #10]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	6a3a      	ldr	r2, [r7, #32]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fac2 	bl	80054ac <I2C_MasterRequestWrite>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e08d      	b.n	800504e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004f48:	e066      	b.n	8005018 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	6a39      	ldr	r1, [r7, #32]
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 fcd2 	bl	80058f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00d      	beq.n	8004f76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d107      	bne.n	8004f72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e06b      	b.n	800504e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	781a      	ldrb	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d11b      	bne.n	8004fec <HAL_I2C_Master_Transmit+0x188>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d017      	beq.n	8004fec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	781a      	ldrb	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	6a39      	ldr	r1, [r7, #32]
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 fcc2 	bl	800597a <I2C_WaitOnBTFFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00d      	beq.n	8005018 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	2b04      	cmp	r3, #4
 8005002:	d107      	bne.n	8005014 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005012:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e01a      	b.n	800504e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501c:	2b00      	cmp	r3, #0
 800501e:	d194      	bne.n	8004f4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800502e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	e000      	b.n	800504e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800504c:	2302      	movs	r3, #2
  }
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	00100002 	.word	0x00100002
 800505c:	ffff0000 	.word	0xffff0000

08005060 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08c      	sub	sp, #48	; 0x30
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	607a      	str	r2, [r7, #4]
 800506a:	461a      	mov	r2, r3
 800506c:	460b      	mov	r3, r1
 800506e:	817b      	strh	r3, [r7, #10]
 8005070:	4613      	mov	r3, r2
 8005072:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005074:	f7ff fa0e 	bl	8004494 <HAL_GetTick>
 8005078:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b20      	cmp	r3, #32
 8005084:	f040 820b 	bne.w	800549e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	2319      	movs	r3, #25
 800508e:	2201      	movs	r2, #1
 8005090:	497c      	ldr	r1, [pc, #496]	; (8005284 <HAL_I2C_Master_Receive+0x224>)
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 fb5a 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800509e:	2302      	movs	r3, #2
 80050a0:	e1fe      	b.n	80054a0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_I2C_Master_Receive+0x50>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e1f7      	b.n	80054a0 <HAL_I2C_Master_Receive+0x440>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d007      	beq.n	80050d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0201 	orr.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2222      	movs	r2, #34	; 0x22
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2210      	movs	r2, #16
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	893a      	ldrh	r2, [r7, #8]
 8005106:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4a5c      	ldr	r2, [pc, #368]	; (8005288 <HAL_I2C_Master_Receive+0x228>)
 8005116:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005118:	8979      	ldrh	r1, [r7, #10]
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fa46 	bl	80055b0 <I2C_MasterRequestRead>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e1b8      	b.n	80054a0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005132:	2b00      	cmp	r3, #0
 8005134:	d113      	bne.n	800515e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005136:	2300      	movs	r3, #0
 8005138:	623b      	str	r3, [r7, #32]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	623b      	str	r3, [r7, #32]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	623b      	str	r3, [r7, #32]
 800514a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	e18c      	b.n	8005478 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005162:	2b01      	cmp	r3, #1
 8005164:	d11b      	bne.n	800519e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005174:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005176:	2300      	movs	r3, #0
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	61fb      	str	r3, [r7, #28]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	61fb      	str	r3, [r7, #28]
 800518a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e16c      	b.n	8005478 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d11b      	bne.n	80051de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c6:	2300      	movs	r3, #0
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	61bb      	str	r3, [r7, #24]
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	e14c      	b.n	8005478 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005204:	e138      	b.n	8005478 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	2b03      	cmp	r3, #3
 800520c:	f200 80f1 	bhi.w	80053f2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005214:	2b01      	cmp	r3, #1
 8005216:	d123      	bne.n	8005260 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 fbed 	bl	80059fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e139      	b.n	80054a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691a      	ldr	r2, [r3, #16]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800525e:	e10b      	b.n	8005478 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005264:	2b02      	cmp	r3, #2
 8005266:	d14e      	bne.n	8005306 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	2200      	movs	r2, #0
 8005270:	4906      	ldr	r1, [pc, #24]	; (800528c <HAL_I2C_Master_Receive+0x22c>)
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fa6a 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d008      	beq.n	8005290 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e10e      	b.n	80054a0 <HAL_I2C_Master_Receive+0x440>
 8005282:	bf00      	nop
 8005284:	00100002 	.word	0x00100002
 8005288:	ffff0000 	.word	0xffff0000
 800528c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691a      	ldr	r2, [r3, #16]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005304:	e0b8      	b.n	8005478 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530c:	2200      	movs	r2, #0
 800530e:	4966      	ldr	r1, [pc, #408]	; (80054a8 <HAL_I2C_Master_Receive+0x448>)
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 fa1b 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e0bf      	b.n	80054a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	2200      	movs	r2, #0
 800536a:	494f      	ldr	r1, [pc, #316]	; (80054a8 <HAL_I2C_Master_Receive+0x448>)
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f9ed 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e091      	b.n	80054a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800538a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691a      	ldr	r2, [r3, #16]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691a      	ldr	r2, [r3, #16]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053f0:	e042      	b.n	8005478 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 fb00 	bl	80059fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e04c      	b.n	80054a0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542e:	b29b      	uxth	r3, r3
 8005430:	3b01      	subs	r3, #1
 8005432:	b29a      	uxth	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b04      	cmp	r3, #4
 8005444:	d118      	bne.n	8005478 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547c:	2b00      	cmp	r3, #0
 800547e:	f47f aec2 	bne.w	8005206 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	e000      	b.n	80054a0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800549e:	2302      	movs	r3, #2
  }
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3728      	adds	r7, #40	; 0x28
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	00010004 	.word	0x00010004

080054ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	607a      	str	r2, [r7, #4]
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	460b      	mov	r3, r1
 80054ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d006      	beq.n	80054d6 <I2C_MasterRequestWrite+0x2a>
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d003      	beq.n	80054d6 <I2C_MasterRequestWrite+0x2a>
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054d4:	d108      	bne.n	80054e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	e00b      	b.n	8005500 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ec:	2b12      	cmp	r3, #18
 80054ee:	d107      	bne.n	8005500 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f91d 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00d      	beq.n	8005534 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005526:	d103      	bne.n	8005530 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800552e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e035      	b.n	80055a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800553c:	d108      	bne.n	8005550 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800553e:	897b      	ldrh	r3, [r7, #10]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800554c:	611a      	str	r2, [r3, #16]
 800554e:	e01b      	b.n	8005588 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005550:	897b      	ldrh	r3, [r7, #10]
 8005552:	11db      	asrs	r3, r3, #7
 8005554:	b2db      	uxtb	r3, r3
 8005556:	f003 0306 	and.w	r3, r3, #6
 800555a:	b2db      	uxtb	r3, r3
 800555c:	f063 030f 	orn	r3, r3, #15
 8005560:	b2da      	uxtb	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	490e      	ldr	r1, [pc, #56]	; (80055a8 <I2C_MasterRequestWrite+0xfc>)
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 f943 	bl	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e010      	b.n	80055a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800557e:	897b      	ldrh	r3, [r7, #10]
 8005580:	b2da      	uxtb	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	4907      	ldr	r1, [pc, #28]	; (80055ac <I2C_MasterRequestWrite+0x100>)
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f933 	bl	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	00010008 	.word	0x00010008
 80055ac:	00010002 	.word	0x00010002

080055b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af02      	add	r7, sp, #8
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	607a      	str	r2, [r7, #4]
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	460b      	mov	r3, r1
 80055be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d006      	beq.n	80055ea <I2C_MasterRequestRead+0x3a>
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d003      	beq.n	80055ea <I2C_MasterRequestRead+0x3a>
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055e8:	d108      	bne.n	80055fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	e00b      	b.n	8005614 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005600:	2b11      	cmp	r3, #17
 8005602:	d107      	bne.n	8005614 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005612:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f893 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00d      	beq.n	8005648 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563a:	d103      	bne.n	8005644 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005642:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e079      	b.n	800573c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005650:	d108      	bne.n	8005664 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005652:	897b      	ldrh	r3, [r7, #10]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	f043 0301 	orr.w	r3, r3, #1
 800565a:	b2da      	uxtb	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	611a      	str	r2, [r3, #16]
 8005662:	e05f      	b.n	8005724 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005664:	897b      	ldrh	r3, [r7, #10]
 8005666:	11db      	asrs	r3, r3, #7
 8005668:	b2db      	uxtb	r3, r3
 800566a:	f003 0306 	and.w	r3, r3, #6
 800566e:	b2db      	uxtb	r3, r3
 8005670:	f063 030f 	orn	r3, r3, #15
 8005674:	b2da      	uxtb	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	4930      	ldr	r1, [pc, #192]	; (8005744 <I2C_MasterRequestRead+0x194>)
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f8b9 	bl	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e054      	b.n	800573c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005692:	897b      	ldrh	r3, [r7, #10]
 8005694:	b2da      	uxtb	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	4929      	ldr	r1, [pc, #164]	; (8005748 <I2C_MasterRequestRead+0x198>)
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f8a9 	bl	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e044      	b.n	800573c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b2:	2300      	movs	r3, #0
 80056b4:	613b      	str	r3, [r7, #16]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 f831 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00d      	beq.n	800570c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fe:	d103      	bne.n	8005708 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005706:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e017      	b.n	800573c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800570c:	897b      	ldrh	r3, [r7, #10]
 800570e:	11db      	asrs	r3, r3, #7
 8005710:	b2db      	uxtb	r3, r3
 8005712:	f003 0306 	and.w	r3, r3, #6
 8005716:	b2db      	uxtb	r3, r3
 8005718:	f063 030e 	orn	r3, r3, #14
 800571c:	b2da      	uxtb	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	4907      	ldr	r1, [pc, #28]	; (8005748 <I2C_MasterRequestRead+0x198>)
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f865 	bl	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	00010008 	.word	0x00010008
 8005748:	00010002 	.word	0x00010002

0800574c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	4613      	mov	r3, r2
 800575a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800575c:	e025      	b.n	80057aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005764:	d021      	beq.n	80057aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005766:	f7fe fe95 	bl	8004494 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d302      	bcc.n	800577c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d116      	bne.n	80057aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f043 0220 	orr.w	r2, r3, #32
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e023      	b.n	80057f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	0c1b      	lsrs	r3, r3, #16
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d10d      	bne.n	80057d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	43da      	mvns	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4013      	ands	r3, r2
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	bf0c      	ite	eq
 80057c6:	2301      	moveq	r3, #1
 80057c8:	2300      	movne	r3, #0
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	461a      	mov	r2, r3
 80057ce:	e00c      	b.n	80057ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	43da      	mvns	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4013      	ands	r3, r2
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	bf0c      	ite	eq
 80057e2:	2301      	moveq	r3, #1
 80057e4:	2300      	movne	r3, #0
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	461a      	mov	r2, r3
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d0b6      	beq.n	800575e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
 8005806:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005808:	e051      	b.n	80058ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005818:	d123      	bne.n	8005862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005828:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005832:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f043 0204 	orr.w	r2, r3, #4
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e046      	b.n	80058f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005868:	d021      	beq.n	80058ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586a:	f7fe fe13 	bl	8004494 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	429a      	cmp	r2, r3
 8005878:	d302      	bcc.n	8005880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d116      	bne.n	80058ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f043 0220 	orr.w	r2, r3, #32
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e020      	b.n	80058f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	0c1b      	lsrs	r3, r3, #16
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d10c      	bne.n	80058d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	43da      	mvns	r2, r3
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4013      	ands	r3, r2
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	bf14      	ite	ne
 80058ca:	2301      	movne	r3, #1
 80058cc:	2300      	moveq	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	e00b      	b.n	80058ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	43da      	mvns	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	4013      	ands	r3, r2
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	bf14      	ite	ne
 80058e4:	2301      	movne	r3, #1
 80058e6:	2300      	moveq	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d18d      	bne.n	800580a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005904:	e02d      	b.n	8005962 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 f8ce 	bl	8005aa8 <I2C_IsAcknowledgeFailed>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e02d      	b.n	8005972 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d021      	beq.n	8005962 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591e:	f7fe fdb9 	bl	8004494 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	429a      	cmp	r2, r3
 800592c:	d302      	bcc.n	8005934 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d116      	bne.n	8005962 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2220      	movs	r2, #32
 800593e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	f043 0220 	orr.w	r2, r3, #32
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e007      	b.n	8005972 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596c:	2b80      	cmp	r3, #128	; 0x80
 800596e:	d1ca      	bne.n	8005906 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005986:	e02d      	b.n	80059e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f88d 	bl	8005aa8 <I2C_IsAcknowledgeFailed>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e02d      	b.n	80059f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599e:	d021      	beq.n	80059e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a0:	f7fe fd78 	bl	8004494 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d302      	bcc.n	80059b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d116      	bne.n	80059e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	f043 0220 	orr.w	r2, r3, #32
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e007      	b.n	80059f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d1ca      	bne.n	8005988 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a08:	e042      	b.n	8005a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	f003 0310 	and.w	r3, r3, #16
 8005a14:	2b10      	cmp	r3, #16
 8005a16:	d119      	bne.n	8005a4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f06f 0210 	mvn.w	r2, #16
 8005a20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e029      	b.n	8005aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4c:	f7fe fd22 	bl	8004494 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d302      	bcc.n	8005a62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d116      	bne.n	8005a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	f043 0220 	orr.w	r2, r3, #32
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e007      	b.n	8005aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	d1b5      	bne.n	8005a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005abe:	d11b      	bne.n	8005af8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ac8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae4:	f043 0204 	orr.w	r2, r3, #4
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e000      	b.n	8005afa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005b0e:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <HAL_PWR_EnableBkUpAccess+0x20>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <HAL_PWR_EnableBkUpAccess+0x24>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005b1a:	687b      	ldr	r3, [r7, #4]
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	420e0020 	.word	0x420e0020
 8005b2c:	40007000 	.word	0x40007000

08005b30 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8005b36:	4b06      	ldr	r3, [pc, #24]	; (8005b50 <HAL_PWR_DisableBkUpAccess+0x20>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005b3c:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <HAL_PWR_DisableBkUpAccess+0x24>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005b42:	687b      	ldr	r3, [r7, #4]
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	420e0020 	.word	0x420e0020
 8005b54:	40007000 	.word	0x40007000

08005b58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e267      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d075      	beq.n	8005c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b76:	4b88      	ldr	r3, [pc, #544]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 030c 	and.w	r3, r3, #12
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d00c      	beq.n	8005b9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b82:	4b85      	ldr	r3, [pc, #532]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d112      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b8e:	4b82      	ldr	r3, [pc, #520]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b9a:	d10b      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b9c:	4b7e      	ldr	r3, [pc, #504]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d05b      	beq.n	8005c60 <HAL_RCC_OscConfig+0x108>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d157      	bne.n	8005c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e242      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bbc:	d106      	bne.n	8005bcc <HAL_RCC_OscConfig+0x74>
 8005bbe:	4b76      	ldr	r3, [pc, #472]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a75      	ldr	r2, [pc, #468]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	e01d      	b.n	8005c08 <HAL_RCC_OscConfig+0xb0>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bd4:	d10c      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x98>
 8005bd6:	4b70      	ldr	r3, [pc, #448]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a6f      	ldr	r2, [pc, #444]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	4b6d      	ldr	r3, [pc, #436]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a6c      	ldr	r2, [pc, #432]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	e00b      	b.n	8005c08 <HAL_RCC_OscConfig+0xb0>
 8005bf0:	4b69      	ldr	r3, [pc, #420]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a68      	ldr	r2, [pc, #416]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bfa:	6013      	str	r3, [r2, #0]
 8005bfc:	4b66      	ldr	r3, [pc, #408]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a65      	ldr	r2, [pc, #404]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d013      	beq.n	8005c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c10:	f7fe fc40 	bl	8004494 <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c18:	f7fe fc3c 	bl	8004494 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b64      	cmp	r3, #100	; 0x64
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e207      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c2a:	4b5b      	ldr	r3, [pc, #364]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0f0      	beq.n	8005c18 <HAL_RCC_OscConfig+0xc0>
 8005c36:	e014      	b.n	8005c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c38:	f7fe fc2c 	bl	8004494 <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c40:	f7fe fc28 	bl	8004494 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b64      	cmp	r3, #100	; 0x64
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e1f3      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c52:	4b51      	ldr	r3, [pc, #324]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1f0      	bne.n	8005c40 <HAL_RCC_OscConfig+0xe8>
 8005c5e:	e000      	b.n	8005c62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d063      	beq.n	8005d36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c6e:	4b4a      	ldr	r3, [pc, #296]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 030c 	and.w	r3, r3, #12
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00b      	beq.n	8005c92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c7a:	4b47      	ldr	r3, [pc, #284]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d11c      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c86:	4b44      	ldr	r3, [pc, #272]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d116      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c92:	4b41      	ldr	r3, [pc, #260]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <HAL_RCC_OscConfig+0x152>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d001      	beq.n	8005caa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e1c7      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005caa:	4b3b      	ldr	r3, [pc, #236]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	4937      	ldr	r1, [pc, #220]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cbe:	e03a      	b.n	8005d36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d020      	beq.n	8005d0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cc8:	4b34      	ldr	r3, [pc, #208]	; (8005d9c <HAL_RCC_OscConfig+0x244>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cce:	f7fe fbe1 	bl	8004494 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cd6:	f7fe fbdd 	bl	8004494 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e1a8      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce8:	4b2b      	ldr	r3, [pc, #172]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0f0      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf4:	4b28      	ldr	r3, [pc, #160]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	4925      	ldr	r1, [pc, #148]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	600b      	str	r3, [r1, #0]
 8005d08:	e015      	b.n	8005d36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d0a:	4b24      	ldr	r3, [pc, #144]	; (8005d9c <HAL_RCC_OscConfig+0x244>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d10:	f7fe fbc0 	bl	8004494 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d18:	f7fe fbbc 	bl	8004494 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e187      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d2a:	4b1b      	ldr	r3, [pc, #108]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1f0      	bne.n	8005d18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d036      	beq.n	8005db0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d016      	beq.n	8005d78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d4a:	4b15      	ldr	r3, [pc, #84]	; (8005da0 <HAL_RCC_OscConfig+0x248>)
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d50:	f7fe fba0 	bl	8004494 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d58:	f7fe fb9c 	bl	8004494 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e167      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0f0      	beq.n	8005d58 <HAL_RCC_OscConfig+0x200>
 8005d76:	e01b      	b.n	8005db0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d78:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <HAL_RCC_OscConfig+0x248>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d7e:	f7fe fb89 	bl	8004494 <HAL_GetTick>
 8005d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d84:	e00e      	b.n	8005da4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d86:	f7fe fb85 	bl	8004494 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d907      	bls.n	8005da4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e150      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	42470000 	.word	0x42470000
 8005da0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005da4:	4b88      	ldr	r3, [pc, #544]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1ea      	bne.n	8005d86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 8097 	beq.w	8005eec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dc2:	4b81      	ldr	r3, [pc, #516]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10f      	bne.n	8005dee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60bb      	str	r3, [r7, #8]
 8005dd2:	4b7d      	ldr	r3, [pc, #500]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	4a7c      	ldr	r2, [pc, #496]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8005dde:	4b7a      	ldr	r3, [pc, #488]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de6:	60bb      	str	r3, [r7, #8]
 8005de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dea:	2301      	movs	r3, #1
 8005dec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dee:	4b77      	ldr	r3, [pc, #476]	; (8005fcc <HAL_RCC_OscConfig+0x474>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d118      	bne.n	8005e2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dfa:	4b74      	ldr	r3, [pc, #464]	; (8005fcc <HAL_RCC_OscConfig+0x474>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a73      	ldr	r2, [pc, #460]	; (8005fcc <HAL_RCC_OscConfig+0x474>)
 8005e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e06:	f7fe fb45 	bl	8004494 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e0e:	f7fe fb41 	bl	8004494 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e10c      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e20:	4b6a      	ldr	r3, [pc, #424]	; (8005fcc <HAL_RCC_OscConfig+0x474>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0f0      	beq.n	8005e0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d106      	bne.n	8005e42 <HAL_RCC_OscConfig+0x2ea>
 8005e34:	4b64      	ldr	r3, [pc, #400]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e38:	4a63      	ldr	r2, [pc, #396]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e3a:	f043 0301 	orr.w	r3, r3, #1
 8005e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e40:	e01c      	b.n	8005e7c <HAL_RCC_OscConfig+0x324>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	2b05      	cmp	r3, #5
 8005e48:	d10c      	bne.n	8005e64 <HAL_RCC_OscConfig+0x30c>
 8005e4a:	4b5f      	ldr	r3, [pc, #380]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4e:	4a5e      	ldr	r2, [pc, #376]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e50:	f043 0304 	orr.w	r3, r3, #4
 8005e54:	6713      	str	r3, [r2, #112]	; 0x70
 8005e56:	4b5c      	ldr	r3, [pc, #368]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	4a5b      	ldr	r2, [pc, #364]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e5c:	f043 0301 	orr.w	r3, r3, #1
 8005e60:	6713      	str	r3, [r2, #112]	; 0x70
 8005e62:	e00b      	b.n	8005e7c <HAL_RCC_OscConfig+0x324>
 8005e64:	4b58      	ldr	r3, [pc, #352]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e68:	4a57      	ldr	r2, [pc, #348]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e6a:	f023 0301 	bic.w	r3, r3, #1
 8005e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e70:	4b55      	ldr	r3, [pc, #340]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e74:	4a54      	ldr	r2, [pc, #336]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e76:	f023 0304 	bic.w	r3, r3, #4
 8005e7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d015      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e84:	f7fe fb06 	bl	8004494 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e8a:	e00a      	b.n	8005ea2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e8c:	f7fe fb02 	bl	8004494 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e0cb      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea2:	4b49      	ldr	r3, [pc, #292]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0ee      	beq.n	8005e8c <HAL_RCC_OscConfig+0x334>
 8005eae:	e014      	b.n	8005eda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eb0:	f7fe faf0 	bl	8004494 <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eb6:	e00a      	b.n	8005ece <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eb8:	f7fe faec 	bl	8004494 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e0b5      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ece:	4b3e      	ldr	r3, [pc, #248]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1ee      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005eda:	7dfb      	ldrb	r3, [r7, #23]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d105      	bne.n	8005eec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ee0:	4b39      	ldr	r3, [pc, #228]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	4a38      	ldr	r2, [pc, #224]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 80a1 	beq.w	8006038 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ef6:	4b34      	ldr	r3, [pc, #208]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 030c 	and.w	r3, r3, #12
 8005efe:	2b08      	cmp	r3, #8
 8005f00:	d05c      	beq.n	8005fbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d141      	bne.n	8005f8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f0a:	4b31      	ldr	r3, [pc, #196]	; (8005fd0 <HAL_RCC_OscConfig+0x478>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f10:	f7fe fac0 	bl	8004494 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f18:	f7fe fabc 	bl	8004494 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e087      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f2a:	4b27      	ldr	r3, [pc, #156]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f0      	bne.n	8005f18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	69da      	ldr	r2, [r3, #28]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	019b      	lsls	r3, r3, #6
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	085b      	lsrs	r3, r3, #1
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	041b      	lsls	r3, r3, #16
 8005f52:	431a      	orrs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	061b      	lsls	r3, r3, #24
 8005f5a:	491b      	ldr	r1, [pc, #108]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f60:	4b1b      	ldr	r3, [pc, #108]	; (8005fd0 <HAL_RCC_OscConfig+0x478>)
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f66:	f7fe fa95 	bl	8004494 <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f6e:	f7fe fa91 	bl	8004494 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e05c      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f80:	4b11      	ldr	r3, [pc, #68]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0f0      	beq.n	8005f6e <HAL_RCC_OscConfig+0x416>
 8005f8c:	e054      	b.n	8006038 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f8e:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <HAL_RCC_OscConfig+0x478>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f94:	f7fe fa7e 	bl	8004494 <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f9c:	f7fe fa7a 	bl	8004494 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e045      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fae:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f0      	bne.n	8005f9c <HAL_RCC_OscConfig+0x444>
 8005fba:	e03d      	b.n	8006038 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d107      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e038      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	40007000 	.word	0x40007000
 8005fd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fd4:	4b1b      	ldr	r3, [pc, #108]	; (8006044 <HAL_RCC_OscConfig+0x4ec>)
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d028      	beq.n	8006034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d121      	bne.n	8006034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d11a      	bne.n	8006034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006004:	4013      	ands	r3, r2
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800600a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800600c:	4293      	cmp	r3, r2
 800600e:	d111      	bne.n	8006034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	085b      	lsrs	r3, r3, #1
 800601c:	3b01      	subs	r3, #1
 800601e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006020:	429a      	cmp	r2, r3
 8006022:	d107      	bne.n	8006034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006030:	429a      	cmp	r2, r3
 8006032:	d001      	beq.n	8006038 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40023800 	.word	0x40023800

08006048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e0cc      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800605c:	4b68      	ldr	r3, [pc, #416]	; (8006200 <HAL_RCC_ClockConfig+0x1b8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d90c      	bls.n	8006084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800606a:	4b65      	ldr	r3, [pc, #404]	; (8006200 <HAL_RCC_ClockConfig+0x1b8>)
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006072:	4b63      	ldr	r3, [pc, #396]	; (8006200 <HAL_RCC_ClockConfig+0x1b8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d001      	beq.n	8006084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e0b8      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d020      	beq.n	80060d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800609c:	4b59      	ldr	r3, [pc, #356]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	4a58      	ldr	r2, [pc, #352]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80060a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d005      	beq.n	80060c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060b4:	4b53      	ldr	r3, [pc, #332]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	4a52      	ldr	r2, [pc, #328]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060c0:	4b50      	ldr	r3, [pc, #320]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	494d      	ldr	r1, [pc, #308]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d044      	beq.n	8006168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d107      	bne.n	80060f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060e6:	4b47      	ldr	r3, [pc, #284]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d119      	bne.n	8006126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e07f      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d003      	beq.n	8006106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006102:	2b03      	cmp	r3, #3
 8006104:	d107      	bne.n	8006116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006106:	4b3f      	ldr	r3, [pc, #252]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e06f      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006116:	4b3b      	ldr	r3, [pc, #236]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e067      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006126:	4b37      	ldr	r3, [pc, #220]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f023 0203 	bic.w	r2, r3, #3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	4934      	ldr	r1, [pc, #208]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 8006134:	4313      	orrs	r3, r2
 8006136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006138:	f7fe f9ac 	bl	8004494 <HAL_GetTick>
 800613c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800613e:	e00a      	b.n	8006156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006140:	f7fe f9a8 	bl	8004494 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	f241 3288 	movw	r2, #5000	; 0x1388
 800614e:	4293      	cmp	r3, r2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e04f      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006156:	4b2b      	ldr	r3, [pc, #172]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 020c 	and.w	r2, r3, #12
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	429a      	cmp	r2, r3
 8006166:	d1eb      	bne.n	8006140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006168:	4b25      	ldr	r3, [pc, #148]	; (8006200 <HAL_RCC_ClockConfig+0x1b8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d20c      	bcs.n	8006190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006176:	4b22      	ldr	r3, [pc, #136]	; (8006200 <HAL_RCC_ClockConfig+0x1b8>)
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800617e:	4b20      	ldr	r3, [pc, #128]	; (8006200 <HAL_RCC_ClockConfig+0x1b8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d001      	beq.n	8006190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e032      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d008      	beq.n	80061ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800619c:	4b19      	ldr	r3, [pc, #100]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	4916      	ldr	r1, [pc, #88]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061ba:	4b12      	ldr	r3, [pc, #72]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	490e      	ldr	r1, [pc, #56]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061ce:	f000 f821 	bl	8006214 <HAL_RCC_GetSysClockFreq>
 80061d2:	4602      	mov	r2, r0
 80061d4:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	091b      	lsrs	r3, r3, #4
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	490a      	ldr	r1, [pc, #40]	; (8006208 <HAL_RCC_ClockConfig+0x1c0>)
 80061e0:	5ccb      	ldrb	r3, [r1, r3]
 80061e2:	fa22 f303 	lsr.w	r3, r2, r3
 80061e6:	4a09      	ldr	r2, [pc, #36]	; (800620c <HAL_RCC_ClockConfig+0x1c4>)
 80061e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061ea:	4b09      	ldr	r3, [pc, #36]	; (8006210 <HAL_RCC_ClockConfig+0x1c8>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe f90c 	bl	800440c <HAL_InitTick>

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40023c00 	.word	0x40023c00
 8006204:	40023800 	.word	0x40023800
 8006208:	0800e9f4 	.word	0x0800e9f4
 800620c:	20000014 	.word	0x20000014
 8006210:	20000018 	.word	0x20000018

08006214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006218:	b090      	sub	sp, #64	; 0x40
 800621a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	637b      	str	r3, [r7, #52]	; 0x34
 8006220:	2300      	movs	r3, #0
 8006222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006224:	2300      	movs	r3, #0
 8006226:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800622c:	4b59      	ldr	r3, [pc, #356]	; (8006394 <HAL_RCC_GetSysClockFreq+0x180>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f003 030c 	and.w	r3, r3, #12
 8006234:	2b08      	cmp	r3, #8
 8006236:	d00d      	beq.n	8006254 <HAL_RCC_GetSysClockFreq+0x40>
 8006238:	2b08      	cmp	r3, #8
 800623a:	f200 80a1 	bhi.w	8006380 <HAL_RCC_GetSysClockFreq+0x16c>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <HAL_RCC_GetSysClockFreq+0x34>
 8006242:	2b04      	cmp	r3, #4
 8006244:	d003      	beq.n	800624e <HAL_RCC_GetSysClockFreq+0x3a>
 8006246:	e09b      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006248:	4b53      	ldr	r3, [pc, #332]	; (8006398 <HAL_RCC_GetSysClockFreq+0x184>)
 800624a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800624c:	e09b      	b.n	8006386 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800624e:	4b53      	ldr	r3, [pc, #332]	; (800639c <HAL_RCC_GetSysClockFreq+0x188>)
 8006250:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006252:	e098      	b.n	8006386 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006254:	4b4f      	ldr	r3, [pc, #316]	; (8006394 <HAL_RCC_GetSysClockFreq+0x180>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800625c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800625e:	4b4d      	ldr	r3, [pc, #308]	; (8006394 <HAL_RCC_GetSysClockFreq+0x180>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d028      	beq.n	80062bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800626a:	4b4a      	ldr	r3, [pc, #296]	; (8006394 <HAL_RCC_GetSysClockFreq+0x180>)
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	099b      	lsrs	r3, r3, #6
 8006270:	2200      	movs	r2, #0
 8006272:	623b      	str	r3, [r7, #32]
 8006274:	627a      	str	r2, [r7, #36]	; 0x24
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800627c:	2100      	movs	r1, #0
 800627e:	4b47      	ldr	r3, [pc, #284]	; (800639c <HAL_RCC_GetSysClockFreq+0x188>)
 8006280:	fb03 f201 	mul.w	r2, r3, r1
 8006284:	2300      	movs	r3, #0
 8006286:	fb00 f303 	mul.w	r3, r0, r3
 800628a:	4413      	add	r3, r2
 800628c:	4a43      	ldr	r2, [pc, #268]	; (800639c <HAL_RCC_GetSysClockFreq+0x188>)
 800628e:	fba0 1202 	umull	r1, r2, r0, r2
 8006292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006294:	460a      	mov	r2, r1
 8006296:	62ba      	str	r2, [r7, #40]	; 0x28
 8006298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800629a:	4413      	add	r3, r2
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800629e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a0:	2200      	movs	r2, #0
 80062a2:	61bb      	str	r3, [r7, #24]
 80062a4:	61fa      	str	r2, [r7, #28]
 80062a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80062ae:	f7fa fc9b 	bl	8000be8 <__aeabi_uldivmod>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	4613      	mov	r3, r2
 80062b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062ba:	e053      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062bc:	4b35      	ldr	r3, [pc, #212]	; (8006394 <HAL_RCC_GetSysClockFreq+0x180>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	099b      	lsrs	r3, r3, #6
 80062c2:	2200      	movs	r2, #0
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	617a      	str	r2, [r7, #20]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80062ce:	f04f 0b00 	mov.w	fp, #0
 80062d2:	4652      	mov	r2, sl
 80062d4:	465b      	mov	r3, fp
 80062d6:	f04f 0000 	mov.w	r0, #0
 80062da:	f04f 0100 	mov.w	r1, #0
 80062de:	0159      	lsls	r1, r3, #5
 80062e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062e4:	0150      	lsls	r0, r2, #5
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	ebb2 080a 	subs.w	r8, r2, sl
 80062ee:	eb63 090b 	sbc.w	r9, r3, fp
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80062fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006302:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006306:	ebb2 0408 	subs.w	r4, r2, r8
 800630a:	eb63 0509 	sbc.w	r5, r3, r9
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	f04f 0300 	mov.w	r3, #0
 8006316:	00eb      	lsls	r3, r5, #3
 8006318:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800631c:	00e2      	lsls	r2, r4, #3
 800631e:	4614      	mov	r4, r2
 8006320:	461d      	mov	r5, r3
 8006322:	eb14 030a 	adds.w	r3, r4, sl
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	eb45 030b 	adc.w	r3, r5, fp
 800632c:	607b      	str	r3, [r7, #4]
 800632e:	f04f 0200 	mov.w	r2, #0
 8006332:	f04f 0300 	mov.w	r3, #0
 8006336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800633a:	4629      	mov	r1, r5
 800633c:	028b      	lsls	r3, r1, #10
 800633e:	4621      	mov	r1, r4
 8006340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006344:	4621      	mov	r1, r4
 8006346:	028a      	lsls	r2, r1, #10
 8006348:	4610      	mov	r0, r2
 800634a:	4619      	mov	r1, r3
 800634c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634e:	2200      	movs	r2, #0
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	60fa      	str	r2, [r7, #12]
 8006354:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006358:	f7fa fc46 	bl	8000be8 <__aeabi_uldivmod>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4613      	mov	r3, r2
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006364:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <HAL_RCC_GetSysClockFreq+0x180>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	0c1b      	lsrs	r3, r3, #16
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	3301      	adds	r3, #1
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	fbb2 f3f3 	udiv	r3, r2, r3
 800637c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800637e:	e002      	b.n	8006386 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006380:	4b05      	ldr	r3, [pc, #20]	; (8006398 <HAL_RCC_GetSysClockFreq+0x184>)
 8006382:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006388:	4618      	mov	r0, r3
 800638a:	3740      	adds	r7, #64	; 0x40
 800638c:	46bd      	mov	sp, r7
 800638e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006392:	bf00      	nop
 8006394:	40023800 	.word	0x40023800
 8006398:	00f42400 	.word	0x00f42400
 800639c:	017d7840 	.word	0x017d7840

080063a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063a4:	4b03      	ldr	r3, [pc, #12]	; (80063b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80063a6:	681b      	ldr	r3, [r3, #0]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20000014 	.word	0x20000014

080063b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063bc:	f7ff fff0 	bl	80063a0 <HAL_RCC_GetHCLKFreq>
 80063c0:	4602      	mov	r2, r0
 80063c2:	4b05      	ldr	r3, [pc, #20]	; (80063d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	0a9b      	lsrs	r3, r3, #10
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	4903      	ldr	r1, [pc, #12]	; (80063dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063ce:	5ccb      	ldrb	r3, [r1, r3]
 80063d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40023800 	.word	0x40023800
 80063dc:	0800ea04 	.word	0x0800ea04

080063e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063e4:	f7ff ffdc 	bl	80063a0 <HAL_RCC_GetHCLKFreq>
 80063e8:	4602      	mov	r2, r0
 80063ea:	4b05      	ldr	r3, [pc, #20]	; (8006400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	0b5b      	lsrs	r3, r3, #13
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	4903      	ldr	r1, [pc, #12]	; (8006404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063f6:	5ccb      	ldrb	r3, [r1, r3]
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40023800 	.word	0x40023800
 8006404:	0800ea04 	.word	0x0800ea04

08006408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e041      	b.n	800649e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7fd fa50 	bl	80038d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3304      	adds	r3, #4
 8006444:	4619      	mov	r1, r3
 8006446:	4610      	mov	r0, r2
 8006448:	f000 ff94 	bl	8007374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b082      	sub	sp, #8
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e041      	b.n	800653c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d106      	bne.n	80064d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f839 	bl	8006544 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2202      	movs	r2, #2
 80064d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4619      	mov	r1, r3
 80064e4:	4610      	mov	r0, r2
 80064e6:	f000 ff45 	bl	8007374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d109      	bne.n	800657c <HAL_TIM_PWM_Start+0x24>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b01      	cmp	r3, #1
 8006572:	bf14      	ite	ne
 8006574:	2301      	movne	r3, #1
 8006576:	2300      	moveq	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	e022      	b.n	80065c2 <HAL_TIM_PWM_Start+0x6a>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2b04      	cmp	r3, #4
 8006580:	d109      	bne.n	8006596 <HAL_TIM_PWM_Start+0x3e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b01      	cmp	r3, #1
 800658c:	bf14      	ite	ne
 800658e:	2301      	movne	r3, #1
 8006590:	2300      	moveq	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	e015      	b.n	80065c2 <HAL_TIM_PWM_Start+0x6a>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b08      	cmp	r3, #8
 800659a:	d109      	bne.n	80065b0 <HAL_TIM_PWM_Start+0x58>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	bf14      	ite	ne
 80065a8:	2301      	movne	r3, #1
 80065aa:	2300      	moveq	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	e008      	b.n	80065c2 <HAL_TIM_PWM_Start+0x6a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	bf14      	ite	ne
 80065bc:	2301      	movne	r3, #1
 80065be:	2300      	moveq	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e07c      	b.n	80066c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d104      	bne.n	80065da <HAL_TIM_PWM_Start+0x82>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065d8:	e013      	b.n	8006602 <HAL_TIM_PWM_Start+0xaa>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b04      	cmp	r3, #4
 80065de:	d104      	bne.n	80065ea <HAL_TIM_PWM_Start+0x92>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065e8:	e00b      	b.n	8006602 <HAL_TIM_PWM_Start+0xaa>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d104      	bne.n	80065fa <HAL_TIM_PWM_Start+0xa2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065f8:	e003      	b.n	8006602 <HAL_TIM_PWM_Start+0xaa>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2202      	movs	r2, #2
 80065fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2201      	movs	r2, #1
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f001 fac6 	bl	8007b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a2d      	ldr	r2, [pc, #180]	; (80066cc <HAL_TIM_PWM_Start+0x174>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d004      	beq.n	8006624 <HAL_TIM_PWM_Start+0xcc>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a2c      	ldr	r2, [pc, #176]	; (80066d0 <HAL_TIM_PWM_Start+0x178>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d101      	bne.n	8006628 <HAL_TIM_PWM_Start+0xd0>
 8006624:	2301      	movs	r3, #1
 8006626:	e000      	b.n	800662a <HAL_TIM_PWM_Start+0xd2>
 8006628:	2300      	movs	r3, #0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d007      	beq.n	800663e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800663c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a22      	ldr	r2, [pc, #136]	; (80066cc <HAL_TIM_PWM_Start+0x174>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d022      	beq.n	800668e <HAL_TIM_PWM_Start+0x136>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006650:	d01d      	beq.n	800668e <HAL_TIM_PWM_Start+0x136>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a1f      	ldr	r2, [pc, #124]	; (80066d4 <HAL_TIM_PWM_Start+0x17c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d018      	beq.n	800668e <HAL_TIM_PWM_Start+0x136>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a1d      	ldr	r2, [pc, #116]	; (80066d8 <HAL_TIM_PWM_Start+0x180>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <HAL_TIM_PWM_Start+0x136>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a1c      	ldr	r2, [pc, #112]	; (80066dc <HAL_TIM_PWM_Start+0x184>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00e      	beq.n	800668e <HAL_TIM_PWM_Start+0x136>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a16      	ldr	r2, [pc, #88]	; (80066d0 <HAL_TIM_PWM_Start+0x178>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d009      	beq.n	800668e <HAL_TIM_PWM_Start+0x136>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a18      	ldr	r2, [pc, #96]	; (80066e0 <HAL_TIM_PWM_Start+0x188>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d004      	beq.n	800668e <HAL_TIM_PWM_Start+0x136>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a16      	ldr	r2, [pc, #88]	; (80066e4 <HAL_TIM_PWM_Start+0x18c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d111      	bne.n	80066b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f003 0307 	and.w	r3, r3, #7
 8006698:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b06      	cmp	r3, #6
 800669e:	d010      	beq.n	80066c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0201 	orr.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b0:	e007      	b.n	80066c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0201 	orr.w	r2, r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	40010000 	.word	0x40010000
 80066d0:	40010400 	.word	0x40010400
 80066d4:	40000400 	.word	0x40000400
 80066d8:	40000800 	.word	0x40000800
 80066dc:	40000c00 	.word	0x40000c00
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40001800 	.word	0x40001800

080066e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e041      	b.n	800677e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7fd f9f0 	bl	8003af4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3304      	adds	r3, #4
 8006724:	4619      	mov	r1, r3
 8006726:	4610      	mov	r0, r2
 8006728:	f000 fe24 	bl	8007374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d104      	bne.n	80067a6 <HAL_TIM_IC_Start_IT+0x1e>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	e013      	b.n	80067ce <HAL_TIM_IC_Start_IT+0x46>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d104      	bne.n	80067b6 <HAL_TIM_IC_Start_IT+0x2e>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	e00b      	b.n	80067ce <HAL_TIM_IC_Start_IT+0x46>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d104      	bne.n	80067c6 <HAL_TIM_IC_Start_IT+0x3e>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	e003      	b.n	80067ce <HAL_TIM_IC_Start_IT+0x46>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <HAL_TIM_IC_Start_IT+0x58>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	e013      	b.n	8006808 <HAL_TIM_IC_Start_IT+0x80>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d104      	bne.n	80067f0 <HAL_TIM_IC_Start_IT+0x68>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	e00b      	b.n	8006808 <HAL_TIM_IC_Start_IT+0x80>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d104      	bne.n	8006800 <HAL_TIM_IC_Start_IT+0x78>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	e003      	b.n	8006808 <HAL_TIM_IC_Start_IT+0x80>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006806:	b2db      	uxtb	r3, r3
 8006808:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800680a:	7bbb      	ldrb	r3, [r7, #14]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d102      	bne.n	8006816 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006810:	7b7b      	ldrb	r3, [r7, #13]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d001      	beq.n	800681a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e0cc      	b.n	80069b4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d104      	bne.n	800682a <HAL_TIM_IC_Start_IT+0xa2>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006828:	e013      	b.n	8006852 <HAL_TIM_IC_Start_IT+0xca>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b04      	cmp	r3, #4
 800682e:	d104      	bne.n	800683a <HAL_TIM_IC_Start_IT+0xb2>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006838:	e00b      	b.n	8006852 <HAL_TIM_IC_Start_IT+0xca>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b08      	cmp	r3, #8
 800683e:	d104      	bne.n	800684a <HAL_TIM_IC_Start_IT+0xc2>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006848:	e003      	b.n	8006852 <HAL_TIM_IC_Start_IT+0xca>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <HAL_TIM_IC_Start_IT+0xda>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006860:	e013      	b.n	800688a <HAL_TIM_IC_Start_IT+0x102>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b04      	cmp	r3, #4
 8006866:	d104      	bne.n	8006872 <HAL_TIM_IC_Start_IT+0xea>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006870:	e00b      	b.n	800688a <HAL_TIM_IC_Start_IT+0x102>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b08      	cmp	r3, #8
 8006876:	d104      	bne.n	8006882 <HAL_TIM_IC_Start_IT+0xfa>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006880:	e003      	b.n	800688a <HAL_TIM_IC_Start_IT+0x102>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2202      	movs	r2, #2
 8006886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b0c      	cmp	r3, #12
 800688e:	d841      	bhi.n	8006914 <HAL_TIM_IC_Start_IT+0x18c>
 8006890:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <HAL_TIM_IC_Start_IT+0x110>)
 8006892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006896:	bf00      	nop
 8006898:	080068cd 	.word	0x080068cd
 800689c:	08006915 	.word	0x08006915
 80068a0:	08006915 	.word	0x08006915
 80068a4:	08006915 	.word	0x08006915
 80068a8:	080068df 	.word	0x080068df
 80068ac:	08006915 	.word	0x08006915
 80068b0:	08006915 	.word	0x08006915
 80068b4:	08006915 	.word	0x08006915
 80068b8:	080068f1 	.word	0x080068f1
 80068bc:	08006915 	.word	0x08006915
 80068c0:	08006915 	.word	0x08006915
 80068c4:	08006915 	.word	0x08006915
 80068c8:	08006903 	.word	0x08006903
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0202 	orr.w	r2, r2, #2
 80068da:	60da      	str	r2, [r3, #12]
      break;
 80068dc:	e01d      	b.n	800691a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f042 0204 	orr.w	r2, r2, #4
 80068ec:	60da      	str	r2, [r3, #12]
      break;
 80068ee:	e014      	b.n	800691a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0208 	orr.w	r2, r2, #8
 80068fe:	60da      	str	r2, [r3, #12]
      break;
 8006900:	e00b      	b.n	800691a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f042 0210 	orr.w	r2, r2, #16
 8006910:	60da      	str	r2, [r3, #12]
      break;
 8006912:	e002      	b.n	800691a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
      break;
 8006918:	bf00      	nop
  }

  if (status == HAL_OK)
 800691a:	7bfb      	ldrb	r3, [r7, #15]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d148      	bne.n	80069b2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2201      	movs	r2, #1
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	4618      	mov	r0, r3
 800692a:	f001 f937 	bl	8007b9c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a22      	ldr	r2, [pc, #136]	; (80069bc <HAL_TIM_IC_Start_IT+0x234>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d022      	beq.n	800697e <HAL_TIM_IC_Start_IT+0x1f6>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006940:	d01d      	beq.n	800697e <HAL_TIM_IC_Start_IT+0x1f6>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1e      	ldr	r2, [pc, #120]	; (80069c0 <HAL_TIM_IC_Start_IT+0x238>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d018      	beq.n	800697e <HAL_TIM_IC_Start_IT+0x1f6>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1c      	ldr	r2, [pc, #112]	; (80069c4 <HAL_TIM_IC_Start_IT+0x23c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <HAL_TIM_IC_Start_IT+0x1f6>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1b      	ldr	r2, [pc, #108]	; (80069c8 <HAL_TIM_IC_Start_IT+0x240>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00e      	beq.n	800697e <HAL_TIM_IC_Start_IT+0x1f6>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a19      	ldr	r2, [pc, #100]	; (80069cc <HAL_TIM_IC_Start_IT+0x244>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d009      	beq.n	800697e <HAL_TIM_IC_Start_IT+0x1f6>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a18      	ldr	r2, [pc, #96]	; (80069d0 <HAL_TIM_IC_Start_IT+0x248>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d004      	beq.n	800697e <HAL_TIM_IC_Start_IT+0x1f6>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a16      	ldr	r2, [pc, #88]	; (80069d4 <HAL_TIM_IC_Start_IT+0x24c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d111      	bne.n	80069a2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 0307 	and.w	r3, r3, #7
 8006988:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b06      	cmp	r3, #6
 800698e:	d010      	beq.n	80069b2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f042 0201 	orr.w	r2, r2, #1
 800699e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a0:	e007      	b.n	80069b2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f042 0201 	orr.w	r2, r2, #1
 80069b0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	40010000 	.word	0x40010000
 80069c0:	40000400 	.word	0x40000400
 80069c4:	40000800 	.word	0x40000800
 80069c8:	40000c00 	.word	0x40000c00
 80069cc:	40010400 	.word	0x40010400
 80069d0:	40014000 	.word	0x40014000
 80069d4:	40001800 	.word	0x40001800

080069d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e097      	b.n	8006b1c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d106      	bne.n	8006a06 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7fc ffdd 	bl	80039c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6812      	ldr	r2, [r2, #0]
 8006a18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a1c:	f023 0307 	bic.w	r3, r3, #7
 8006a20:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	f000 fca1 	bl	8007374 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5a:	f023 0303 	bic.w	r3, r3, #3
 8006a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006a78:	f023 030c 	bic.w	r3, r3, #12
 8006a7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	021b      	lsls	r3, r3, #8
 8006a94:	4313      	orrs	r3, r2
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	011a      	lsls	r2, r3, #4
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	031b      	lsls	r3, r3, #12
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ab6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006abe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	4313      	orrs	r3, r2
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b34:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b3c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b44:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b4c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d110      	bne.n	8006b76 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d102      	bne.n	8006b60 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b5a:	7b7b      	ldrb	r3, [r7, #13]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d001      	beq.n	8006b64 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e069      	b.n	8006c38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b74:	e031      	b.n	8006bda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d110      	bne.n	8006b9e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d102      	bne.n	8006b88 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b82:	7b3b      	ldrb	r3, [r7, #12]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d001      	beq.n	8006b8c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e055      	b.n	8006c38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b9c:	e01d      	b.n	8006bda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d108      	bne.n	8006bb6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ba4:	7bbb      	ldrb	r3, [r7, #14]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d105      	bne.n	8006bb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006baa:	7b7b      	ldrb	r3, [r7, #13]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d102      	bne.n	8006bb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bb0:	7b3b      	ldrb	r3, [r7, #12]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d001      	beq.n	8006bba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e03e      	b.n	8006c38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <HAL_TIM_Encoder_Start+0xc4>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d008      	beq.n	8006bf8 <HAL_TIM_Encoder_Start+0xd4>
 8006be6:	e00f      	b.n	8006c08 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2201      	movs	r2, #1
 8006bee:	2100      	movs	r1, #0
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 ffd3 	bl	8007b9c <TIM_CCxChannelCmd>
      break;
 8006bf6:	e016      	b.n	8006c26 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	2104      	movs	r1, #4
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 ffcb 	bl	8007b9c <TIM_CCxChannelCmd>
      break;
 8006c06:	e00e      	b.n	8006c26 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	2100      	movs	r1, #0
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 ffc3 	bl	8007b9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	2104      	movs	r1, #4
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 ffbc 	bl	8007b9c <TIM_CCxChannelCmd>
      break;
 8006c24:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f042 0201 	orr.w	r2, r2, #1
 8006c34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d122      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d11b      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f06f 0202 	mvn.w	r2, #2
 8006c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	f003 0303 	and.w	r3, r3, #3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7fa fdb8 	bl	80017f8 <HAL_TIM_IC_CaptureCallback>
 8006c88:	e005      	b.n	8006c96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fb54 	bl	8007338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fb5b 	bl	800734c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0304 	and.w	r3, r3, #4
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	d122      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	d11b      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f06f 0204 	mvn.w	r2, #4
 8006cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7fa fd8e 	bl	80017f8 <HAL_TIM_IC_CaptureCallback>
 8006cdc:	e005      	b.n	8006cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fb2a 	bl	8007338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fb31 	bl	800734c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f003 0308 	and.w	r3, r3, #8
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d122      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f003 0308 	and.w	r3, r3, #8
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d11b      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f06f 0208 	mvn.w	r2, #8
 8006d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2204      	movs	r2, #4
 8006d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7fa fd64 	bl	80017f8 <HAL_TIM_IC_CaptureCallback>
 8006d30:	e005      	b.n	8006d3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fb00 	bl	8007338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fb07 	bl	800734c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0310 	and.w	r3, r3, #16
 8006d4e:	2b10      	cmp	r3, #16
 8006d50:	d122      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 0310 	and.w	r3, r3, #16
 8006d5c:	2b10      	cmp	r3, #16
 8006d5e:	d11b      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f06f 0210 	mvn.w	r2, #16
 8006d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2208      	movs	r2, #8
 8006d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7fa fd3a 	bl	80017f8 <HAL_TIM_IC_CaptureCallback>
 8006d84:	e005      	b.n	8006d92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fad6 	bl	8007338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fadd 	bl	800734c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d10e      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d107      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f06f 0201 	mvn.w	r2, #1
 8006dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fab0 	bl	8007324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dce:	2b80      	cmp	r3, #128	; 0x80
 8006dd0:	d10e      	bne.n	8006df0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ddc:	2b80      	cmp	r3, #128	; 0x80
 8006dde:	d107      	bne.n	8006df0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 ffd4 	bl	8007d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfa:	2b40      	cmp	r3, #64	; 0x40
 8006dfc:	d10e      	bne.n	8006e1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e08:	2b40      	cmp	r3, #64	; 0x40
 8006e0a:	d107      	bne.n	8006e1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 faa2 	bl	8007360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b20      	cmp	r3, #32
 8006e28:	d10e      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	2b20      	cmp	r3, #32
 8006e36:	d107      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f06f 0220 	mvn.w	r2, #32
 8006e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 ff9e 	bl	8007d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e48:	bf00      	nop
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d101      	bne.n	8006e6e <HAL_TIM_IC_ConfigChannel+0x1e>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e088      	b.n	8006f80 <HAL_TIM_IC_ConfigChannel+0x130>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d11b      	bne.n	8006eb4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6818      	ldr	r0, [r3, #0]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	6819      	ldr	r1, [r3, #0]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f000 fcc2 	bl	8007814 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 020c 	bic.w	r2, r2, #12
 8006e9e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6999      	ldr	r1, [r3, #24]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	619a      	str	r2, [r3, #24]
 8006eb2:	e060      	b.n	8006f76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d11c      	bne.n	8006ef4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6818      	ldr	r0, [r3, #0]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	6819      	ldr	r1, [r3, #0]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f000 fd46 	bl	800795a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	699a      	ldr	r2, [r3, #24]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006edc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6999      	ldr	r1, [r3, #24]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	021a      	lsls	r2, r3, #8
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	619a      	str	r2, [r3, #24]
 8006ef2:	e040      	b.n	8006f76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b08      	cmp	r3, #8
 8006ef8:	d11b      	bne.n	8006f32 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6818      	ldr	r0, [r3, #0]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	6819      	ldr	r1, [r3, #0]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f000 fd93 	bl	8007a34 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	69da      	ldr	r2, [r3, #28]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 020c 	bic.w	r2, r2, #12
 8006f1c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69d9      	ldr	r1, [r3, #28]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	61da      	str	r2, [r3, #28]
 8006f30:	e021      	b.n	8006f76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b0c      	cmp	r3, #12
 8006f36:	d11c      	bne.n	8006f72 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6818      	ldr	r0, [r3, #0]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	6819      	ldr	r1, [r3, #0]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	f000 fdb0 	bl	8007aac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	69da      	ldr	r2, [r3, #28]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f5a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	69d9      	ldr	r1, [r3, #28]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	021a      	lsls	r2, r3, #8
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	61da      	str	r2, [r3, #28]
 8006f70:	e001      	b.n	8006f76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f94:	2300      	movs	r3, #0
 8006f96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d101      	bne.n	8006fa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	e0ae      	b.n	8007104 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b0c      	cmp	r3, #12
 8006fb2:	f200 809f 	bhi.w	80070f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006fb6:	a201      	add	r2, pc, #4	; (adr r2, 8006fbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbc:	08006ff1 	.word	0x08006ff1
 8006fc0:	080070f5 	.word	0x080070f5
 8006fc4:	080070f5 	.word	0x080070f5
 8006fc8:	080070f5 	.word	0x080070f5
 8006fcc:	08007031 	.word	0x08007031
 8006fd0:	080070f5 	.word	0x080070f5
 8006fd4:	080070f5 	.word	0x080070f5
 8006fd8:	080070f5 	.word	0x080070f5
 8006fdc:	08007073 	.word	0x08007073
 8006fe0:	080070f5 	.word	0x080070f5
 8006fe4:	080070f5 	.word	0x080070f5
 8006fe8:	080070f5 	.word	0x080070f5
 8006fec:	080070b3 	.word	0x080070b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68b9      	ldr	r1, [r7, #8]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fa5c 	bl	80074b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699a      	ldr	r2, [r3, #24]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0208 	orr.w	r2, r2, #8
 800700a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699a      	ldr	r2, [r3, #24]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 0204 	bic.w	r2, r2, #4
 800701a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6999      	ldr	r1, [r3, #24]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	691a      	ldr	r2, [r3, #16]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	619a      	str	r2, [r3, #24]
      break;
 800702e:	e064      	b.n	80070fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68b9      	ldr	r1, [r7, #8]
 8007036:	4618      	mov	r0, r3
 8007038:	f000 faac 	bl	8007594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	699a      	ldr	r2, [r3, #24]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800704a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	699a      	ldr	r2, [r3, #24]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800705a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6999      	ldr	r1, [r3, #24]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	021a      	lsls	r2, r3, #8
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	619a      	str	r2, [r3, #24]
      break;
 8007070:	e043      	b.n	80070fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68b9      	ldr	r1, [r7, #8]
 8007078:	4618      	mov	r0, r3
 800707a:	f000 fb01 	bl	8007680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69da      	ldr	r2, [r3, #28]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f042 0208 	orr.w	r2, r2, #8
 800708c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69da      	ldr	r2, [r3, #28]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0204 	bic.w	r2, r2, #4
 800709c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	69d9      	ldr	r1, [r3, #28]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	691a      	ldr	r2, [r3, #16]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	61da      	str	r2, [r3, #28]
      break;
 80070b0:	e023      	b.n	80070fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68b9      	ldr	r1, [r7, #8]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 fb55 	bl	8007768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69da      	ldr	r2, [r3, #28]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	69da      	ldr	r2, [r3, #28]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69d9      	ldr	r1, [r3, #28]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	021a      	lsls	r2, r3, #8
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	61da      	str	r2, [r3, #28]
      break;
 80070f2:	e002      	b.n	80070fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	75fb      	strb	r3, [r7, #23]
      break;
 80070f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007102:	7dfb      	ldrb	r3, [r7, #23]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_TIM_ConfigClockSource+0x1c>
 8007124:	2302      	movs	r3, #2
 8007126:	e0b4      	b.n	8007292 <HAL_TIM_ConfigClockSource+0x186>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2202      	movs	r2, #2
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800714e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007160:	d03e      	beq.n	80071e0 <HAL_TIM_ConfigClockSource+0xd4>
 8007162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007166:	f200 8087 	bhi.w	8007278 <HAL_TIM_ConfigClockSource+0x16c>
 800716a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800716e:	f000 8086 	beq.w	800727e <HAL_TIM_ConfigClockSource+0x172>
 8007172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007176:	d87f      	bhi.n	8007278 <HAL_TIM_ConfigClockSource+0x16c>
 8007178:	2b70      	cmp	r3, #112	; 0x70
 800717a:	d01a      	beq.n	80071b2 <HAL_TIM_ConfigClockSource+0xa6>
 800717c:	2b70      	cmp	r3, #112	; 0x70
 800717e:	d87b      	bhi.n	8007278 <HAL_TIM_ConfigClockSource+0x16c>
 8007180:	2b60      	cmp	r3, #96	; 0x60
 8007182:	d050      	beq.n	8007226 <HAL_TIM_ConfigClockSource+0x11a>
 8007184:	2b60      	cmp	r3, #96	; 0x60
 8007186:	d877      	bhi.n	8007278 <HAL_TIM_ConfigClockSource+0x16c>
 8007188:	2b50      	cmp	r3, #80	; 0x50
 800718a:	d03c      	beq.n	8007206 <HAL_TIM_ConfigClockSource+0xfa>
 800718c:	2b50      	cmp	r3, #80	; 0x50
 800718e:	d873      	bhi.n	8007278 <HAL_TIM_ConfigClockSource+0x16c>
 8007190:	2b40      	cmp	r3, #64	; 0x40
 8007192:	d058      	beq.n	8007246 <HAL_TIM_ConfigClockSource+0x13a>
 8007194:	2b40      	cmp	r3, #64	; 0x40
 8007196:	d86f      	bhi.n	8007278 <HAL_TIM_ConfigClockSource+0x16c>
 8007198:	2b30      	cmp	r3, #48	; 0x30
 800719a:	d064      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x15a>
 800719c:	2b30      	cmp	r3, #48	; 0x30
 800719e:	d86b      	bhi.n	8007278 <HAL_TIM_ConfigClockSource+0x16c>
 80071a0:	2b20      	cmp	r3, #32
 80071a2:	d060      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x15a>
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	d867      	bhi.n	8007278 <HAL_TIM_ConfigClockSource+0x16c>
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d05c      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x15a>
 80071ac:	2b10      	cmp	r3, #16
 80071ae:	d05a      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x15a>
 80071b0:	e062      	b.n	8007278 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	6899      	ldr	r1, [r3, #8]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f000 fccb 	bl	8007b5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	609a      	str	r2, [r3, #8]
      break;
 80071de:	e04f      	b.n	8007280 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6818      	ldr	r0, [r3, #0]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	6899      	ldr	r1, [r3, #8]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f000 fcb4 	bl	8007b5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689a      	ldr	r2, [r3, #8]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007202:	609a      	str	r2, [r3, #8]
      break;
 8007204:	e03c      	b.n	8007280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6818      	ldr	r0, [r3, #0]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	6859      	ldr	r1, [r3, #4]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	461a      	mov	r2, r3
 8007214:	f000 fb72 	bl	80078fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2150      	movs	r1, #80	; 0x50
 800721e:	4618      	mov	r0, r3
 8007220:	f000 fc81 	bl	8007b26 <TIM_ITRx_SetConfig>
      break;
 8007224:	e02c      	b.n	8007280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6818      	ldr	r0, [r3, #0]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	6859      	ldr	r1, [r3, #4]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	461a      	mov	r2, r3
 8007234:	f000 fbce 	bl	80079d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2160      	movs	r1, #96	; 0x60
 800723e:	4618      	mov	r0, r3
 8007240:	f000 fc71 	bl	8007b26 <TIM_ITRx_SetConfig>
      break;
 8007244:	e01c      	b.n	8007280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6859      	ldr	r1, [r3, #4]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	461a      	mov	r2, r3
 8007254:	f000 fb52 	bl	80078fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2140      	movs	r1, #64	; 0x40
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fc61 	bl	8007b26 <TIM_ITRx_SetConfig>
      break;
 8007264:	e00c      	b.n	8007280 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4619      	mov	r1, r3
 8007270:	4610      	mov	r0, r2
 8007272:	f000 fc58 	bl	8007b26 <TIM_ITRx_SetConfig>
      break;
 8007276:	e003      	b.n	8007280 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	73fb      	strb	r3, [r7, #15]
      break;
 800727c:	e000      	b.n	8007280 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800727e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007290:	7bfb      	ldrb	r3, [r7, #15]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b0c      	cmp	r3, #12
 80072ae:	d831      	bhi.n	8007314 <HAL_TIM_ReadCapturedValue+0x78>
 80072b0:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80072b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b6:	bf00      	nop
 80072b8:	080072ed 	.word	0x080072ed
 80072bc:	08007315 	.word	0x08007315
 80072c0:	08007315 	.word	0x08007315
 80072c4:	08007315 	.word	0x08007315
 80072c8:	080072f7 	.word	0x080072f7
 80072cc:	08007315 	.word	0x08007315
 80072d0:	08007315 	.word	0x08007315
 80072d4:	08007315 	.word	0x08007315
 80072d8:	08007301 	.word	0x08007301
 80072dc:	08007315 	.word	0x08007315
 80072e0:	08007315 	.word	0x08007315
 80072e4:	08007315 	.word	0x08007315
 80072e8:	0800730b 	.word	0x0800730b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f2:	60fb      	str	r3, [r7, #12]

      break;
 80072f4:	e00f      	b.n	8007316 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	60fb      	str	r3, [r7, #12]

      break;
 80072fe:	e00a      	b.n	8007316 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007306:	60fb      	str	r3, [r7, #12]

      break;
 8007308:	e005      	b.n	8007316 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007310:	60fb      	str	r3, [r7, #12]

      break;
 8007312:	e000      	b.n	8007316 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007314:	bf00      	nop
  }

  return tmpreg;
 8007316:	68fb      	ldr	r3, [r7, #12]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a40      	ldr	r2, [pc, #256]	; (8007488 <TIM_Base_SetConfig+0x114>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d013      	beq.n	80073b4 <TIM_Base_SetConfig+0x40>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007392:	d00f      	beq.n	80073b4 <TIM_Base_SetConfig+0x40>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a3d      	ldr	r2, [pc, #244]	; (800748c <TIM_Base_SetConfig+0x118>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d00b      	beq.n	80073b4 <TIM_Base_SetConfig+0x40>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a3c      	ldr	r2, [pc, #240]	; (8007490 <TIM_Base_SetConfig+0x11c>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d007      	beq.n	80073b4 <TIM_Base_SetConfig+0x40>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a3b      	ldr	r2, [pc, #236]	; (8007494 <TIM_Base_SetConfig+0x120>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d003      	beq.n	80073b4 <TIM_Base_SetConfig+0x40>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a3a      	ldr	r2, [pc, #232]	; (8007498 <TIM_Base_SetConfig+0x124>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d108      	bne.n	80073c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a2f      	ldr	r2, [pc, #188]	; (8007488 <TIM_Base_SetConfig+0x114>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d02b      	beq.n	8007426 <TIM_Base_SetConfig+0xb2>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d4:	d027      	beq.n	8007426 <TIM_Base_SetConfig+0xb2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a2c      	ldr	r2, [pc, #176]	; (800748c <TIM_Base_SetConfig+0x118>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d023      	beq.n	8007426 <TIM_Base_SetConfig+0xb2>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a2b      	ldr	r2, [pc, #172]	; (8007490 <TIM_Base_SetConfig+0x11c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d01f      	beq.n	8007426 <TIM_Base_SetConfig+0xb2>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a2a      	ldr	r2, [pc, #168]	; (8007494 <TIM_Base_SetConfig+0x120>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d01b      	beq.n	8007426 <TIM_Base_SetConfig+0xb2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a29      	ldr	r2, [pc, #164]	; (8007498 <TIM_Base_SetConfig+0x124>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d017      	beq.n	8007426 <TIM_Base_SetConfig+0xb2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a28      	ldr	r2, [pc, #160]	; (800749c <TIM_Base_SetConfig+0x128>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d013      	beq.n	8007426 <TIM_Base_SetConfig+0xb2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a27      	ldr	r2, [pc, #156]	; (80074a0 <TIM_Base_SetConfig+0x12c>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d00f      	beq.n	8007426 <TIM_Base_SetConfig+0xb2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a26      	ldr	r2, [pc, #152]	; (80074a4 <TIM_Base_SetConfig+0x130>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d00b      	beq.n	8007426 <TIM_Base_SetConfig+0xb2>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a25      	ldr	r2, [pc, #148]	; (80074a8 <TIM_Base_SetConfig+0x134>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d007      	beq.n	8007426 <TIM_Base_SetConfig+0xb2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a24      	ldr	r2, [pc, #144]	; (80074ac <TIM_Base_SetConfig+0x138>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d003      	beq.n	8007426 <TIM_Base_SetConfig+0xb2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a23      	ldr	r2, [pc, #140]	; (80074b0 <TIM_Base_SetConfig+0x13c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d108      	bne.n	8007438 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800742c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	4313      	orrs	r3, r2
 8007436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a0a      	ldr	r2, [pc, #40]	; (8007488 <TIM_Base_SetConfig+0x114>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d003      	beq.n	800746c <TIM_Base_SetConfig+0xf8>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a0c      	ldr	r2, [pc, #48]	; (8007498 <TIM_Base_SetConfig+0x124>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d103      	bne.n	8007474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	615a      	str	r2, [r3, #20]
}
 800747a:	bf00      	nop
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	40010000 	.word	0x40010000
 800748c:	40000400 	.word	0x40000400
 8007490:	40000800 	.word	0x40000800
 8007494:	40000c00 	.word	0x40000c00
 8007498:	40010400 	.word	0x40010400
 800749c:	40014000 	.word	0x40014000
 80074a0:	40014400 	.word	0x40014400
 80074a4:	40014800 	.word	0x40014800
 80074a8:	40001800 	.word	0x40001800
 80074ac:	40001c00 	.word	0x40001c00
 80074b0:	40002000 	.word	0x40002000

080074b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	f023 0201 	bic.w	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f023 0302 	bic.w	r3, r3, #2
 80074fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	4313      	orrs	r3, r2
 8007506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a20      	ldr	r2, [pc, #128]	; (800758c <TIM_OC1_SetConfig+0xd8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d003      	beq.n	8007518 <TIM_OC1_SetConfig+0x64>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a1f      	ldr	r2, [pc, #124]	; (8007590 <TIM_OC1_SetConfig+0xdc>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d10c      	bne.n	8007532 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f023 0308 	bic.w	r3, r3, #8
 800751e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f023 0304 	bic.w	r3, r3, #4
 8007530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a15      	ldr	r2, [pc, #84]	; (800758c <TIM_OC1_SetConfig+0xd8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d003      	beq.n	8007542 <TIM_OC1_SetConfig+0x8e>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a14      	ldr	r2, [pc, #80]	; (8007590 <TIM_OC1_SetConfig+0xdc>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d111      	bne.n	8007566 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	4313      	orrs	r3, r2
 800755a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	4313      	orrs	r3, r2
 8007564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	621a      	str	r2, [r3, #32]
}
 8007580:	bf00      	nop
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	40010000 	.word	0x40010000
 8007590:	40010400 	.word	0x40010400

08007594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	f023 0210 	bic.w	r2, r3, #16
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	021b      	lsls	r3, r3, #8
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f023 0320 	bic.w	r3, r3, #32
 80075de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	011b      	lsls	r3, r3, #4
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a22      	ldr	r2, [pc, #136]	; (8007678 <TIM_OC2_SetConfig+0xe4>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d003      	beq.n	80075fc <TIM_OC2_SetConfig+0x68>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a21      	ldr	r2, [pc, #132]	; (800767c <TIM_OC2_SetConfig+0xe8>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d10d      	bne.n	8007618 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	4313      	orrs	r3, r2
 800760e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007616:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a17      	ldr	r2, [pc, #92]	; (8007678 <TIM_OC2_SetConfig+0xe4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d003      	beq.n	8007628 <TIM_OC2_SetConfig+0x94>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a16      	ldr	r2, [pc, #88]	; (800767c <TIM_OC2_SetConfig+0xe8>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d113      	bne.n	8007650 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800762e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	4313      	orrs	r3, r2
 8007642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	4313      	orrs	r3, r2
 800764e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	621a      	str	r2, [r3, #32]
}
 800766a:	bf00      	nop
 800766c:	371c      	adds	r7, #28
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	40010000 	.word	0x40010000
 800767c:	40010400 	.word	0x40010400

08007680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f023 0303 	bic.w	r3, r3, #3
 80076b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	021b      	lsls	r3, r3, #8
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a21      	ldr	r2, [pc, #132]	; (8007760 <TIM_OC3_SetConfig+0xe0>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d003      	beq.n	80076e6 <TIM_OC3_SetConfig+0x66>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a20      	ldr	r2, [pc, #128]	; (8007764 <TIM_OC3_SetConfig+0xe4>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d10d      	bne.n	8007702 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	021b      	lsls	r3, r3, #8
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a16      	ldr	r2, [pc, #88]	; (8007760 <TIM_OC3_SetConfig+0xe0>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d003      	beq.n	8007712 <TIM_OC3_SetConfig+0x92>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a15      	ldr	r2, [pc, #84]	; (8007764 <TIM_OC3_SetConfig+0xe4>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d113      	bne.n	800773a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	011b      	lsls	r3, r3, #4
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	4313      	orrs	r3, r2
 800772c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	4313      	orrs	r3, r2
 8007738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	621a      	str	r2, [r3, #32]
}
 8007754:	bf00      	nop
 8007756:	371c      	adds	r7, #28
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	40010000 	.word	0x40010000
 8007764:	40010400 	.word	0x40010400

08007768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800779e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	021b      	lsls	r3, r3, #8
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	031b      	lsls	r3, r3, #12
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4313      	orrs	r3, r2
 80077be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a12      	ldr	r2, [pc, #72]	; (800780c <TIM_OC4_SetConfig+0xa4>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d003      	beq.n	80077d0 <TIM_OC4_SetConfig+0x68>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a11      	ldr	r2, [pc, #68]	; (8007810 <TIM_OC4_SetConfig+0xa8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d109      	bne.n	80077e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	019b      	lsls	r3, r3, #6
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	621a      	str	r2, [r3, #32]
}
 80077fe:	bf00      	nop
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40010000 	.word	0x40010000
 8007810:	40010400 	.word	0x40010400

08007814 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	f023 0201 	bic.w	r2, r3, #1
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	4a28      	ldr	r2, [pc, #160]	; (80078e0 <TIM_TI1_SetConfig+0xcc>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d01b      	beq.n	800787a <TIM_TI1_SetConfig+0x66>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007848:	d017      	beq.n	800787a <TIM_TI1_SetConfig+0x66>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4a25      	ldr	r2, [pc, #148]	; (80078e4 <TIM_TI1_SetConfig+0xd0>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d013      	beq.n	800787a <TIM_TI1_SetConfig+0x66>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	4a24      	ldr	r2, [pc, #144]	; (80078e8 <TIM_TI1_SetConfig+0xd4>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00f      	beq.n	800787a <TIM_TI1_SetConfig+0x66>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4a23      	ldr	r2, [pc, #140]	; (80078ec <TIM_TI1_SetConfig+0xd8>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d00b      	beq.n	800787a <TIM_TI1_SetConfig+0x66>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	4a22      	ldr	r2, [pc, #136]	; (80078f0 <TIM_TI1_SetConfig+0xdc>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d007      	beq.n	800787a <TIM_TI1_SetConfig+0x66>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4a21      	ldr	r2, [pc, #132]	; (80078f4 <TIM_TI1_SetConfig+0xe0>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d003      	beq.n	800787a <TIM_TI1_SetConfig+0x66>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	4a20      	ldr	r2, [pc, #128]	; (80078f8 <TIM_TI1_SetConfig+0xe4>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d101      	bne.n	800787e <TIM_TI1_SetConfig+0x6a>
 800787a:	2301      	movs	r3, #1
 800787c:	e000      	b.n	8007880 <TIM_TI1_SetConfig+0x6c>
 800787e:	2300      	movs	r3, #0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d008      	beq.n	8007896 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f023 0303 	bic.w	r3, r3, #3
 800788a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4313      	orrs	r3, r2
 8007892:	617b      	str	r3, [r7, #20]
 8007894:	e003      	b.n	800789e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f043 0301 	orr.w	r3, r3, #1
 800789c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	011b      	lsls	r3, r3, #4
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f023 030a 	bic.w	r3, r3, #10
 80078b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f003 030a 	and.w	r3, r3, #10
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	621a      	str	r2, [r3, #32]
}
 80078d2:	bf00      	nop
 80078d4:	371c      	adds	r7, #28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	40010000 	.word	0x40010000
 80078e4:	40000400 	.word	0x40000400
 80078e8:	40000800 	.word	0x40000800
 80078ec:	40000c00 	.word	0x40000c00
 80078f0:	40010400 	.word	0x40010400
 80078f4:	40014000 	.word	0x40014000
 80078f8:	40001800 	.word	0x40001800

080078fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	f023 0201 	bic.w	r2, r3, #1
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4313      	orrs	r3, r2
 8007930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f023 030a 	bic.w	r3, r3, #10
 8007938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4313      	orrs	r3, r2
 8007940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	621a      	str	r2, [r3, #32]
}
 800794e:	bf00      	nop
 8007950:	371c      	adds	r7, #28
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800795a:	b480      	push	{r7}
 800795c:	b087      	sub	sp, #28
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	607a      	str	r2, [r7, #4]
 8007966:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	f023 0210 	bic.w	r2, r3, #16
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007986:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	021b      	lsls	r3, r3, #8
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	4313      	orrs	r3, r2
 8007990:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007998:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	031b      	lsls	r3, r3, #12
 800799e:	b29b      	uxth	r3, r3
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	011b      	lsls	r3, r3, #4
 80079b2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	621a      	str	r2, [r3, #32]
}
 80079c8:	bf00      	nop
 80079ca:	371c      	adds	r7, #28
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	f023 0210 	bic.w	r2, r3, #16
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	031b      	lsls	r3, r3, #12
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	011b      	lsls	r3, r3, #4
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	621a      	str	r2, [r3, #32]
}
 8007a28:	bf00      	nop
 8007a2a:	371c      	adds	r7, #28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f023 0303 	bic.w	r3, r3, #3
 8007a60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	011b      	lsls	r3, r3, #4
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007a84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	021b      	lsls	r3, r3, #8
 8007a8a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	621a      	str	r2, [r3, #32]
}
 8007aa0:	bf00      	nop
 8007aa2:	371c      	adds	r7, #28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
 8007ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ad8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	021b      	lsls	r3, r3, #8
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007aea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	031b      	lsls	r3, r3, #12
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007afe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	031b      	lsls	r3, r3, #12
 8007b04:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	621a      	str	r2, [r3, #32]
}
 8007b1a:	bf00      	nop
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b085      	sub	sp, #20
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	f043 0307 	orr.w	r3, r3, #7
 8007b48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	609a      	str	r2, [r3, #8]
}
 8007b50:	bf00      	nop
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	021a      	lsls	r2, r3, #8
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	609a      	str	r2, [r3, #8]
}
 8007b90:	bf00      	nop
 8007b92:	371c      	adds	r7, #28
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	f003 031f 	and.w	r3, r3, #31
 8007bae:	2201      	movs	r2, #1
 8007bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6a1a      	ldr	r2, [r3, #32]
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	43db      	mvns	r3, r3
 8007bbe:	401a      	ands	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a1a      	ldr	r2, [r3, #32]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f003 031f 	and.w	r3, r3, #31
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	621a      	str	r2, [r3, #32]
}
 8007bda:	bf00      	nop
 8007bdc:	371c      	adds	r7, #28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
	...

08007be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d101      	bne.n	8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e05a      	b.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a21      	ldr	r2, [pc, #132]	; (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d022      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c4c:	d01d      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a1d      	ldr	r2, [pc, #116]	; (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d018      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a1b      	ldr	r2, [pc, #108]	; (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d013      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a1a      	ldr	r2, [pc, #104]	; (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00e      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a18      	ldr	r2, [pc, #96]	; (8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d009      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a17      	ldr	r2, [pc, #92]	; (8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d004      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a15      	ldr	r2, [pc, #84]	; (8007cdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d10c      	bne.n	8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	40010000 	.word	0x40010000
 8007cc8:	40000400 	.word	0x40000400
 8007ccc:	40000800 	.word	0x40000800
 8007cd0:	40000c00 	.word	0x40000c00
 8007cd4:	40010400 	.word	0x40010400
 8007cd8:	40014000 	.word	0x40014000
 8007cdc:	40001800 	.word	0x40001800

08007ce0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d101      	bne.n	8007cfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	e03d      	b.n	8007d78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e03f      	b.n	8007e3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d106      	bne.n	8007dd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7fb ff18 	bl	8003c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2224      	movs	r2, #36	; 0x24
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68da      	ldr	r2, [r3, #12]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fddf 	bl	80089b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	695a      	ldr	r2, [r3, #20]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2220      	movs	r2, #32
 8007e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2220      	movs	r2, #32
 8007e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b08a      	sub	sp, #40	; 0x28
 8007e4a:	af02      	add	r7, sp, #8
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	603b      	str	r3, [r7, #0]
 8007e52:	4613      	mov	r3, r2
 8007e54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b20      	cmp	r3, #32
 8007e64:	d17c      	bne.n	8007f60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <HAL_UART_Transmit+0x2c>
 8007e6c:	88fb      	ldrh	r3, [r7, #6]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e075      	b.n	8007f62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d101      	bne.n	8007e84 <HAL_UART_Transmit+0x3e>
 8007e80:	2302      	movs	r3, #2
 8007e82:	e06e      	b.n	8007f62 <HAL_UART_Transmit+0x11c>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2221      	movs	r2, #33	; 0x21
 8007e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e9a:	f7fc fafb 	bl	8004494 <HAL_GetTick>
 8007e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	88fa      	ldrh	r2, [r7, #6]
 8007ea4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	88fa      	ldrh	r2, [r7, #6]
 8007eaa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb4:	d108      	bne.n	8007ec8 <HAL_UART_Transmit+0x82>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d104      	bne.n	8007ec8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	61bb      	str	r3, [r7, #24]
 8007ec6:	e003      	b.n	8007ed0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ed8:	e02a      	b.n	8007f30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2180      	movs	r1, #128	; 0x80
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 fb1f 	bl	8008528 <UART_WaitOnFlagUntilTimeout>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e036      	b.n	8007f62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10b      	bne.n	8007f12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	3302      	adds	r3, #2
 8007f0e:	61bb      	str	r3, [r7, #24]
 8007f10:	e007      	b.n	8007f22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	781a      	ldrb	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1cf      	bne.n	8007eda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2200      	movs	r2, #0
 8007f42:	2140      	movs	r1, #64	; 0x40
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 faef 	bl	8008528 <UART_WaitOnFlagUntilTimeout>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e006      	b.n	8007f62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2220      	movs	r2, #32
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	e000      	b.n	8007f62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007f60:	2302      	movs	r3, #2
  }
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3720      	adds	r7, #32
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	60b9      	str	r1, [r7, #8]
 8007f74:	4613      	mov	r3, r2
 8007f76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b20      	cmp	r3, #32
 8007f82:	d11d      	bne.n	8007fc0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <HAL_UART_Receive_IT+0x26>
 8007f8a:	88fb      	ldrh	r3, [r7, #6]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e016      	b.n	8007fc2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d101      	bne.n	8007fa2 <HAL_UART_Receive_IT+0x38>
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	e00f      	b.n	8007fc2 <HAL_UART_Receive_IT+0x58>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007fb0:	88fb      	ldrh	r3, [r7, #6]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	68b9      	ldr	r1, [r7, #8]
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f000 fb24 	bl	8008604 <UART_Start_Receive_IT>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	e000      	b.n	8007fc2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007fc0:	2302      	movs	r3, #2
  }
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b0ba      	sub	sp, #232	; 0xe8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008002:	f003 030f 	and.w	r3, r3, #15
 8008006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800800a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10f      	bne.n	8008032 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008016:	f003 0320 	and.w	r3, r3, #32
 800801a:	2b00      	cmp	r3, #0
 800801c:	d009      	beq.n	8008032 <HAL_UART_IRQHandler+0x66>
 800801e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008022:	f003 0320 	and.w	r3, r3, #32
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fc07 	bl	800883e <UART_Receive_IT>
      return;
 8008030:	e256      	b.n	80084e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 80de 	beq.w	80081f8 <HAL_UART_IRQHandler+0x22c>
 800803c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	2b00      	cmp	r3, #0
 8008046:	d106      	bne.n	8008056 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800804c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 80d1 	beq.w	80081f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00b      	beq.n	800807a <HAL_UART_IRQHandler+0xae>
 8008062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806a:	2b00      	cmp	r3, #0
 800806c:	d005      	beq.n	800807a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008072:	f043 0201 	orr.w	r2, r3, #1
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800807a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800807e:	f003 0304 	and.w	r3, r3, #4
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00b      	beq.n	800809e <HAL_UART_IRQHandler+0xd2>
 8008086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	2b00      	cmp	r3, #0
 8008090:	d005      	beq.n	800809e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	f043 0202 	orr.w	r2, r3, #2
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800809e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080a2:	f003 0302 	and.w	r3, r3, #2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00b      	beq.n	80080c2 <HAL_UART_IRQHandler+0xf6>
 80080aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d005      	beq.n	80080c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	f043 0204 	orr.w	r2, r3, #4
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80080c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c6:	f003 0308 	and.w	r3, r3, #8
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d011      	beq.n	80080f2 <HAL_UART_IRQHandler+0x126>
 80080ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080d2:	f003 0320 	and.w	r3, r3, #32
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d105      	bne.n	80080e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80080da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d005      	beq.n	80080f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	f043 0208 	orr.w	r2, r3, #8
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 81ed 	beq.w	80084d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008100:	f003 0320 	and.w	r3, r3, #32
 8008104:	2b00      	cmp	r3, #0
 8008106:	d008      	beq.n	800811a <HAL_UART_IRQHandler+0x14e>
 8008108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800810c:	f003 0320 	and.w	r3, r3, #32
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fb92 	bl	800883e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008124:	2b40      	cmp	r3, #64	; 0x40
 8008126:	bf0c      	ite	eq
 8008128:	2301      	moveq	r3, #1
 800812a:	2300      	movne	r3, #0
 800812c:	b2db      	uxtb	r3, r3
 800812e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008136:	f003 0308 	and.w	r3, r3, #8
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <HAL_UART_IRQHandler+0x17a>
 800813e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008142:	2b00      	cmp	r3, #0
 8008144:	d04f      	beq.n	80081e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fa9a 	bl	8008680 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008156:	2b40      	cmp	r3, #64	; 0x40
 8008158:	d141      	bne.n	80081de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3314      	adds	r3, #20
 8008160:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008168:	e853 3f00 	ldrex	r3, [r3]
 800816c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3314      	adds	r3, #20
 8008182:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008186:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800818a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008192:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008196:	e841 2300 	strex	r3, r2, [r1]
 800819a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800819e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1d9      	bne.n	800815a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d013      	beq.n	80081d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b2:	4a7d      	ldr	r2, [pc, #500]	; (80083a8 <HAL_UART_IRQHandler+0x3dc>)
 80081b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fc fb1b 	bl	80047f6 <HAL_DMA_Abort_IT>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d016      	beq.n	80081f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081d0:	4610      	mov	r0, r2
 80081d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d4:	e00e      	b.n	80081f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f990 	bl	80084fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081dc:	e00a      	b.n	80081f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f98c 	bl	80084fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e4:	e006      	b.n	80081f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f988 	bl	80084fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80081f2:	e170      	b.n	80084d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f4:	bf00      	nop
    return;
 80081f6:	e16e      	b.n	80084d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	f040 814a 	bne.w	8008496 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008206:	f003 0310 	and.w	r3, r3, #16
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 8143 	beq.w	8008496 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008214:	f003 0310 	and.w	r3, r3, #16
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 813c 	beq.w	8008496 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800821e:	2300      	movs	r3, #0
 8008220:	60bb      	str	r3, [r7, #8]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	60bb      	str	r3, [r7, #8]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	60bb      	str	r3, [r7, #8]
 8008232:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823e:	2b40      	cmp	r3, #64	; 0x40
 8008240:	f040 80b4 	bne.w	80083ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008250:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 8140 	beq.w	80084da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800825e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008262:	429a      	cmp	r2, r3
 8008264:	f080 8139 	bcs.w	80084da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800826e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800827a:	f000 8088 	beq.w	800838e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	330c      	adds	r3, #12
 8008284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008288:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800828c:	e853 3f00 	ldrex	r3, [r3]
 8008290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800829c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	330c      	adds	r3, #12
 80082a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80082aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80082ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80082b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80082c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1d9      	bne.n	800827e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3314      	adds	r3, #20
 80082d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082d4:	e853 3f00 	ldrex	r3, [r3]
 80082d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80082da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082dc:	f023 0301 	bic.w	r3, r3, #1
 80082e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3314      	adds	r3, #20
 80082ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80082ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80082f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80082f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082fa:	e841 2300 	strex	r3, r2, [r1]
 80082fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1e1      	bne.n	80082ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	3314      	adds	r3, #20
 800830c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800831c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3314      	adds	r3, #20
 8008326:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800832a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800832c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008330:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008332:	e841 2300 	strex	r3, r2, [r1]
 8008336:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1e3      	bne.n	8008306 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2220      	movs	r2, #32
 8008342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	330c      	adds	r3, #12
 8008352:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008356:	e853 3f00 	ldrex	r3, [r3]
 800835a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800835c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800835e:	f023 0310 	bic.w	r3, r3, #16
 8008362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	330c      	adds	r3, #12
 800836c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008370:	65ba      	str	r2, [r7, #88]	; 0x58
 8008372:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008376:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008378:	e841 2300 	strex	r3, r2, [r1]
 800837c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800837e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1e3      	bne.n	800834c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	4618      	mov	r0, r3
 800838a:	f7fc f9c4 	bl	8004716 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008396:	b29b      	uxth	r3, r3
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	b29b      	uxth	r3, r3
 800839c:	4619      	mov	r1, r3
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f8b6 	bl	8008510 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083a4:	e099      	b.n	80084da <HAL_UART_IRQHandler+0x50e>
 80083a6:	bf00      	nop
 80083a8:	08008747 	.word	0x08008747
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f000 808b 	beq.w	80084de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80083c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 8086 	beq.w	80084de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	330c      	adds	r3, #12
 80083d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083dc:	e853 3f00 	ldrex	r3, [r3]
 80083e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	330c      	adds	r3, #12
 80083f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80083f6:	647a      	str	r2, [r7, #68]	; 0x44
 80083f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083fe:	e841 2300 	strex	r3, r2, [r1]
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1e3      	bne.n	80083d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3314      	adds	r3, #20
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	623b      	str	r3, [r7, #32]
   return(result);
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	f023 0301 	bic.w	r3, r3, #1
 8008420:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3314      	adds	r3, #20
 800842a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800842e:	633a      	str	r2, [r7, #48]	; 0x30
 8008430:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008436:	e841 2300 	strex	r3, r2, [r1]
 800843a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1e3      	bne.n	800840a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2220      	movs	r2, #32
 8008446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	330c      	adds	r3, #12
 8008456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	e853 3f00 	ldrex	r3, [r3]
 800845e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f023 0310 	bic.w	r3, r3, #16
 8008466:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	330c      	adds	r3, #12
 8008470:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008474:	61fa      	str	r2, [r7, #28]
 8008476:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	69b9      	ldr	r1, [r7, #24]
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	617b      	str	r3, [r7, #20]
   return(result);
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e3      	bne.n	8008450 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f83e 	bl	8008510 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008494:	e023      	b.n	80084de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800849a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d009      	beq.n	80084b6 <HAL_UART_IRQHandler+0x4ea>
 80084a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d003      	beq.n	80084b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f95d 	bl	800876e <UART_Transmit_IT>
    return;
 80084b4:	e014      	b.n	80084e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80084b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00e      	beq.n	80084e0 <HAL_UART_IRQHandler+0x514>
 80084c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d008      	beq.n	80084e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f99d 	bl	800880e <UART_EndTransmit_IT>
    return;
 80084d4:	e004      	b.n	80084e0 <HAL_UART_IRQHandler+0x514>
    return;
 80084d6:	bf00      	nop
 80084d8:	e002      	b.n	80084e0 <HAL_UART_IRQHandler+0x514>
      return;
 80084da:	bf00      	nop
 80084dc:	e000      	b.n	80084e0 <HAL_UART_IRQHandler+0x514>
      return;
 80084de:	bf00      	nop
  }
}
 80084e0:	37e8      	adds	r7, #232	; 0xe8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop

080084e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	460b      	mov	r3, r1
 800851a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b090      	sub	sp, #64	; 0x40
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	603b      	str	r3, [r7, #0]
 8008534:	4613      	mov	r3, r2
 8008536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008538:	e050      	b.n	80085dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800853a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800853c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008540:	d04c      	beq.n	80085dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008544:	2b00      	cmp	r3, #0
 8008546:	d007      	beq.n	8008558 <UART_WaitOnFlagUntilTimeout+0x30>
 8008548:	f7fb ffa4 	bl	8004494 <HAL_GetTick>
 800854c:	4602      	mov	r2, r0
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008554:	429a      	cmp	r2, r3
 8008556:	d241      	bcs.n	80085dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	330c      	adds	r3, #12
 800855e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008562:	e853 3f00 	ldrex	r3, [r3]
 8008566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800856e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	330c      	adds	r3, #12
 8008576:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008578:	637a      	str	r2, [r7, #52]	; 0x34
 800857a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800857e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008580:	e841 2300 	strex	r3, r2, [r1]
 8008584:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1e5      	bne.n	8008558 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3314      	adds	r3, #20
 8008592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	e853 3f00 	ldrex	r3, [r3]
 800859a:	613b      	str	r3, [r7, #16]
   return(result);
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f023 0301 	bic.w	r3, r3, #1
 80085a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3314      	adds	r3, #20
 80085aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085ac:	623a      	str	r2, [r7, #32]
 80085ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b0:	69f9      	ldr	r1, [r7, #28]
 80085b2:	6a3a      	ldr	r2, [r7, #32]
 80085b4:	e841 2300 	strex	r3, r2, [r1]
 80085b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1e5      	bne.n	800858c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2220      	movs	r2, #32
 80085c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2220      	movs	r2, #32
 80085cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80085d8:	2303      	movs	r3, #3
 80085da:	e00f      	b.n	80085fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	4013      	ands	r3, r2
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	bf0c      	ite	eq
 80085ec:	2301      	moveq	r3, #1
 80085ee:	2300      	movne	r3, #0
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	461a      	mov	r2, r3
 80085f4:	79fb      	ldrb	r3, [r7, #7]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d09f      	beq.n	800853a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3740      	adds	r7, #64	; 0x40
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	4613      	mov	r3, r2
 8008610:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	88fa      	ldrh	r2, [r7, #6]
 800861c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	88fa      	ldrh	r2, [r7, #6]
 8008622:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2222      	movs	r2, #34	; 0x22
 800862e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d007      	beq.n	8008652 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68da      	ldr	r2, [r3, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008650:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	695a      	ldr	r2, [r3, #20]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f042 0201 	orr.w	r2, r2, #1
 8008660:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68da      	ldr	r2, [r3, #12]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f042 0220 	orr.w	r2, r2, #32
 8008670:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008680:	b480      	push	{r7}
 8008682:	b095      	sub	sp, #84	; 0x54
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	330c      	adds	r3, #12
 800868e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008692:	e853 3f00 	ldrex	r3, [r3]
 8008696:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800869e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	330c      	adds	r3, #12
 80086a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086a8:	643a      	str	r2, [r7, #64]	; 0x40
 80086aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086b0:	e841 2300 	strex	r3, r2, [r1]
 80086b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1e5      	bne.n	8008688 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3314      	adds	r3, #20
 80086c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	e853 3f00 	ldrex	r3, [r3]
 80086ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	f023 0301 	bic.w	r3, r3, #1
 80086d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3314      	adds	r3, #20
 80086da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086e4:	e841 2300 	strex	r3, r2, [r1]
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e5      	bne.n	80086bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d119      	bne.n	800872c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	330c      	adds	r3, #12
 80086fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	e853 3f00 	ldrex	r3, [r3]
 8008706:	60bb      	str	r3, [r7, #8]
   return(result);
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f023 0310 	bic.w	r3, r3, #16
 800870e:	647b      	str	r3, [r7, #68]	; 0x44
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	330c      	adds	r3, #12
 8008716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008718:	61ba      	str	r2, [r7, #24]
 800871a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	6979      	ldr	r1, [r7, #20]
 800871e:	69ba      	ldr	r2, [r7, #24]
 8008720:	e841 2300 	strex	r3, r2, [r1]
 8008724:	613b      	str	r3, [r7, #16]
   return(result);
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e5      	bne.n	80086f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2220      	movs	r2, #32
 8008730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	631a      	str	r2, [r3, #48]	; 0x30
}
 800873a:	bf00      	nop
 800873c:	3754      	adds	r7, #84	; 0x54
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008752:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f7ff fecb 	bl	80084fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008766:	bf00      	nop
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800876e:	b480      	push	{r7}
 8008770:	b085      	sub	sp, #20
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b21      	cmp	r3, #33	; 0x21
 8008780:	d13e      	bne.n	8008800 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800878a:	d114      	bne.n	80087b6 <UART_Transmit_IT+0x48>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d110      	bne.n	80087b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a1b      	ldr	r3, [r3, #32]
 8008798:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	1c9a      	adds	r2, r3, #2
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	621a      	str	r2, [r3, #32]
 80087b4:	e008      	b.n	80087c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	1c59      	adds	r1, r3, #1
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	6211      	str	r1, [r2, #32]
 80087c0:	781a      	ldrb	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	3b01      	subs	r3, #1
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	4619      	mov	r1, r3
 80087d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10f      	bne.n	80087fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68da      	ldr	r2, [r3, #12]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68da      	ldr	r2, [r3, #12]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	e000      	b.n	8008802 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008800:	2302      	movs	r3, #2
  }
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b082      	sub	sp, #8
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68da      	ldr	r2, [r3, #12]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008824:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2220      	movs	r2, #32
 800882a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7ff fe5a 	bl	80084e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b08c      	sub	sp, #48	; 0x30
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b22      	cmp	r3, #34	; 0x22
 8008850:	f040 80ab 	bne.w	80089aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800885c:	d117      	bne.n	800888e <UART_Receive_IT+0x50>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d113      	bne.n	800888e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008866:	2300      	movs	r3, #0
 8008868:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	b29b      	uxth	r3, r3
 8008878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800887c:	b29a      	uxth	r2, r3
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008886:	1c9a      	adds	r2, r3, #2
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	629a      	str	r2, [r3, #40]	; 0x28
 800888c:	e026      	b.n	80088dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008892:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008894:	2300      	movs	r3, #0
 8008896:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a0:	d007      	beq.n	80088b2 <UART_Receive_IT+0x74>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10a      	bne.n	80088c0 <UART_Receive_IT+0x82>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d106      	bne.n	80088c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	b2da      	uxtb	r2, r3
 80088ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088bc:	701a      	strb	r2, [r3, #0]
 80088be:	e008      	b.n	80088d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	3b01      	subs	r3, #1
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	4619      	mov	r1, r3
 80088ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d15a      	bne.n	80089a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68da      	ldr	r2, [r3, #12]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f022 0220 	bic.w	r2, r2, #32
 80088fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800890e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	695a      	ldr	r2, [r3, #20]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0201 	bic.w	r2, r2, #1
 800891e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2220      	movs	r2, #32
 8008924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892c:	2b01      	cmp	r3, #1
 800892e:	d135      	bne.n	800899c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	330c      	adds	r3, #12
 800893c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	613b      	str	r3, [r7, #16]
   return(result);
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f023 0310 	bic.w	r3, r3, #16
 800894c:	627b      	str	r3, [r7, #36]	; 0x24
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	330c      	adds	r3, #12
 8008954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008956:	623a      	str	r2, [r7, #32]
 8008958:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895a:	69f9      	ldr	r1, [r7, #28]
 800895c:	6a3a      	ldr	r2, [r7, #32]
 800895e:	e841 2300 	strex	r3, r2, [r1]
 8008962:	61bb      	str	r3, [r7, #24]
   return(result);
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1e5      	bne.n	8008936 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 0310 	and.w	r3, r3, #16
 8008974:	2b10      	cmp	r3, #16
 8008976:	d10a      	bne.n	800898e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008978:	2300      	movs	r3, #0
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff fdbb 	bl	8008510 <HAL_UARTEx_RxEventCallback>
 800899a:	e002      	b.n	80089a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7f8 fef7 	bl	8001790 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	e002      	b.n	80089ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	e000      	b.n	80089ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80089aa:	2302      	movs	r3, #2
  }
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3730      	adds	r7, #48	; 0x30
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089b8:	b0c0      	sub	sp, #256	; 0x100
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80089cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d0:	68d9      	ldr	r1, [r3, #12]
 80089d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	ea40 0301 	orr.w	r3, r0, r1
 80089dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089e2:	689a      	ldr	r2, [r3, #8]
 80089e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	431a      	orrs	r2, r3
 80089ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	431a      	orrs	r2, r3
 80089f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a0c:	f021 010c 	bic.w	r1, r1, #12
 8008a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a1a:	430b      	orrs	r3, r1
 8008a1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a2e:	6999      	ldr	r1, [r3, #24]
 8008a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	ea40 0301 	orr.w	r3, r0, r1
 8008a3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	4b8f      	ldr	r3, [pc, #572]	; (8008c80 <UART_SetConfig+0x2cc>)
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d005      	beq.n	8008a54 <UART_SetConfig+0xa0>
 8008a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	4b8d      	ldr	r3, [pc, #564]	; (8008c84 <UART_SetConfig+0x2d0>)
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d104      	bne.n	8008a5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a54:	f7fd fcc4 	bl	80063e0 <HAL_RCC_GetPCLK2Freq>
 8008a58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008a5c:	e003      	b.n	8008a66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a5e:	f7fd fcab 	bl	80063b8 <HAL_RCC_GetPCLK1Freq>
 8008a62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a70:	f040 810c 	bne.w	8008c8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008a82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008a86:	4622      	mov	r2, r4
 8008a88:	462b      	mov	r3, r5
 8008a8a:	1891      	adds	r1, r2, r2
 8008a8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a8e:	415b      	adcs	r3, r3
 8008a90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008a96:	4621      	mov	r1, r4
 8008a98:	eb12 0801 	adds.w	r8, r2, r1
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	eb43 0901 	adc.w	r9, r3, r1
 8008aa2:	f04f 0200 	mov.w	r2, #0
 8008aa6:	f04f 0300 	mov.w	r3, #0
 8008aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ab6:	4690      	mov	r8, r2
 8008ab8:	4699      	mov	r9, r3
 8008aba:	4623      	mov	r3, r4
 8008abc:	eb18 0303 	adds.w	r3, r8, r3
 8008ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ac4:	462b      	mov	r3, r5
 8008ac6:	eb49 0303 	adc.w	r3, r9, r3
 8008aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ada:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008ade:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	18db      	adds	r3, r3, r3
 8008ae6:	653b      	str	r3, [r7, #80]	; 0x50
 8008ae8:	4613      	mov	r3, r2
 8008aea:	eb42 0303 	adc.w	r3, r2, r3
 8008aee:	657b      	str	r3, [r7, #84]	; 0x54
 8008af0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008af4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008af8:	f7f8 f876 	bl	8000be8 <__aeabi_uldivmod>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4b61      	ldr	r3, [pc, #388]	; (8008c88 <UART_SetConfig+0x2d4>)
 8008b02:	fba3 2302 	umull	r2, r3, r3, r2
 8008b06:	095b      	lsrs	r3, r3, #5
 8008b08:	011c      	lsls	r4, r3, #4
 8008b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008b18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008b1c:	4642      	mov	r2, r8
 8008b1e:	464b      	mov	r3, r9
 8008b20:	1891      	adds	r1, r2, r2
 8008b22:	64b9      	str	r1, [r7, #72]	; 0x48
 8008b24:	415b      	adcs	r3, r3
 8008b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b2c:	4641      	mov	r1, r8
 8008b2e:	eb12 0a01 	adds.w	sl, r2, r1
 8008b32:	4649      	mov	r1, r9
 8008b34:	eb43 0b01 	adc.w	fp, r3, r1
 8008b38:	f04f 0200 	mov.w	r2, #0
 8008b3c:	f04f 0300 	mov.w	r3, #0
 8008b40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b4c:	4692      	mov	sl, r2
 8008b4e:	469b      	mov	fp, r3
 8008b50:	4643      	mov	r3, r8
 8008b52:	eb1a 0303 	adds.w	r3, sl, r3
 8008b56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b5a:	464b      	mov	r3, r9
 8008b5c:	eb4b 0303 	adc.w	r3, fp, r3
 8008b60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008b74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	18db      	adds	r3, r3, r3
 8008b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8008b7e:	4613      	mov	r3, r2
 8008b80:	eb42 0303 	adc.w	r3, r2, r3
 8008b84:	647b      	str	r3, [r7, #68]	; 0x44
 8008b86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008b8e:	f7f8 f82b 	bl	8000be8 <__aeabi_uldivmod>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4611      	mov	r1, r2
 8008b98:	4b3b      	ldr	r3, [pc, #236]	; (8008c88 <UART_SetConfig+0x2d4>)
 8008b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8008b9e:	095b      	lsrs	r3, r3, #5
 8008ba0:	2264      	movs	r2, #100	; 0x64
 8008ba2:	fb02 f303 	mul.w	r3, r2, r3
 8008ba6:	1acb      	subs	r3, r1, r3
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008bae:	4b36      	ldr	r3, [pc, #216]	; (8008c88 <UART_SetConfig+0x2d4>)
 8008bb0:	fba3 2302 	umull	r2, r3, r3, r2
 8008bb4:	095b      	lsrs	r3, r3, #5
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008bbc:	441c      	add	r4, r3
 8008bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008bcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008bd0:	4642      	mov	r2, r8
 8008bd2:	464b      	mov	r3, r9
 8008bd4:	1891      	adds	r1, r2, r2
 8008bd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008bd8:	415b      	adcs	r3, r3
 8008bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008be0:	4641      	mov	r1, r8
 8008be2:	1851      	adds	r1, r2, r1
 8008be4:	6339      	str	r1, [r7, #48]	; 0x30
 8008be6:	4649      	mov	r1, r9
 8008be8:	414b      	adcs	r3, r1
 8008bea:	637b      	str	r3, [r7, #52]	; 0x34
 8008bec:	f04f 0200 	mov.w	r2, #0
 8008bf0:	f04f 0300 	mov.w	r3, #0
 8008bf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008bf8:	4659      	mov	r1, fp
 8008bfa:	00cb      	lsls	r3, r1, #3
 8008bfc:	4651      	mov	r1, sl
 8008bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c02:	4651      	mov	r1, sl
 8008c04:	00ca      	lsls	r2, r1, #3
 8008c06:	4610      	mov	r0, r2
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	4642      	mov	r2, r8
 8008c0e:	189b      	adds	r3, r3, r2
 8008c10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c14:	464b      	mov	r3, r9
 8008c16:	460a      	mov	r2, r1
 8008c18:	eb42 0303 	adc.w	r3, r2, r3
 8008c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008c30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008c34:	460b      	mov	r3, r1
 8008c36:	18db      	adds	r3, r3, r3
 8008c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	eb42 0303 	adc.w	r3, r2, r3
 8008c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008c4a:	f7f7 ffcd 	bl	8000be8 <__aeabi_uldivmod>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4b0d      	ldr	r3, [pc, #52]	; (8008c88 <UART_SetConfig+0x2d4>)
 8008c54:	fba3 1302 	umull	r1, r3, r3, r2
 8008c58:	095b      	lsrs	r3, r3, #5
 8008c5a:	2164      	movs	r1, #100	; 0x64
 8008c5c:	fb01 f303 	mul.w	r3, r1, r3
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	00db      	lsls	r3, r3, #3
 8008c64:	3332      	adds	r3, #50	; 0x32
 8008c66:	4a08      	ldr	r2, [pc, #32]	; (8008c88 <UART_SetConfig+0x2d4>)
 8008c68:	fba2 2303 	umull	r2, r3, r2, r3
 8008c6c:	095b      	lsrs	r3, r3, #5
 8008c6e:	f003 0207 	and.w	r2, r3, #7
 8008c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4422      	add	r2, r4
 8008c7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c7c:	e106      	b.n	8008e8c <UART_SetConfig+0x4d8>
 8008c7e:	bf00      	nop
 8008c80:	40011000 	.word	0x40011000
 8008c84:	40011400 	.word	0x40011400
 8008c88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c90:	2200      	movs	r2, #0
 8008c92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008c9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008c9e:	4642      	mov	r2, r8
 8008ca0:	464b      	mov	r3, r9
 8008ca2:	1891      	adds	r1, r2, r2
 8008ca4:	6239      	str	r1, [r7, #32]
 8008ca6:	415b      	adcs	r3, r3
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8008caa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008cae:	4641      	mov	r1, r8
 8008cb0:	1854      	adds	r4, r2, r1
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	eb43 0501 	adc.w	r5, r3, r1
 8008cb8:	f04f 0200 	mov.w	r2, #0
 8008cbc:	f04f 0300 	mov.w	r3, #0
 8008cc0:	00eb      	lsls	r3, r5, #3
 8008cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008cc6:	00e2      	lsls	r2, r4, #3
 8008cc8:	4614      	mov	r4, r2
 8008cca:	461d      	mov	r5, r3
 8008ccc:	4643      	mov	r3, r8
 8008cce:	18e3      	adds	r3, r4, r3
 8008cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008cd4:	464b      	mov	r3, r9
 8008cd6:	eb45 0303 	adc.w	r3, r5, r3
 8008cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008cea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008cee:	f04f 0200 	mov.w	r2, #0
 8008cf2:	f04f 0300 	mov.w	r3, #0
 8008cf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	008b      	lsls	r3, r1, #2
 8008cfe:	4621      	mov	r1, r4
 8008d00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d04:	4621      	mov	r1, r4
 8008d06:	008a      	lsls	r2, r1, #2
 8008d08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008d0c:	f7f7 ff6c 	bl	8000be8 <__aeabi_uldivmod>
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	4b60      	ldr	r3, [pc, #384]	; (8008e98 <UART_SetConfig+0x4e4>)
 8008d16:	fba3 2302 	umull	r2, r3, r3, r2
 8008d1a:	095b      	lsrs	r3, r3, #5
 8008d1c:	011c      	lsls	r4, r3, #4
 8008d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d22:	2200      	movs	r2, #0
 8008d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008d2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008d30:	4642      	mov	r2, r8
 8008d32:	464b      	mov	r3, r9
 8008d34:	1891      	adds	r1, r2, r2
 8008d36:	61b9      	str	r1, [r7, #24]
 8008d38:	415b      	adcs	r3, r3
 8008d3a:	61fb      	str	r3, [r7, #28]
 8008d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d40:	4641      	mov	r1, r8
 8008d42:	1851      	adds	r1, r2, r1
 8008d44:	6139      	str	r1, [r7, #16]
 8008d46:	4649      	mov	r1, r9
 8008d48:	414b      	adcs	r3, r1
 8008d4a:	617b      	str	r3, [r7, #20]
 8008d4c:	f04f 0200 	mov.w	r2, #0
 8008d50:	f04f 0300 	mov.w	r3, #0
 8008d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d58:	4659      	mov	r1, fp
 8008d5a:	00cb      	lsls	r3, r1, #3
 8008d5c:	4651      	mov	r1, sl
 8008d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d62:	4651      	mov	r1, sl
 8008d64:	00ca      	lsls	r2, r1, #3
 8008d66:	4610      	mov	r0, r2
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	4642      	mov	r2, r8
 8008d6e:	189b      	adds	r3, r3, r2
 8008d70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d74:	464b      	mov	r3, r9
 8008d76:	460a      	mov	r2, r1
 8008d78:	eb42 0303 	adc.w	r3, r2, r3
 8008d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008d8c:	f04f 0200 	mov.w	r2, #0
 8008d90:	f04f 0300 	mov.w	r3, #0
 8008d94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008d98:	4649      	mov	r1, r9
 8008d9a:	008b      	lsls	r3, r1, #2
 8008d9c:	4641      	mov	r1, r8
 8008d9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008da2:	4641      	mov	r1, r8
 8008da4:	008a      	lsls	r2, r1, #2
 8008da6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008daa:	f7f7 ff1d 	bl	8000be8 <__aeabi_uldivmod>
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	4611      	mov	r1, r2
 8008db4:	4b38      	ldr	r3, [pc, #224]	; (8008e98 <UART_SetConfig+0x4e4>)
 8008db6:	fba3 2301 	umull	r2, r3, r3, r1
 8008dba:	095b      	lsrs	r3, r3, #5
 8008dbc:	2264      	movs	r2, #100	; 0x64
 8008dbe:	fb02 f303 	mul.w	r3, r2, r3
 8008dc2:	1acb      	subs	r3, r1, r3
 8008dc4:	011b      	lsls	r3, r3, #4
 8008dc6:	3332      	adds	r3, #50	; 0x32
 8008dc8:	4a33      	ldr	r2, [pc, #204]	; (8008e98 <UART_SetConfig+0x4e4>)
 8008dca:	fba2 2303 	umull	r2, r3, r2, r3
 8008dce:	095b      	lsrs	r3, r3, #5
 8008dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dd4:	441c      	add	r4, r3
 8008dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dda:	2200      	movs	r2, #0
 8008ddc:	673b      	str	r3, [r7, #112]	; 0x70
 8008dde:	677a      	str	r2, [r7, #116]	; 0x74
 8008de0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008de4:	4642      	mov	r2, r8
 8008de6:	464b      	mov	r3, r9
 8008de8:	1891      	adds	r1, r2, r2
 8008dea:	60b9      	str	r1, [r7, #8]
 8008dec:	415b      	adcs	r3, r3
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008df4:	4641      	mov	r1, r8
 8008df6:	1851      	adds	r1, r2, r1
 8008df8:	6039      	str	r1, [r7, #0]
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	414b      	adcs	r3, r1
 8008dfe:	607b      	str	r3, [r7, #4]
 8008e00:	f04f 0200 	mov.w	r2, #0
 8008e04:	f04f 0300 	mov.w	r3, #0
 8008e08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e0c:	4659      	mov	r1, fp
 8008e0e:	00cb      	lsls	r3, r1, #3
 8008e10:	4651      	mov	r1, sl
 8008e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e16:	4651      	mov	r1, sl
 8008e18:	00ca      	lsls	r2, r1, #3
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	4603      	mov	r3, r0
 8008e20:	4642      	mov	r2, r8
 8008e22:	189b      	adds	r3, r3, r2
 8008e24:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e26:	464b      	mov	r3, r9
 8008e28:	460a      	mov	r2, r1
 8008e2a:	eb42 0303 	adc.w	r3, r2, r3
 8008e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	663b      	str	r3, [r7, #96]	; 0x60
 8008e3a:	667a      	str	r2, [r7, #100]	; 0x64
 8008e3c:	f04f 0200 	mov.w	r2, #0
 8008e40:	f04f 0300 	mov.w	r3, #0
 8008e44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008e48:	4649      	mov	r1, r9
 8008e4a:	008b      	lsls	r3, r1, #2
 8008e4c:	4641      	mov	r1, r8
 8008e4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e52:	4641      	mov	r1, r8
 8008e54:	008a      	lsls	r2, r1, #2
 8008e56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008e5a:	f7f7 fec5 	bl	8000be8 <__aeabi_uldivmod>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	460b      	mov	r3, r1
 8008e62:	4b0d      	ldr	r3, [pc, #52]	; (8008e98 <UART_SetConfig+0x4e4>)
 8008e64:	fba3 1302 	umull	r1, r3, r3, r2
 8008e68:	095b      	lsrs	r3, r3, #5
 8008e6a:	2164      	movs	r1, #100	; 0x64
 8008e6c:	fb01 f303 	mul.w	r3, r1, r3
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	011b      	lsls	r3, r3, #4
 8008e74:	3332      	adds	r3, #50	; 0x32
 8008e76:	4a08      	ldr	r2, [pc, #32]	; (8008e98 <UART_SetConfig+0x4e4>)
 8008e78:	fba2 2303 	umull	r2, r3, r2, r3
 8008e7c:	095b      	lsrs	r3, r3, #5
 8008e7e:	f003 020f 	and.w	r2, r3, #15
 8008e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4422      	add	r2, r4
 8008e8a:	609a      	str	r2, [r3, #8]
}
 8008e8c:	bf00      	nop
 8008e8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008e92:	46bd      	mov	sp, r7
 8008e94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e98:	51eb851f 	.word	0x51eb851f

08008e9c <__NVIC_SetPriority>:
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	6039      	str	r1, [r7, #0]
 8008ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	db0a      	blt.n	8008ec6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	490c      	ldr	r1, [pc, #48]	; (8008ee8 <__NVIC_SetPriority+0x4c>)
 8008eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eba:	0112      	lsls	r2, r2, #4
 8008ebc:	b2d2      	uxtb	r2, r2
 8008ebe:	440b      	add	r3, r1
 8008ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008ec4:	e00a      	b.n	8008edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	4908      	ldr	r1, [pc, #32]	; (8008eec <__NVIC_SetPriority+0x50>)
 8008ecc:	79fb      	ldrb	r3, [r7, #7]
 8008ece:	f003 030f 	and.w	r3, r3, #15
 8008ed2:	3b04      	subs	r3, #4
 8008ed4:	0112      	lsls	r2, r2, #4
 8008ed6:	b2d2      	uxtb	r2, r2
 8008ed8:	440b      	add	r3, r1
 8008eda:	761a      	strb	r2, [r3, #24]
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	e000e100 	.word	0xe000e100
 8008eec:	e000ed00 	.word	0xe000ed00

08008ef0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	f06f 0004 	mvn.w	r0, #4
 8008efa:	f7ff ffcf 	bl	8008e9c <__NVIC_SetPriority>
#endif
}
 8008efe:	bf00      	nop
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f0a:	f3ef 8305 	mrs	r3, IPSR
 8008f0e:	603b      	str	r3, [r7, #0]
  return(result);
 8008f10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008f16:	f06f 0305 	mvn.w	r3, #5
 8008f1a:	607b      	str	r3, [r7, #4]
 8008f1c:	e00c      	b.n	8008f38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f1e:	4b0a      	ldr	r3, [pc, #40]	; (8008f48 <osKernelInitialize+0x44>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d105      	bne.n	8008f32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f26:	4b08      	ldr	r3, [pc, #32]	; (8008f48 <osKernelInitialize+0x44>)
 8008f28:	2201      	movs	r2, #1
 8008f2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	607b      	str	r3, [r7, #4]
 8008f30:	e002      	b.n	8008f38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f32:	f04f 33ff 	mov.w	r3, #4294967295
 8008f36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f38:	687b      	ldr	r3, [r7, #4]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	200009c0 	.word	0x200009c0

08008f4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f52:	f3ef 8305 	mrs	r3, IPSR
 8008f56:	603b      	str	r3, [r7, #0]
  return(result);
 8008f58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f5e:	f06f 0305 	mvn.w	r3, #5
 8008f62:	607b      	str	r3, [r7, #4]
 8008f64:	e010      	b.n	8008f88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f66:	4b0b      	ldr	r3, [pc, #44]	; (8008f94 <osKernelStart+0x48>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d109      	bne.n	8008f82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f6e:	f7ff ffbf 	bl	8008ef0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f72:	4b08      	ldr	r3, [pc, #32]	; (8008f94 <osKernelStart+0x48>)
 8008f74:	2202      	movs	r2, #2
 8008f76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f78:	f001 f87c 	bl	800a074 <vTaskStartScheduler>
      stat = osOK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	607b      	str	r3, [r7, #4]
 8008f80:	e002      	b.n	8008f88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f82:	f04f 33ff 	mov.w	r3, #4294967295
 8008f86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f88:	687b      	ldr	r3, [r7, #4]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	200009c0 	.word	0x200009c0

08008f98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b08e      	sub	sp, #56	; 0x38
 8008f9c:	af04      	add	r7, sp, #16
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fa8:	f3ef 8305 	mrs	r3, IPSR
 8008fac:	617b      	str	r3, [r7, #20]
  return(result);
 8008fae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d17e      	bne.n	80090b2 <osThreadNew+0x11a>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d07b      	beq.n	80090b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008fba:	2380      	movs	r3, #128	; 0x80
 8008fbc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008fbe:	2318      	movs	r3, #24
 8008fc0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d045      	beq.n	800905e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d002      	beq.n	8008fe0 <osThreadNew+0x48>
        name = attr->name;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d008      	beq.n	8009006 <osThreadNew+0x6e>
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	2b38      	cmp	r3, #56	; 0x38
 8008ff8:	d805      	bhi.n	8009006 <osThreadNew+0x6e>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <osThreadNew+0x72>
        return (NULL);
 8009006:	2300      	movs	r3, #0
 8009008:	e054      	b.n	80090b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d003      	beq.n	800901a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	089b      	lsrs	r3, r3, #2
 8009018:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00e      	beq.n	8009040 <osThreadNew+0xa8>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	2ba7      	cmp	r3, #167	; 0xa7
 8009028:	d90a      	bls.n	8009040 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800902e:	2b00      	cmp	r3, #0
 8009030:	d006      	beq.n	8009040 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d002      	beq.n	8009040 <osThreadNew+0xa8>
        mem = 1;
 800903a:	2301      	movs	r3, #1
 800903c:	61bb      	str	r3, [r7, #24]
 800903e:	e010      	b.n	8009062 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10c      	bne.n	8009062 <osThreadNew+0xca>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d108      	bne.n	8009062 <osThreadNew+0xca>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d104      	bne.n	8009062 <osThreadNew+0xca>
          mem = 0;
 8009058:	2300      	movs	r3, #0
 800905a:	61bb      	str	r3, [r7, #24]
 800905c:	e001      	b.n	8009062 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d110      	bne.n	800908a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009070:	9202      	str	r2, [sp, #8]
 8009072:	9301      	str	r3, [sp, #4]
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	6a3a      	ldr	r2, [r7, #32]
 800907c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f000 fe0c 	bl	8009c9c <xTaskCreateStatic>
 8009084:	4603      	mov	r3, r0
 8009086:	613b      	str	r3, [r7, #16]
 8009088:	e013      	b.n	80090b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d110      	bne.n	80090b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009090:	6a3b      	ldr	r3, [r7, #32]
 8009092:	b29a      	uxth	r2, r3
 8009094:	f107 0310 	add.w	r3, r7, #16
 8009098:	9301      	str	r3, [sp, #4]
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f000 fe57 	bl	8009d56 <xTaskCreate>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d001      	beq.n	80090b2 <osThreadNew+0x11a>
            hTask = NULL;
 80090ae:	2300      	movs	r3, #0
 80090b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80090b2:	693b      	ldr	r3, [r7, #16]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3728      	adds	r7, #40	; 0x28
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090c4:	f3ef 8305 	mrs	r3, IPSR
 80090c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80090ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d003      	beq.n	80090d8 <osDelay+0x1c>
    stat = osErrorISR;
 80090d0:	f06f 0305 	mvn.w	r3, #5
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	e007      	b.n	80090e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80090d8:	2300      	movs	r3, #0
 80090da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 ff92 	bl	800a00c <vTaskDelay>
    }
  }

  return (stat);
 80090e8:	68fb      	ldr	r3, [r7, #12]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
	...

080090f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	4a07      	ldr	r2, [pc, #28]	; (8009120 <vApplicationGetIdleTaskMemory+0x2c>)
 8009104:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	4a06      	ldr	r2, [pc, #24]	; (8009124 <vApplicationGetIdleTaskMemory+0x30>)
 800910a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2280      	movs	r2, #128	; 0x80
 8009110:	601a      	str	r2, [r3, #0]
}
 8009112:	bf00      	nop
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	200009c4 	.word	0x200009c4
 8009124:	20000a6c 	.word	0x20000a6c

08009128 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4a07      	ldr	r2, [pc, #28]	; (8009154 <vApplicationGetTimerTaskMemory+0x2c>)
 8009138:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	4a06      	ldr	r2, [pc, #24]	; (8009158 <vApplicationGetTimerTaskMemory+0x30>)
 800913e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009146:	601a      	str	r2, [r3, #0]
}
 8009148:	bf00      	nop
 800914a:	3714      	adds	r7, #20
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr
 8009154:	20000c6c 	.word	0x20000c6c
 8009158:	20000d14 	.word	0x20000d14

0800915c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f103 0208 	add.w	r2, r3, #8
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f04f 32ff 	mov.w	r2, #4294967295
 8009174:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f103 0208 	add.w	r2, r3, #8
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f103 0208 	add.w	r2, r3, #8
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091aa:	bf00      	nop
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091b6:	b480      	push	{r7}
 80091b8:	b085      	sub	sp, #20
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	601a      	str	r2, [r3, #0]
}
 80091f2:	bf00      	nop
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091fe:	b480      	push	{r7}
 8009200:	b085      	sub	sp, #20
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009214:	d103      	bne.n	800921e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	e00c      	b.n	8009238 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	3308      	adds	r3, #8
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	e002      	b.n	800922c <vListInsert+0x2e>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	429a      	cmp	r2, r3
 8009236:	d2f6      	bcs.n	8009226 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	685a      	ldr	r2, [r3, #4]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	683a      	ldr	r2, [r7, #0]
 8009246:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	601a      	str	r2, [r3, #0]
}
 8009264:	bf00      	nop
 8009266:	3714      	adds	r7, #20
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	6892      	ldr	r2, [r2, #8]
 8009286:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	6852      	ldr	r2, [r2, #4]
 8009290:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	429a      	cmp	r2, r3
 800929a:	d103      	bne.n	80092a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	689a      	ldr	r2, [r3, #8]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	1e5a      	subs	r2, r3, #1
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10a      	bne.n	80092ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092dc:	f383 8811 	msr	BASEPRI, r3
 80092e0:	f3bf 8f6f 	isb	sy
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80092ea:	bf00      	nop
 80092ec:	e7fe      	b.n	80092ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80092ee:	f002 f879 	bl	800b3e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092fa:	68f9      	ldr	r1, [r7, #12]
 80092fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092fe:	fb01 f303 	mul.w	r3, r1, r3
 8009302:	441a      	add	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800931e:	3b01      	subs	r3, #1
 8009320:	68f9      	ldr	r1, [r7, #12]
 8009322:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009324:	fb01 f303 	mul.w	r3, r1, r3
 8009328:	441a      	add	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	22ff      	movs	r2, #255	; 0xff
 8009332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	22ff      	movs	r2, #255	; 0xff
 800933a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d114      	bne.n	800936e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01a      	beq.n	8009382 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	3310      	adds	r3, #16
 8009350:	4618      	mov	r0, r3
 8009352:	f001 f929 	bl	800a5a8 <xTaskRemoveFromEventList>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d012      	beq.n	8009382 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800935c:	4b0c      	ldr	r3, [pc, #48]	; (8009390 <xQueueGenericReset+0xcc>)
 800935e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	e009      	b.n	8009382 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	3310      	adds	r3, #16
 8009372:	4618      	mov	r0, r3
 8009374:	f7ff fef2 	bl	800915c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	3324      	adds	r3, #36	; 0x24
 800937c:	4618      	mov	r0, r3
 800937e:	f7ff feed 	bl	800915c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009382:	f002 f85f 	bl	800b444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009386:	2301      	movs	r3, #1
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	e000ed04 	.word	0xe000ed04

08009394 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009394:	b580      	push	{r7, lr}
 8009396:	b08e      	sub	sp, #56	; 0x38
 8009398:	af02      	add	r7, sp, #8
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
 80093a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10a      	bne.n	80093be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80093a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ac:	f383 8811 	msr	BASEPRI, r3
 80093b0:	f3bf 8f6f 	isb	sy
 80093b4:	f3bf 8f4f 	dsb	sy
 80093b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80093ba:	bf00      	nop
 80093bc:	e7fe      	b.n	80093bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10a      	bne.n	80093da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80093c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093d6:	bf00      	nop
 80093d8:	e7fe      	b.n	80093d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <xQueueGenericCreateStatic+0x52>
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <xQueueGenericCreateStatic+0x56>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e000      	b.n	80093ec <xQueueGenericCreateStatic+0x58>
 80093ea:	2300      	movs	r3, #0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10a      	bne.n	8009406 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	623b      	str	r3, [r7, #32]
}
 8009402:	bf00      	nop
 8009404:	e7fe      	b.n	8009404 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d102      	bne.n	8009412 <xQueueGenericCreateStatic+0x7e>
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <xQueueGenericCreateStatic+0x82>
 8009412:	2301      	movs	r3, #1
 8009414:	e000      	b.n	8009418 <xQueueGenericCreateStatic+0x84>
 8009416:	2300      	movs	r3, #0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10a      	bne.n	8009432 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800941c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	61fb      	str	r3, [r7, #28]
}
 800942e:	bf00      	nop
 8009430:	e7fe      	b.n	8009430 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009432:	2350      	movs	r3, #80	; 0x50
 8009434:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	2b50      	cmp	r3, #80	; 0x50
 800943a:	d00a      	beq.n	8009452 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	61bb      	str	r3, [r7, #24]
}
 800944e:	bf00      	nop
 8009450:	e7fe      	b.n	8009450 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009452:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00d      	beq.n	800947a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009460:	2201      	movs	r2, #1
 8009462:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009466:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800946a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	4613      	mov	r3, r2
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	68b9      	ldr	r1, [r7, #8]
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 f805 	bl	8009484 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800947a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800947c:	4618      	mov	r0, r3
 800947e:	3730      	adds	r7, #48	; 0x30
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
 8009490:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d103      	bne.n	80094a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	e002      	b.n	80094a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094b2:	2101      	movs	r1, #1
 80094b4:	69b8      	ldr	r0, [r7, #24]
 80094b6:	f7ff ff05 	bl	80092c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	78fa      	ldrb	r2, [r7, #3]
 80094be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094c2:	bf00      	nop
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
	...

080094cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b08e      	sub	sp, #56	; 0x38
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
 80094d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094da:	2300      	movs	r3, #0
 80094dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10a      	bne.n	80094fe <xQueueGenericSend+0x32>
	__asm volatile
 80094e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094fa:	bf00      	nop
 80094fc:	e7fe      	b.n	80094fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d103      	bne.n	800950c <xQueueGenericSend+0x40>
 8009504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009508:	2b00      	cmp	r3, #0
 800950a:	d101      	bne.n	8009510 <xQueueGenericSend+0x44>
 800950c:	2301      	movs	r3, #1
 800950e:	e000      	b.n	8009512 <xQueueGenericSend+0x46>
 8009510:	2300      	movs	r3, #0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10a      	bne.n	800952c <xQueueGenericSend+0x60>
	__asm volatile
 8009516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009528:	bf00      	nop
 800952a:	e7fe      	b.n	800952a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	2b02      	cmp	r3, #2
 8009530:	d103      	bne.n	800953a <xQueueGenericSend+0x6e>
 8009532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009536:	2b01      	cmp	r3, #1
 8009538:	d101      	bne.n	800953e <xQueueGenericSend+0x72>
 800953a:	2301      	movs	r3, #1
 800953c:	e000      	b.n	8009540 <xQueueGenericSend+0x74>
 800953e:	2300      	movs	r3, #0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10a      	bne.n	800955a <xQueueGenericSend+0x8e>
	__asm volatile
 8009544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009548:	f383 8811 	msr	BASEPRI, r3
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	f3bf 8f4f 	dsb	sy
 8009554:	623b      	str	r3, [r7, #32]
}
 8009556:	bf00      	nop
 8009558:	e7fe      	b.n	8009558 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800955a:	f001 f9e7 	bl	800a92c <xTaskGetSchedulerState>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d102      	bne.n	800956a <xQueueGenericSend+0x9e>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <xQueueGenericSend+0xa2>
 800956a:	2301      	movs	r3, #1
 800956c:	e000      	b.n	8009570 <xQueueGenericSend+0xa4>
 800956e:	2300      	movs	r3, #0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <xQueueGenericSend+0xbe>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	61fb      	str	r3, [r7, #28]
}
 8009586:	bf00      	nop
 8009588:	e7fe      	b.n	8009588 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800958a:	f001 ff2b 	bl	800b3e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800958e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009596:	429a      	cmp	r2, r3
 8009598:	d302      	bcc.n	80095a0 <xQueueGenericSend+0xd4>
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	2b02      	cmp	r3, #2
 800959e:	d129      	bne.n	80095f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	68b9      	ldr	r1, [r7, #8]
 80095a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095a6:	f000 fa0b 	bl	80099c0 <prvCopyDataToQueue>
 80095aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d010      	beq.n	80095d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b6:	3324      	adds	r3, #36	; 0x24
 80095b8:	4618      	mov	r0, r3
 80095ba:	f000 fff5 	bl	800a5a8 <xTaskRemoveFromEventList>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d013      	beq.n	80095ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095c4:	4b3f      	ldr	r3, [pc, #252]	; (80096c4 <xQueueGenericSend+0x1f8>)
 80095c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ca:	601a      	str	r2, [r3, #0]
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	e00a      	b.n	80095ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d007      	beq.n	80095ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095dc:	4b39      	ldr	r3, [pc, #228]	; (80096c4 <xQueueGenericSend+0x1f8>)
 80095de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095ec:	f001 ff2a 	bl	800b444 <vPortExitCritical>
				return pdPASS;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e063      	b.n	80096bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d103      	bne.n	8009602 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095fa:	f001 ff23 	bl	800b444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095fe:	2300      	movs	r3, #0
 8009600:	e05c      	b.n	80096bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009604:	2b00      	cmp	r3, #0
 8009606:	d106      	bne.n	8009616 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009608:	f107 0314 	add.w	r3, r7, #20
 800960c:	4618      	mov	r0, r3
 800960e:	f001 f82f 	bl	800a670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009612:	2301      	movs	r3, #1
 8009614:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009616:	f001 ff15 	bl	800b444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800961a:	f000 fd9b 	bl	800a154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800961e:	f001 fee1 	bl	800b3e4 <vPortEnterCritical>
 8009622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009628:	b25b      	sxtb	r3, r3
 800962a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962e:	d103      	bne.n	8009638 <xQueueGenericSend+0x16c>
 8009630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009632:	2200      	movs	r2, #0
 8009634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800963e:	b25b      	sxtb	r3, r3
 8009640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009644:	d103      	bne.n	800964e <xQueueGenericSend+0x182>
 8009646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800964e:	f001 fef9 	bl	800b444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009652:	1d3a      	adds	r2, r7, #4
 8009654:	f107 0314 	add.w	r3, r7, #20
 8009658:	4611      	mov	r1, r2
 800965a:	4618      	mov	r0, r3
 800965c:	f001 f81e 	bl	800a69c <xTaskCheckForTimeOut>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d124      	bne.n	80096b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009666:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009668:	f000 faa2 	bl	8009bb0 <prvIsQueueFull>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d018      	beq.n	80096a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009674:	3310      	adds	r3, #16
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	4611      	mov	r1, r2
 800967a:	4618      	mov	r0, r3
 800967c:	f000 ff44 	bl	800a508 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009682:	f000 fa2d 	bl	8009ae0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009686:	f000 fd73 	bl	800a170 <xTaskResumeAll>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	f47f af7c 	bne.w	800958a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009692:	4b0c      	ldr	r3, [pc, #48]	; (80096c4 <xQueueGenericSend+0x1f8>)
 8009694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009698:	601a      	str	r2, [r3, #0]
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	e772      	b.n	800958a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096a6:	f000 fa1b 	bl	8009ae0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096aa:	f000 fd61 	bl	800a170 <xTaskResumeAll>
 80096ae:	e76c      	b.n	800958a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80096b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096b2:	f000 fa15 	bl	8009ae0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096b6:	f000 fd5b 	bl	800a170 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80096ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3738      	adds	r7, #56	; 0x38
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	e000ed04 	.word	0xe000ed04

080096c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b090      	sub	sp, #64	; 0x40
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
 80096d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80096da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d103      	bne.n	8009704 <xQueueGenericSendFromISR+0x3c>
 80096fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <xQueueGenericSendFromISR+0x40>
 8009704:	2301      	movs	r3, #1
 8009706:	e000      	b.n	800970a <xQueueGenericSendFromISR+0x42>
 8009708:	2300      	movs	r3, #0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10a      	bne.n	8009724 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009720:	bf00      	nop
 8009722:	e7fe      	b.n	8009722 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	2b02      	cmp	r3, #2
 8009728:	d103      	bne.n	8009732 <xQueueGenericSendFromISR+0x6a>
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800972e:	2b01      	cmp	r3, #1
 8009730:	d101      	bne.n	8009736 <xQueueGenericSendFromISR+0x6e>
 8009732:	2301      	movs	r3, #1
 8009734:	e000      	b.n	8009738 <xQueueGenericSendFromISR+0x70>
 8009736:	2300      	movs	r3, #0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	623b      	str	r3, [r7, #32]
}
 800974e:	bf00      	nop
 8009750:	e7fe      	b.n	8009750 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009752:	f001 ff29 	bl	800b5a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009756:	f3ef 8211 	mrs	r2, BASEPRI
 800975a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	61fa      	str	r2, [r7, #28]
 800976c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800976e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009770:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800977a:	429a      	cmp	r2, r3
 800977c:	d302      	bcc.n	8009784 <xQueueGenericSendFromISR+0xbc>
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b02      	cmp	r3, #2
 8009782:	d12f      	bne.n	80097e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800978a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800978e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009792:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	68b9      	ldr	r1, [r7, #8]
 8009798:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800979a:	f000 f911 	bl	80099c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800979e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80097a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a6:	d112      	bne.n	80097ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d016      	beq.n	80097de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b2:	3324      	adds	r3, #36	; 0x24
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 fef7 	bl	800a5a8 <xTaskRemoveFromEventList>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00e      	beq.n	80097de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00b      	beq.n	80097de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	e007      	b.n	80097de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097d2:	3301      	adds	r3, #1
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	b25a      	sxtb	r2, r3
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80097de:	2301      	movs	r3, #1
 80097e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80097e2:	e001      	b.n	80097e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097e4:	2300      	movs	r3, #0
 80097e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3740      	adds	r7, #64	; 0x40
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
	...

08009800 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b08c      	sub	sp, #48	; 0x30
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800980c:	2300      	movs	r3, #0
 800980e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10a      	bne.n	8009830 <xQueueReceive+0x30>
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	623b      	str	r3, [r7, #32]
}
 800982c:	bf00      	nop
 800982e:	e7fe      	b.n	800982e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d103      	bne.n	800983e <xQueueReceive+0x3e>
 8009836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <xQueueReceive+0x42>
 800983e:	2301      	movs	r3, #1
 8009840:	e000      	b.n	8009844 <xQueueReceive+0x44>
 8009842:	2300      	movs	r3, #0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10a      	bne.n	800985e <xQueueReceive+0x5e>
	__asm volatile
 8009848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984c:	f383 8811 	msr	BASEPRI, r3
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	61fb      	str	r3, [r7, #28]
}
 800985a:	bf00      	nop
 800985c:	e7fe      	b.n	800985c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800985e:	f001 f865 	bl	800a92c <xTaskGetSchedulerState>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d102      	bne.n	800986e <xQueueReceive+0x6e>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <xQueueReceive+0x72>
 800986e:	2301      	movs	r3, #1
 8009870:	e000      	b.n	8009874 <xQueueReceive+0x74>
 8009872:	2300      	movs	r3, #0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10a      	bne.n	800988e <xQueueReceive+0x8e>
	__asm volatile
 8009878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	61bb      	str	r3, [r7, #24]
}
 800988a:	bf00      	nop
 800988c:	e7fe      	b.n	800988c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800988e:	f001 fda9 	bl	800b3e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009896:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989a:	2b00      	cmp	r3, #0
 800989c:	d01f      	beq.n	80098de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800989e:	68b9      	ldr	r1, [r7, #8]
 80098a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098a2:	f000 f8f7 	bl	8009a94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	1e5a      	subs	r2, r3, #1
 80098aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00f      	beq.n	80098d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b8:	3310      	adds	r3, #16
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 fe74 	bl	800a5a8 <xTaskRemoveFromEventList>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d007      	beq.n	80098d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098c6:	4b3d      	ldr	r3, [pc, #244]	; (80099bc <xQueueReceive+0x1bc>)
 80098c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098cc:	601a      	str	r2, [r3, #0]
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098d6:	f001 fdb5 	bl	800b444 <vPortExitCritical>
				return pdPASS;
 80098da:	2301      	movs	r3, #1
 80098dc:	e069      	b.n	80099b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d103      	bne.n	80098ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098e4:	f001 fdae 	bl	800b444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098e8:	2300      	movs	r3, #0
 80098ea:	e062      	b.n	80099b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d106      	bne.n	8009900 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098f2:	f107 0310 	add.w	r3, r7, #16
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 feba 	bl	800a670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098fc:	2301      	movs	r3, #1
 80098fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009900:	f001 fda0 	bl	800b444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009904:	f000 fc26 	bl	800a154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009908:	f001 fd6c 	bl	800b3e4 <vPortEnterCritical>
 800990c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009912:	b25b      	sxtb	r3, r3
 8009914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009918:	d103      	bne.n	8009922 <xQueueReceive+0x122>
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009928:	b25b      	sxtb	r3, r3
 800992a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992e:	d103      	bne.n	8009938 <xQueueReceive+0x138>
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009938:	f001 fd84 	bl	800b444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800993c:	1d3a      	adds	r2, r7, #4
 800993e:	f107 0310 	add.w	r3, r7, #16
 8009942:	4611      	mov	r1, r2
 8009944:	4618      	mov	r0, r3
 8009946:	f000 fea9 	bl	800a69c <xTaskCheckForTimeOut>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d123      	bne.n	8009998 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009952:	f000 f917 	bl	8009b84 <prvIsQueueEmpty>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d017      	beq.n	800998c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800995c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995e:	3324      	adds	r3, #36	; 0x24
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	4611      	mov	r1, r2
 8009964:	4618      	mov	r0, r3
 8009966:	f000 fdcf 	bl	800a508 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800996a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800996c:	f000 f8b8 	bl	8009ae0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009970:	f000 fbfe 	bl	800a170 <xTaskResumeAll>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d189      	bne.n	800988e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800997a:	4b10      	ldr	r3, [pc, #64]	; (80099bc <xQueueReceive+0x1bc>)
 800997c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009980:	601a      	str	r2, [r3, #0]
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	e780      	b.n	800988e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800998c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800998e:	f000 f8a7 	bl	8009ae0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009992:	f000 fbed 	bl	800a170 <xTaskResumeAll>
 8009996:	e77a      	b.n	800988e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800999a:	f000 f8a1 	bl	8009ae0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800999e:	f000 fbe7 	bl	800a170 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099a4:	f000 f8ee 	bl	8009b84 <prvIsQueueEmpty>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f43f af6f 	beq.w	800988e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3730      	adds	r7, #48	; 0x30
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	e000ed04 	.word	0xe000ed04

080099c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099cc:	2300      	movs	r3, #0
 80099ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10d      	bne.n	80099fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d14d      	bne.n	8009a82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 ffbc 	bl	800a968 <xTaskPriorityDisinherit>
 80099f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	609a      	str	r2, [r3, #8]
 80099f8:	e043      	b.n	8009a82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d119      	bne.n	8009a34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6858      	ldr	r0, [r3, #4]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a08:	461a      	mov	r2, r3
 8009a0a:	68b9      	ldr	r1, [r7, #8]
 8009a0c:	f002 fe44 	bl	800c698 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	685a      	ldr	r2, [r3, #4]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a18:	441a      	add	r2, r3
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	685a      	ldr	r2, [r3, #4]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d32b      	bcc.n	8009a82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	605a      	str	r2, [r3, #4]
 8009a32:	e026      	b.n	8009a82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	68d8      	ldr	r0, [r3, #12]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	68b9      	ldr	r1, [r7, #8]
 8009a40:	f002 fe2a 	bl	800c698 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	68da      	ldr	r2, [r3, #12]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4c:	425b      	negs	r3, r3
 8009a4e:	441a      	add	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	68da      	ldr	r2, [r3, #12]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d207      	bcs.n	8009a70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a68:	425b      	negs	r3, r3
 8009a6a:	441a      	add	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d105      	bne.n	8009a82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d002      	beq.n	8009a82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	1c5a      	adds	r2, r3, #1
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a8a:	697b      	ldr	r3, [r7, #20]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3718      	adds	r7, #24
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d018      	beq.n	8009ad8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	68da      	ldr	r2, [r3, #12]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aae:	441a      	add	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68da      	ldr	r2, [r3, #12]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d303      	bcc.n	8009ac8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	68d9      	ldr	r1, [r3, #12]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	6838      	ldr	r0, [r7, #0]
 8009ad4:	f002 fde0 	bl	800c698 <memcpy>
	}
}
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ae8:	f001 fc7c 	bl	800b3e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009af2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009af4:	e011      	b.n	8009b1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d012      	beq.n	8009b24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	3324      	adds	r3, #36	; 0x24
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 fd50 	bl	800a5a8 <xTaskRemoveFromEventList>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d001      	beq.n	8009b12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b0e:	f000 fe27 	bl	800a760 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
 8009b14:	3b01      	subs	r3, #1
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	dce9      	bgt.n	8009af6 <prvUnlockQueue+0x16>
 8009b22:	e000      	b.n	8009b26 <prvUnlockQueue+0x46>
					break;
 8009b24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	22ff      	movs	r2, #255	; 0xff
 8009b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b2e:	f001 fc89 	bl	800b444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b32:	f001 fc57 	bl	800b3e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b3e:	e011      	b.n	8009b64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d012      	beq.n	8009b6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	3310      	adds	r3, #16
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 fd2b 	bl	800a5a8 <xTaskRemoveFromEventList>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b58:	f000 fe02 	bl	800a760 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b5c:	7bbb      	ldrb	r3, [r7, #14]
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	dce9      	bgt.n	8009b40 <prvUnlockQueue+0x60>
 8009b6c:	e000      	b.n	8009b70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	22ff      	movs	r2, #255	; 0xff
 8009b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b78:	f001 fc64 	bl	800b444 <vPortExitCritical>
}
 8009b7c:	bf00      	nop
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b8c:	f001 fc2a 	bl	800b3e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d102      	bne.n	8009b9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	60fb      	str	r3, [r7, #12]
 8009b9c:	e001      	b.n	8009ba2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ba2:	f001 fc4f 	bl	800b444 <vPortExitCritical>

	return xReturn;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bb8:	f001 fc14 	bl	800b3e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d102      	bne.n	8009bce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	e001      	b.n	8009bd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bd2:	f001 fc37 	bl	800b444 <vPortExitCritical>

	return xReturn;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bea:	2300      	movs	r3, #0
 8009bec:	60fb      	str	r3, [r7, #12]
 8009bee:	e014      	b.n	8009c1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009bf0:	4a0f      	ldr	r2, [pc, #60]	; (8009c30 <vQueueAddToRegistry+0x50>)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10b      	bne.n	8009c14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009bfc:	490c      	ldr	r1, [pc, #48]	; (8009c30 <vQueueAddToRegistry+0x50>)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	683a      	ldr	r2, [r7, #0]
 8009c02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c06:	4a0a      	ldr	r2, [pc, #40]	; (8009c30 <vQueueAddToRegistry+0x50>)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	00db      	lsls	r3, r3, #3
 8009c0c:	4413      	add	r3, r2
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c12:	e006      	b.n	8009c22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	3301      	adds	r3, #1
 8009c18:	60fb      	str	r3, [r7, #12]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2b07      	cmp	r3, #7
 8009c1e:	d9e7      	bls.n	8009bf0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c20:	bf00      	nop
 8009c22:	bf00      	nop
 8009c24:	3714      	adds	r7, #20
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	20001114 	.word	0x20001114

08009c34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c44:	f001 fbce 	bl	800b3e4 <vPortEnterCritical>
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c4e:	b25b      	sxtb	r3, r3
 8009c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c54:	d103      	bne.n	8009c5e <vQueueWaitForMessageRestricted+0x2a>
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c64:	b25b      	sxtb	r3, r3
 8009c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6a:	d103      	bne.n	8009c74 <vQueueWaitForMessageRestricted+0x40>
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c74:	f001 fbe6 	bl	800b444 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d106      	bne.n	8009c8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	3324      	adds	r3, #36	; 0x24
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	68b9      	ldr	r1, [r7, #8]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f000 fc61 	bl	800a550 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c8e:	6978      	ldr	r0, [r7, #20]
 8009c90:	f7ff ff26 	bl	8009ae0 <prvUnlockQueue>
	}
 8009c94:	bf00      	nop
 8009c96:	3718      	adds	r7, #24
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08e      	sub	sp, #56	; 0x38
 8009ca0:	af04      	add	r7, sp, #16
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
 8009ca8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10a      	bne.n	8009cc6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	623b      	str	r3, [r7, #32]
}
 8009cc2:	bf00      	nop
 8009cc4:	e7fe      	b.n	8009cc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10a      	bne.n	8009ce2 <xTaskCreateStatic+0x46>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	61fb      	str	r3, [r7, #28]
}
 8009cde:	bf00      	nop
 8009ce0:	e7fe      	b.n	8009ce0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ce2:	23a8      	movs	r3, #168	; 0xa8
 8009ce4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	2ba8      	cmp	r3, #168	; 0xa8
 8009cea:	d00a      	beq.n	8009d02 <xTaskCreateStatic+0x66>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	61bb      	str	r3, [r7, #24]
}
 8009cfe:	bf00      	nop
 8009d00:	e7fe      	b.n	8009d00 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d01e      	beq.n	8009d48 <xTaskCreateStatic+0xac>
 8009d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d01b      	beq.n	8009d48 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d22:	2300      	movs	r3, #0
 8009d24:	9303      	str	r3, [sp, #12]
 8009d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d28:	9302      	str	r3, [sp, #8]
 8009d2a:	f107 0314 	add.w	r3, r7, #20
 8009d2e:	9301      	str	r3, [sp, #4]
 8009d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	68b9      	ldr	r1, [r7, #8]
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f000 f850 	bl	8009de0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d42:	f000 f8f3 	bl	8009f2c <prvAddNewTaskToReadyList>
 8009d46:	e001      	b.n	8009d4c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d4c:	697b      	ldr	r3, [r7, #20]
	}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3728      	adds	r7, #40	; 0x28
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b08c      	sub	sp, #48	; 0x30
 8009d5a:	af04      	add	r7, sp, #16
 8009d5c:	60f8      	str	r0, [r7, #12]
 8009d5e:	60b9      	str	r1, [r7, #8]
 8009d60:	603b      	str	r3, [r7, #0]
 8009d62:	4613      	mov	r3, r2
 8009d64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d66:	88fb      	ldrh	r3, [r7, #6]
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f001 fc5c 	bl	800b628 <pvPortMalloc>
 8009d70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00e      	beq.n	8009d96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d78:	20a8      	movs	r0, #168	; 0xa8
 8009d7a:	f001 fc55 	bl	800b628 <pvPortMalloc>
 8009d7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	631a      	str	r2, [r3, #48]	; 0x30
 8009d8c:	e005      	b.n	8009d9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d8e:	6978      	ldr	r0, [r7, #20]
 8009d90:	f001 fd16 	bl	800b7c0 <vPortFree>
 8009d94:	e001      	b.n	8009d9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d96:	2300      	movs	r3, #0
 8009d98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d017      	beq.n	8009dd0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009da8:	88fa      	ldrh	r2, [r7, #6]
 8009daa:	2300      	movs	r3, #0
 8009dac:	9303      	str	r3, [sp, #12]
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	9302      	str	r3, [sp, #8]
 8009db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db4:	9301      	str	r3, [sp, #4]
 8009db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	68b9      	ldr	r1, [r7, #8]
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f000 f80e 	bl	8009de0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dc4:	69f8      	ldr	r0, [r7, #28]
 8009dc6:	f000 f8b1 	bl	8009f2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	61bb      	str	r3, [r7, #24]
 8009dce:	e002      	b.n	8009dd6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dd6:	69bb      	ldr	r3, [r7, #24]
	}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3720      	adds	r7, #32
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b088      	sub	sp, #32
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
 8009dec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	461a      	mov	r2, r3
 8009df8:	21a5      	movs	r1, #165	; 0xa5
 8009dfa:	f002 fb78 	bl	800c4ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	f023 0307 	bic.w	r3, r3, #7
 8009e16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	f003 0307 	and.w	r3, r3, #7
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00a      	beq.n	8009e38 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	617b      	str	r3, [r7, #20]
}
 8009e34:	bf00      	nop
 8009e36:	e7fe      	b.n	8009e36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d01f      	beq.n	8009e7e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e3e:	2300      	movs	r3, #0
 8009e40:	61fb      	str	r3, [r7, #28]
 8009e42:	e012      	b.n	8009e6a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	4413      	add	r3, r2
 8009e4a:	7819      	ldrb	r1, [r3, #0]
 8009e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	4413      	add	r3, r2
 8009e52:	3334      	adds	r3, #52	; 0x34
 8009e54:	460a      	mov	r2, r1
 8009e56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d006      	beq.n	8009e72 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	3301      	adds	r3, #1
 8009e68:	61fb      	str	r3, [r7, #28]
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	2b0f      	cmp	r3, #15
 8009e6e:	d9e9      	bls.n	8009e44 <prvInitialiseNewTask+0x64>
 8009e70:	e000      	b.n	8009e74 <prvInitialiseNewTask+0x94>
			{
				break;
 8009e72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e7c:	e003      	b.n	8009e86 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e88:	2b37      	cmp	r3, #55	; 0x37
 8009e8a:	d901      	bls.n	8009e90 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e8c:	2337      	movs	r3, #55	; 0x37
 8009e8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff f978 	bl	800919c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	3318      	adds	r3, #24
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7ff f973 	bl	800919c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ede:	3354      	adds	r3, #84	; 0x54
 8009ee0:	224c      	movs	r2, #76	; 0x4c
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f002 fb02 	bl	800c4ee <memset>
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	4a0c      	ldr	r2, [pc, #48]	; (8009f20 <prvInitialiseNewTask+0x140>)
 8009eee:	659a      	str	r2, [r3, #88]	; 0x58
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef2:	4a0c      	ldr	r2, [pc, #48]	; (8009f24 <prvInitialiseNewTask+0x144>)
 8009ef4:	65da      	str	r2, [r3, #92]	; 0x5c
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef8:	4a0b      	ldr	r2, [pc, #44]	; (8009f28 <prvInitialiseNewTask+0x148>)
 8009efa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	68f9      	ldr	r1, [r7, #12]
 8009f00:	69b8      	ldr	r0, [r7, #24]
 8009f02:	f001 f941 	bl	800b188 <pxPortInitialiseStack>
 8009f06:	4602      	mov	r2, r0
 8009f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d002      	beq.n	8009f18 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f18:	bf00      	nop
 8009f1a:	3720      	adds	r7, #32
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	200053a8 	.word	0x200053a8
 8009f24:	20005410 	.word	0x20005410
 8009f28:	20005478 	.word	0x20005478

08009f2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f34:	f001 fa56 	bl	800b3e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f38:	4b2d      	ldr	r3, [pc, #180]	; (8009ff0 <prvAddNewTaskToReadyList+0xc4>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	4a2c      	ldr	r2, [pc, #176]	; (8009ff0 <prvAddNewTaskToReadyList+0xc4>)
 8009f40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f42:	4b2c      	ldr	r3, [pc, #176]	; (8009ff4 <prvAddNewTaskToReadyList+0xc8>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d109      	bne.n	8009f5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f4a:	4a2a      	ldr	r2, [pc, #168]	; (8009ff4 <prvAddNewTaskToReadyList+0xc8>)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f50:	4b27      	ldr	r3, [pc, #156]	; (8009ff0 <prvAddNewTaskToReadyList+0xc4>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d110      	bne.n	8009f7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f58:	f000 fc26 	bl	800a7a8 <prvInitialiseTaskLists>
 8009f5c:	e00d      	b.n	8009f7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f5e:	4b26      	ldr	r3, [pc, #152]	; (8009ff8 <prvAddNewTaskToReadyList+0xcc>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d109      	bne.n	8009f7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f66:	4b23      	ldr	r3, [pc, #140]	; (8009ff4 <prvAddNewTaskToReadyList+0xc8>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d802      	bhi.n	8009f7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f74:	4a1f      	ldr	r2, [pc, #124]	; (8009ff4 <prvAddNewTaskToReadyList+0xc8>)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f7a:	4b20      	ldr	r3, [pc, #128]	; (8009ffc <prvAddNewTaskToReadyList+0xd0>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	4a1e      	ldr	r2, [pc, #120]	; (8009ffc <prvAddNewTaskToReadyList+0xd0>)
 8009f82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f84:	4b1d      	ldr	r3, [pc, #116]	; (8009ffc <prvAddNewTaskToReadyList+0xd0>)
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f90:	4b1b      	ldr	r3, [pc, #108]	; (800a000 <prvAddNewTaskToReadyList+0xd4>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d903      	bls.n	8009fa0 <prvAddNewTaskToReadyList+0x74>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9c:	4a18      	ldr	r2, [pc, #96]	; (800a000 <prvAddNewTaskToReadyList+0xd4>)
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	4a15      	ldr	r2, [pc, #84]	; (800a004 <prvAddNewTaskToReadyList+0xd8>)
 8009fae:	441a      	add	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	f7ff f8fd 	bl	80091b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fbc:	f001 fa42 	bl	800b444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009fc0:	4b0d      	ldr	r3, [pc, #52]	; (8009ff8 <prvAddNewTaskToReadyList+0xcc>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00e      	beq.n	8009fe6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fc8:	4b0a      	ldr	r3, [pc, #40]	; (8009ff4 <prvAddNewTaskToReadyList+0xc8>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d207      	bcs.n	8009fe6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fd6:	4b0c      	ldr	r3, [pc, #48]	; (800a008 <prvAddNewTaskToReadyList+0xdc>)
 8009fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fe6:	bf00      	nop
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	20001628 	.word	0x20001628
 8009ff4:	20001154 	.word	0x20001154
 8009ff8:	20001634 	.word	0x20001634
 8009ffc:	20001644 	.word	0x20001644
 800a000:	20001630 	.word	0x20001630
 800a004:	20001158 	.word	0x20001158
 800a008:	e000ed04 	.word	0xe000ed04

0800a00c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a014:	2300      	movs	r3, #0
 800a016:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d017      	beq.n	800a04e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a01e:	4b13      	ldr	r3, [pc, #76]	; (800a06c <vTaskDelay+0x60>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00a      	beq.n	800a03c <vTaskDelay+0x30>
	__asm volatile
 800a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	60bb      	str	r3, [r7, #8]
}
 800a038:	bf00      	nop
 800a03a:	e7fe      	b.n	800a03a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a03c:	f000 f88a 	bl	800a154 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a040:	2100      	movs	r1, #0
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 fcfe 	bl	800aa44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a048:	f000 f892 	bl	800a170 <xTaskResumeAll>
 800a04c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d107      	bne.n	800a064 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a054:	4b06      	ldr	r3, [pc, #24]	; (800a070 <vTaskDelay+0x64>)
 800a056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a064:	bf00      	nop
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	20001650 	.word	0x20001650
 800a070:	e000ed04 	.word	0xe000ed04

0800a074 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08a      	sub	sp, #40	; 0x28
 800a078:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a07a:	2300      	movs	r3, #0
 800a07c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a07e:	2300      	movs	r3, #0
 800a080:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a082:	463a      	mov	r2, r7
 800a084:	1d39      	adds	r1, r7, #4
 800a086:	f107 0308 	add.w	r3, r7, #8
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7ff f832 	bl	80090f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a090:	6839      	ldr	r1, [r7, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	9202      	str	r2, [sp, #8]
 800a098:	9301      	str	r3, [sp, #4]
 800a09a:	2300      	movs	r3, #0
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	2300      	movs	r3, #0
 800a0a0:	460a      	mov	r2, r1
 800a0a2:	4924      	ldr	r1, [pc, #144]	; (800a134 <vTaskStartScheduler+0xc0>)
 800a0a4:	4824      	ldr	r0, [pc, #144]	; (800a138 <vTaskStartScheduler+0xc4>)
 800a0a6:	f7ff fdf9 	bl	8009c9c <xTaskCreateStatic>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	4a23      	ldr	r2, [pc, #140]	; (800a13c <vTaskStartScheduler+0xc8>)
 800a0ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a0b0:	4b22      	ldr	r3, [pc, #136]	; (800a13c <vTaskStartScheduler+0xc8>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d002      	beq.n	800a0be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	617b      	str	r3, [r7, #20]
 800a0bc:	e001      	b.n	800a0c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d102      	bne.n	800a0ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a0c8:	f000 fd10 	bl	800aaec <xTimerCreateTimerTask>
 800a0cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d11b      	bne.n	800a10c <vTaskStartScheduler+0x98>
	__asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	613b      	str	r3, [r7, #16]
}
 800a0e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a0e8:	4b15      	ldr	r3, [pc, #84]	; (800a140 <vTaskStartScheduler+0xcc>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3354      	adds	r3, #84	; 0x54
 800a0ee:	4a15      	ldr	r2, [pc, #84]	; (800a144 <vTaskStartScheduler+0xd0>)
 800a0f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a0f2:	4b15      	ldr	r3, [pc, #84]	; (800a148 <vTaskStartScheduler+0xd4>)
 800a0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a0fa:	4b14      	ldr	r3, [pc, #80]	; (800a14c <vTaskStartScheduler+0xd8>)
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a100:	4b13      	ldr	r3, [pc, #76]	; (800a150 <vTaskStartScheduler+0xdc>)
 800a102:	2200      	movs	r2, #0
 800a104:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a106:	f001 f8cb 	bl	800b2a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a10a:	e00e      	b.n	800a12a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a112:	d10a      	bne.n	800a12a <vTaskStartScheduler+0xb6>
	__asm volatile
 800a114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a118:	f383 8811 	msr	BASEPRI, r3
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	60fb      	str	r3, [r7, #12]
}
 800a126:	bf00      	nop
 800a128:	e7fe      	b.n	800a128 <vTaskStartScheduler+0xb4>
}
 800a12a:	bf00      	nop
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	0800e898 	.word	0x0800e898
 800a138:	0800a779 	.word	0x0800a779
 800a13c:	2000164c 	.word	0x2000164c
 800a140:	20001154 	.word	0x20001154
 800a144:	2000007c 	.word	0x2000007c
 800a148:	20001648 	.word	0x20001648
 800a14c:	20001634 	.word	0x20001634
 800a150:	2000162c 	.word	0x2000162c

0800a154 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a154:	b480      	push	{r7}
 800a156:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a158:	4b04      	ldr	r3, [pc, #16]	; (800a16c <vTaskSuspendAll+0x18>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3301      	adds	r3, #1
 800a15e:	4a03      	ldr	r2, [pc, #12]	; (800a16c <vTaskSuspendAll+0x18>)
 800a160:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a162:	bf00      	nop
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	20001650 	.word	0x20001650

0800a170 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a176:	2300      	movs	r3, #0
 800a178:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a17a:	2300      	movs	r3, #0
 800a17c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a17e:	4b42      	ldr	r3, [pc, #264]	; (800a288 <xTaskResumeAll+0x118>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10a      	bne.n	800a19c <xTaskResumeAll+0x2c>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	603b      	str	r3, [r7, #0]
}
 800a198:	bf00      	nop
 800a19a:	e7fe      	b.n	800a19a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a19c:	f001 f922 	bl	800b3e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1a0:	4b39      	ldr	r3, [pc, #228]	; (800a288 <xTaskResumeAll+0x118>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	4a38      	ldr	r2, [pc, #224]	; (800a288 <xTaskResumeAll+0x118>)
 800a1a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1aa:	4b37      	ldr	r3, [pc, #220]	; (800a288 <xTaskResumeAll+0x118>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d162      	bne.n	800a278 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1b2:	4b36      	ldr	r3, [pc, #216]	; (800a28c <xTaskResumeAll+0x11c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d05e      	beq.n	800a278 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1ba:	e02f      	b.n	800a21c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1bc:	4b34      	ldr	r3, [pc, #208]	; (800a290 <xTaskResumeAll+0x120>)
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	3318      	adds	r3, #24
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7ff f851 	bl	8009270 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7ff f84c 	bl	8009270 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1dc:	4b2d      	ldr	r3, [pc, #180]	; (800a294 <xTaskResumeAll+0x124>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d903      	bls.n	800a1ec <xTaskResumeAll+0x7c>
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e8:	4a2a      	ldr	r2, [pc, #168]	; (800a294 <xTaskResumeAll+0x124>)
 800a1ea:	6013      	str	r3, [r2, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4a27      	ldr	r2, [pc, #156]	; (800a298 <xTaskResumeAll+0x128>)
 800a1fa:	441a      	add	r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	3304      	adds	r3, #4
 800a200:	4619      	mov	r1, r3
 800a202:	4610      	mov	r0, r2
 800a204:	f7fe ffd7 	bl	80091b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a20c:	4b23      	ldr	r3, [pc, #140]	; (800a29c <xTaskResumeAll+0x12c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a212:	429a      	cmp	r2, r3
 800a214:	d302      	bcc.n	800a21c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a216:	4b22      	ldr	r3, [pc, #136]	; (800a2a0 <xTaskResumeAll+0x130>)
 800a218:	2201      	movs	r2, #1
 800a21a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a21c:	4b1c      	ldr	r3, [pc, #112]	; (800a290 <xTaskResumeAll+0x120>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1cb      	bne.n	800a1bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d001      	beq.n	800a22e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a22a:	f000 fb5f 	bl	800a8ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a22e:	4b1d      	ldr	r3, [pc, #116]	; (800a2a4 <xTaskResumeAll+0x134>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d010      	beq.n	800a25c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a23a:	f000 f847 	bl	800a2cc <xTaskIncrementTick>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d002      	beq.n	800a24a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a244:	4b16      	ldr	r3, [pc, #88]	; (800a2a0 <xTaskResumeAll+0x130>)
 800a246:	2201      	movs	r2, #1
 800a248:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1f1      	bne.n	800a23a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a256:	4b13      	ldr	r3, [pc, #76]	; (800a2a4 <xTaskResumeAll+0x134>)
 800a258:	2200      	movs	r2, #0
 800a25a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a25c:	4b10      	ldr	r3, [pc, #64]	; (800a2a0 <xTaskResumeAll+0x130>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d009      	beq.n	800a278 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a264:	2301      	movs	r3, #1
 800a266:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a268:	4b0f      	ldr	r3, [pc, #60]	; (800a2a8 <xTaskResumeAll+0x138>)
 800a26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a278:	f001 f8e4 	bl	800b444 <vPortExitCritical>

	return xAlreadyYielded;
 800a27c:	68bb      	ldr	r3, [r7, #8]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20001650 	.word	0x20001650
 800a28c:	20001628 	.word	0x20001628
 800a290:	200015e8 	.word	0x200015e8
 800a294:	20001630 	.word	0x20001630
 800a298:	20001158 	.word	0x20001158
 800a29c:	20001154 	.word	0x20001154
 800a2a0:	2000163c 	.word	0x2000163c
 800a2a4:	20001638 	.word	0x20001638
 800a2a8:	e000ed04 	.word	0xe000ed04

0800a2ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2b2:	4b05      	ldr	r3, [pc, #20]	; (800a2c8 <xTaskGetTickCount+0x1c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a2b8:	687b      	ldr	r3, [r7, #4]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	370c      	adds	r7, #12
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	2000162c 	.word	0x2000162c

0800a2cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2d6:	4b4f      	ldr	r3, [pc, #316]	; (800a414 <xTaskIncrementTick+0x148>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f040 808f 	bne.w	800a3fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a2e0:	4b4d      	ldr	r3, [pc, #308]	; (800a418 <xTaskIncrementTick+0x14c>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a2e8:	4a4b      	ldr	r2, [pc, #300]	; (800a418 <xTaskIncrementTick+0x14c>)
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d120      	bne.n	800a336 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a2f4:	4b49      	ldr	r3, [pc, #292]	; (800a41c <xTaskIncrementTick+0x150>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00a      	beq.n	800a314 <xTaskIncrementTick+0x48>
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	603b      	str	r3, [r7, #0]
}
 800a310:	bf00      	nop
 800a312:	e7fe      	b.n	800a312 <xTaskIncrementTick+0x46>
 800a314:	4b41      	ldr	r3, [pc, #260]	; (800a41c <xTaskIncrementTick+0x150>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	60fb      	str	r3, [r7, #12]
 800a31a:	4b41      	ldr	r3, [pc, #260]	; (800a420 <xTaskIncrementTick+0x154>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a3f      	ldr	r2, [pc, #252]	; (800a41c <xTaskIncrementTick+0x150>)
 800a320:	6013      	str	r3, [r2, #0]
 800a322:	4a3f      	ldr	r2, [pc, #252]	; (800a420 <xTaskIncrementTick+0x154>)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	4b3e      	ldr	r3, [pc, #248]	; (800a424 <xTaskIncrementTick+0x158>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3301      	adds	r3, #1
 800a32e:	4a3d      	ldr	r2, [pc, #244]	; (800a424 <xTaskIncrementTick+0x158>)
 800a330:	6013      	str	r3, [r2, #0]
 800a332:	f000 fadb 	bl	800a8ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a336:	4b3c      	ldr	r3, [pc, #240]	; (800a428 <xTaskIncrementTick+0x15c>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d349      	bcc.n	800a3d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a340:	4b36      	ldr	r3, [pc, #216]	; (800a41c <xTaskIncrementTick+0x150>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d104      	bne.n	800a354 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a34a:	4b37      	ldr	r3, [pc, #220]	; (800a428 <xTaskIncrementTick+0x15c>)
 800a34c:	f04f 32ff 	mov.w	r2, #4294967295
 800a350:	601a      	str	r2, [r3, #0]
					break;
 800a352:	e03f      	b.n	800a3d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a354:	4b31      	ldr	r3, [pc, #196]	; (800a41c <xTaskIncrementTick+0x150>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d203      	bcs.n	800a374 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a36c:	4a2e      	ldr	r2, [pc, #184]	; (800a428 <xTaskIncrementTick+0x15c>)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a372:	e02f      	b.n	800a3d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	3304      	adds	r3, #4
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fe ff79 	bl	8009270 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a382:	2b00      	cmp	r3, #0
 800a384:	d004      	beq.n	800a390 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	3318      	adds	r3, #24
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fe ff70 	bl	8009270 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a394:	4b25      	ldr	r3, [pc, #148]	; (800a42c <xTaskIncrementTick+0x160>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d903      	bls.n	800a3a4 <xTaskIncrementTick+0xd8>
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a0:	4a22      	ldr	r2, [pc, #136]	; (800a42c <xTaskIncrementTick+0x160>)
 800a3a2:	6013      	str	r3, [r2, #0]
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	4413      	add	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4a1f      	ldr	r2, [pc, #124]	; (800a430 <xTaskIncrementTick+0x164>)
 800a3b2:	441a      	add	r2, r3
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	3304      	adds	r3, #4
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	4610      	mov	r0, r2
 800a3bc:	f7fe fefb 	bl	80091b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c4:	4b1b      	ldr	r3, [pc, #108]	; (800a434 <xTaskIncrementTick+0x168>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d3b8      	bcc.n	800a340 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3d2:	e7b5      	b.n	800a340 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3d4:	4b17      	ldr	r3, [pc, #92]	; (800a434 <xTaskIncrementTick+0x168>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3da:	4915      	ldr	r1, [pc, #84]	; (800a430 <xTaskIncrementTick+0x164>)
 800a3dc:	4613      	mov	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4413      	add	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	440b      	add	r3, r1
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d901      	bls.n	800a3f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a3f0:	4b11      	ldr	r3, [pc, #68]	; (800a438 <xTaskIncrementTick+0x16c>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d007      	beq.n	800a408 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	617b      	str	r3, [r7, #20]
 800a3fc:	e004      	b.n	800a408 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a3fe:	4b0f      	ldr	r3, [pc, #60]	; (800a43c <xTaskIncrementTick+0x170>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	4a0d      	ldr	r2, [pc, #52]	; (800a43c <xTaskIncrementTick+0x170>)
 800a406:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a408:	697b      	ldr	r3, [r7, #20]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3718      	adds	r7, #24
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	20001650 	.word	0x20001650
 800a418:	2000162c 	.word	0x2000162c
 800a41c:	200015e0 	.word	0x200015e0
 800a420:	200015e4 	.word	0x200015e4
 800a424:	20001640 	.word	0x20001640
 800a428:	20001648 	.word	0x20001648
 800a42c:	20001630 	.word	0x20001630
 800a430:	20001158 	.word	0x20001158
 800a434:	20001154 	.word	0x20001154
 800a438:	2000163c 	.word	0x2000163c
 800a43c:	20001638 	.word	0x20001638

0800a440 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a446:	4b2a      	ldr	r3, [pc, #168]	; (800a4f0 <vTaskSwitchContext+0xb0>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d003      	beq.n	800a456 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a44e:	4b29      	ldr	r3, [pc, #164]	; (800a4f4 <vTaskSwitchContext+0xb4>)
 800a450:	2201      	movs	r2, #1
 800a452:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a454:	e046      	b.n	800a4e4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a456:	4b27      	ldr	r3, [pc, #156]	; (800a4f4 <vTaskSwitchContext+0xb4>)
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a45c:	4b26      	ldr	r3, [pc, #152]	; (800a4f8 <vTaskSwitchContext+0xb8>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	60fb      	str	r3, [r7, #12]
 800a462:	e010      	b.n	800a486 <vTaskSwitchContext+0x46>
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d10a      	bne.n	800a480 <vTaskSwitchContext+0x40>
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	607b      	str	r3, [r7, #4]
}
 800a47c:	bf00      	nop
 800a47e:	e7fe      	b.n	800a47e <vTaskSwitchContext+0x3e>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3b01      	subs	r3, #1
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	491d      	ldr	r1, [pc, #116]	; (800a4fc <vTaskSwitchContext+0xbc>)
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	4613      	mov	r3, r2
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	4413      	add	r3, r2
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	440b      	add	r3, r1
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d0e4      	beq.n	800a464 <vTaskSwitchContext+0x24>
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	4613      	mov	r3, r2
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	4413      	add	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	4a15      	ldr	r2, [pc, #84]	; (800a4fc <vTaskSwitchContext+0xbc>)
 800a4a6:	4413      	add	r3, r2
 800a4a8:	60bb      	str	r3, [r7, #8]
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	605a      	str	r2, [r3, #4]
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	685a      	ldr	r2, [r3, #4]
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	3308      	adds	r3, #8
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d104      	bne.n	800a4ca <vTaskSwitchContext+0x8a>
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	605a      	str	r2, [r3, #4]
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	4a0b      	ldr	r2, [pc, #44]	; (800a500 <vTaskSwitchContext+0xc0>)
 800a4d2:	6013      	str	r3, [r2, #0]
 800a4d4:	4a08      	ldr	r2, [pc, #32]	; (800a4f8 <vTaskSwitchContext+0xb8>)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a4da:	4b09      	ldr	r3, [pc, #36]	; (800a500 <vTaskSwitchContext+0xc0>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	3354      	adds	r3, #84	; 0x54
 800a4e0:	4a08      	ldr	r2, [pc, #32]	; (800a504 <vTaskSwitchContext+0xc4>)
 800a4e2:	6013      	str	r3, [r2, #0]
}
 800a4e4:	bf00      	nop
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr
 800a4f0:	20001650 	.word	0x20001650
 800a4f4:	2000163c 	.word	0x2000163c
 800a4f8:	20001630 	.word	0x20001630
 800a4fc:	20001158 	.word	0x20001158
 800a500:	20001154 	.word	0x20001154
 800a504:	2000007c 	.word	0x2000007c

0800a508 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10a      	bne.n	800a52e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	60fb      	str	r3, [r7, #12]
}
 800a52a:	bf00      	nop
 800a52c:	e7fe      	b.n	800a52c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a52e:	4b07      	ldr	r3, [pc, #28]	; (800a54c <vTaskPlaceOnEventList+0x44>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	3318      	adds	r3, #24
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7fe fe61 	bl	80091fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a53c:	2101      	movs	r1, #1
 800a53e:	6838      	ldr	r0, [r7, #0]
 800a540:	f000 fa80 	bl	800aa44 <prvAddCurrentTaskToDelayedList>
}
 800a544:	bf00      	nop
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	20001154 	.word	0x20001154

0800a550 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10a      	bne.n	800a578 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	617b      	str	r3, [r7, #20]
}
 800a574:	bf00      	nop
 800a576:	e7fe      	b.n	800a576 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a578:	4b0a      	ldr	r3, [pc, #40]	; (800a5a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	3318      	adds	r3, #24
 800a57e:	4619      	mov	r1, r3
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f7fe fe18 	bl	80091b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a58c:	f04f 33ff 	mov.w	r3, #4294967295
 800a590:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a592:	6879      	ldr	r1, [r7, #4]
 800a594:	68b8      	ldr	r0, [r7, #8]
 800a596:	f000 fa55 	bl	800aa44 <prvAddCurrentTaskToDelayedList>
	}
 800a59a:	bf00      	nop
 800a59c:	3718      	adds	r7, #24
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20001154 	.word	0x20001154

0800a5a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10a      	bne.n	800a5d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	60fb      	str	r3, [r7, #12]
}
 800a5d0:	bf00      	nop
 800a5d2:	e7fe      	b.n	800a5d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	3318      	adds	r3, #24
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7fe fe49 	bl	8009270 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5de:	4b1e      	ldr	r3, [pc, #120]	; (800a658 <xTaskRemoveFromEventList+0xb0>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d11d      	bne.n	800a622 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fe fe40 	bl	8009270 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f4:	4b19      	ldr	r3, [pc, #100]	; (800a65c <xTaskRemoveFromEventList+0xb4>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d903      	bls.n	800a604 <xTaskRemoveFromEventList+0x5c>
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a600:	4a16      	ldr	r2, [pc, #88]	; (800a65c <xTaskRemoveFromEventList+0xb4>)
 800a602:	6013      	str	r3, [r2, #0]
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a608:	4613      	mov	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4413      	add	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4a13      	ldr	r2, [pc, #76]	; (800a660 <xTaskRemoveFromEventList+0xb8>)
 800a612:	441a      	add	r2, r3
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	3304      	adds	r3, #4
 800a618:	4619      	mov	r1, r3
 800a61a:	4610      	mov	r0, r2
 800a61c:	f7fe fdcb 	bl	80091b6 <vListInsertEnd>
 800a620:	e005      	b.n	800a62e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	3318      	adds	r3, #24
 800a626:	4619      	mov	r1, r3
 800a628:	480e      	ldr	r0, [pc, #56]	; (800a664 <xTaskRemoveFromEventList+0xbc>)
 800a62a:	f7fe fdc4 	bl	80091b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a632:	4b0d      	ldr	r3, [pc, #52]	; (800a668 <xTaskRemoveFromEventList+0xc0>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a638:	429a      	cmp	r2, r3
 800a63a:	d905      	bls.n	800a648 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a63c:	2301      	movs	r3, #1
 800a63e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a640:	4b0a      	ldr	r3, [pc, #40]	; (800a66c <xTaskRemoveFromEventList+0xc4>)
 800a642:	2201      	movs	r2, #1
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	e001      	b.n	800a64c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a648:	2300      	movs	r3, #0
 800a64a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a64c:	697b      	ldr	r3, [r7, #20]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3718      	adds	r7, #24
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20001650 	.word	0x20001650
 800a65c:	20001630 	.word	0x20001630
 800a660:	20001158 	.word	0x20001158
 800a664:	200015e8 	.word	0x200015e8
 800a668:	20001154 	.word	0x20001154
 800a66c:	2000163c 	.word	0x2000163c

0800a670 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a678:	4b06      	ldr	r3, [pc, #24]	; (800a694 <vTaskInternalSetTimeOutState+0x24>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a680:	4b05      	ldr	r3, [pc, #20]	; (800a698 <vTaskInternalSetTimeOutState+0x28>)
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	605a      	str	r2, [r3, #4]
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr
 800a694:	20001640 	.word	0x20001640
 800a698:	2000162c 	.word	0x2000162c

0800a69c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b088      	sub	sp, #32
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10a      	bne.n	800a6c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	613b      	str	r3, [r7, #16]
}
 800a6be:	bf00      	nop
 800a6c0:	e7fe      	b.n	800a6c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10a      	bne.n	800a6de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6cc:	f383 8811 	msr	BASEPRI, r3
 800a6d0:	f3bf 8f6f 	isb	sy
 800a6d4:	f3bf 8f4f 	dsb	sy
 800a6d8:	60fb      	str	r3, [r7, #12]
}
 800a6da:	bf00      	nop
 800a6dc:	e7fe      	b.n	800a6dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a6de:	f000 fe81 	bl	800b3e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a6e2:	4b1d      	ldr	r3, [pc, #116]	; (800a758 <xTaskCheckForTimeOut+0xbc>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	69ba      	ldr	r2, [r7, #24]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fa:	d102      	bne.n	800a702 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	61fb      	str	r3, [r7, #28]
 800a700:	e023      	b.n	800a74a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	4b15      	ldr	r3, [pc, #84]	; (800a75c <xTaskCheckForTimeOut+0xc0>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d007      	beq.n	800a71e <xTaskCheckForTimeOut+0x82>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	69ba      	ldr	r2, [r7, #24]
 800a714:	429a      	cmp	r2, r3
 800a716:	d302      	bcc.n	800a71e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a718:	2301      	movs	r3, #1
 800a71a:	61fb      	str	r3, [r7, #28]
 800a71c:	e015      	b.n	800a74a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	697a      	ldr	r2, [r7, #20]
 800a724:	429a      	cmp	r2, r3
 800a726:	d20b      	bcs.n	800a740 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	1ad2      	subs	r2, r2, r3
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7ff ff9b 	bl	800a670 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a73a:	2300      	movs	r3, #0
 800a73c:	61fb      	str	r3, [r7, #28]
 800a73e:	e004      	b.n	800a74a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	2200      	movs	r2, #0
 800a744:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a746:	2301      	movs	r3, #1
 800a748:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a74a:	f000 fe7b 	bl	800b444 <vPortExitCritical>

	return xReturn;
 800a74e:	69fb      	ldr	r3, [r7, #28]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3720      	adds	r7, #32
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	2000162c 	.word	0x2000162c
 800a75c:	20001640 	.word	0x20001640

0800a760 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a760:	b480      	push	{r7}
 800a762:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a764:	4b03      	ldr	r3, [pc, #12]	; (800a774 <vTaskMissedYield+0x14>)
 800a766:	2201      	movs	r2, #1
 800a768:	601a      	str	r2, [r3, #0]
}
 800a76a:	bf00      	nop
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	2000163c 	.word	0x2000163c

0800a778 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a780:	f000 f852 	bl	800a828 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a784:	4b06      	ldr	r3, [pc, #24]	; (800a7a0 <prvIdleTask+0x28>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d9f9      	bls.n	800a780 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a78c:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <prvIdleTask+0x2c>)
 800a78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a792:	601a      	str	r2, [r3, #0]
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a79c:	e7f0      	b.n	800a780 <prvIdleTask+0x8>
 800a79e:	bf00      	nop
 800a7a0:	20001158 	.word	0x20001158
 800a7a4:	e000ed04 	.word	0xe000ed04

0800a7a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	607b      	str	r3, [r7, #4]
 800a7b2:	e00c      	b.n	800a7ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4a12      	ldr	r2, [pc, #72]	; (800a808 <prvInitialiseTaskLists+0x60>)
 800a7c0:	4413      	add	r3, r2
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe fcca 	bl	800915c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	607b      	str	r3, [r7, #4]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b37      	cmp	r3, #55	; 0x37
 800a7d2:	d9ef      	bls.n	800a7b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a7d4:	480d      	ldr	r0, [pc, #52]	; (800a80c <prvInitialiseTaskLists+0x64>)
 800a7d6:	f7fe fcc1 	bl	800915c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7da:	480d      	ldr	r0, [pc, #52]	; (800a810 <prvInitialiseTaskLists+0x68>)
 800a7dc:	f7fe fcbe 	bl	800915c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a7e0:	480c      	ldr	r0, [pc, #48]	; (800a814 <prvInitialiseTaskLists+0x6c>)
 800a7e2:	f7fe fcbb 	bl	800915c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7e6:	480c      	ldr	r0, [pc, #48]	; (800a818 <prvInitialiseTaskLists+0x70>)
 800a7e8:	f7fe fcb8 	bl	800915c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a7ec:	480b      	ldr	r0, [pc, #44]	; (800a81c <prvInitialiseTaskLists+0x74>)
 800a7ee:	f7fe fcb5 	bl	800915c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a7f2:	4b0b      	ldr	r3, [pc, #44]	; (800a820 <prvInitialiseTaskLists+0x78>)
 800a7f4:	4a05      	ldr	r2, [pc, #20]	; (800a80c <prvInitialiseTaskLists+0x64>)
 800a7f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a7f8:	4b0a      	ldr	r3, [pc, #40]	; (800a824 <prvInitialiseTaskLists+0x7c>)
 800a7fa:	4a05      	ldr	r2, [pc, #20]	; (800a810 <prvInitialiseTaskLists+0x68>)
 800a7fc:	601a      	str	r2, [r3, #0]
}
 800a7fe:	bf00      	nop
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	20001158 	.word	0x20001158
 800a80c:	200015b8 	.word	0x200015b8
 800a810:	200015cc 	.word	0x200015cc
 800a814:	200015e8 	.word	0x200015e8
 800a818:	200015fc 	.word	0x200015fc
 800a81c:	20001614 	.word	0x20001614
 800a820:	200015e0 	.word	0x200015e0
 800a824:	200015e4 	.word	0x200015e4

0800a828 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a82e:	e019      	b.n	800a864 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a830:	f000 fdd8 	bl	800b3e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a834:	4b10      	ldr	r3, [pc, #64]	; (800a878 <prvCheckTasksWaitingTermination+0x50>)
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	3304      	adds	r3, #4
 800a840:	4618      	mov	r0, r3
 800a842:	f7fe fd15 	bl	8009270 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a846:	4b0d      	ldr	r3, [pc, #52]	; (800a87c <prvCheckTasksWaitingTermination+0x54>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	3b01      	subs	r3, #1
 800a84c:	4a0b      	ldr	r2, [pc, #44]	; (800a87c <prvCheckTasksWaitingTermination+0x54>)
 800a84e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a850:	4b0b      	ldr	r3, [pc, #44]	; (800a880 <prvCheckTasksWaitingTermination+0x58>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	3b01      	subs	r3, #1
 800a856:	4a0a      	ldr	r2, [pc, #40]	; (800a880 <prvCheckTasksWaitingTermination+0x58>)
 800a858:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a85a:	f000 fdf3 	bl	800b444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f810 	bl	800a884 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a864:	4b06      	ldr	r3, [pc, #24]	; (800a880 <prvCheckTasksWaitingTermination+0x58>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1e1      	bne.n	800a830 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a86c:	bf00      	nop
 800a86e:	bf00      	nop
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	200015fc 	.word	0x200015fc
 800a87c:	20001628 	.word	0x20001628
 800a880:	20001610 	.word	0x20001610

0800a884 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	3354      	adds	r3, #84	; 0x54
 800a890:	4618      	mov	r0, r3
 800a892:	f001 fe49 	bl	800c528 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d108      	bne.n	800a8b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 ff8b 	bl	800b7c0 <vPortFree>
				vPortFree( pxTCB );
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 ff88 	bl	800b7c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a8b0:	e018      	b.n	800a8e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d103      	bne.n	800a8c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 ff7f 	bl	800b7c0 <vPortFree>
	}
 800a8c2:	e00f      	b.n	800a8e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d00a      	beq.n	800a8e4 <prvDeleteTCB+0x60>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	60fb      	str	r3, [r7, #12]
}
 800a8e0:	bf00      	nop
 800a8e2:	e7fe      	b.n	800a8e2 <prvDeleteTCB+0x5e>
	}
 800a8e4:	bf00      	nop
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8f2:	4b0c      	ldr	r3, [pc, #48]	; (800a924 <prvResetNextTaskUnblockTime+0x38>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d104      	bne.n	800a906 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8fc:	4b0a      	ldr	r3, [pc, #40]	; (800a928 <prvResetNextTaskUnblockTime+0x3c>)
 800a8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a902:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a904:	e008      	b.n	800a918 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a906:	4b07      	ldr	r3, [pc, #28]	; (800a924 <prvResetNextTaskUnblockTime+0x38>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	4a04      	ldr	r2, [pc, #16]	; (800a928 <prvResetNextTaskUnblockTime+0x3c>)
 800a916:	6013      	str	r3, [r2, #0]
}
 800a918:	bf00      	nop
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	200015e0 	.word	0x200015e0
 800a928:	20001648 	.word	0x20001648

0800a92c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a932:	4b0b      	ldr	r3, [pc, #44]	; (800a960 <xTaskGetSchedulerState+0x34>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d102      	bne.n	800a940 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a93a:	2301      	movs	r3, #1
 800a93c:	607b      	str	r3, [r7, #4]
 800a93e:	e008      	b.n	800a952 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a940:	4b08      	ldr	r3, [pc, #32]	; (800a964 <xTaskGetSchedulerState+0x38>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d102      	bne.n	800a94e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a948:	2302      	movs	r3, #2
 800a94a:	607b      	str	r3, [r7, #4]
 800a94c:	e001      	b.n	800a952 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a94e:	2300      	movs	r3, #0
 800a950:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a952:	687b      	ldr	r3, [r7, #4]
	}
 800a954:	4618      	mov	r0, r3
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	20001634 	.word	0x20001634
 800a964:	20001650 	.word	0x20001650

0800a968 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a974:	2300      	movs	r3, #0
 800a976:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d056      	beq.n	800aa2c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a97e:	4b2e      	ldr	r3, [pc, #184]	; (800aa38 <xTaskPriorityDisinherit+0xd0>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	693a      	ldr	r2, [r7, #16]
 800a984:	429a      	cmp	r2, r3
 800a986:	d00a      	beq.n	800a99e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98c:	f383 8811 	msr	BASEPRI, r3
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	60fb      	str	r3, [r7, #12]
}
 800a99a:	bf00      	nop
 800a99c:	e7fe      	b.n	800a99c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10a      	bne.n	800a9bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	60bb      	str	r3, [r7, #8]
}
 800a9b8:	bf00      	nop
 800a9ba:	e7fe      	b.n	800a9ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c0:	1e5a      	subs	r2, r3, #1
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d02c      	beq.n	800aa2c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d128      	bne.n	800aa2c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	3304      	adds	r3, #4
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fe fc46 	bl	8009270 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9fc:	4b0f      	ldr	r3, [pc, #60]	; (800aa3c <xTaskPriorityDisinherit+0xd4>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d903      	bls.n	800aa0c <xTaskPriorityDisinherit+0xa4>
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa08:	4a0c      	ldr	r2, [pc, #48]	; (800aa3c <xTaskPriorityDisinherit+0xd4>)
 800aa0a:	6013      	str	r3, [r2, #0]
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa10:	4613      	mov	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4413      	add	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4a09      	ldr	r2, [pc, #36]	; (800aa40 <xTaskPriorityDisinherit+0xd8>)
 800aa1a:	441a      	add	r2, r3
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	3304      	adds	r3, #4
 800aa20:	4619      	mov	r1, r3
 800aa22:	4610      	mov	r0, r2
 800aa24:	f7fe fbc7 	bl	80091b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa2c:	697b      	ldr	r3, [r7, #20]
	}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3718      	adds	r7, #24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	20001154 	.word	0x20001154
 800aa3c:	20001630 	.word	0x20001630
 800aa40:	20001158 	.word	0x20001158

0800aa44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa4e:	4b21      	ldr	r3, [pc, #132]	; (800aad4 <prvAddCurrentTaskToDelayedList+0x90>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa54:	4b20      	ldr	r3, [pc, #128]	; (800aad8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	3304      	adds	r3, #4
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fe fc08 	bl	8009270 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa66:	d10a      	bne.n	800aa7e <prvAddCurrentTaskToDelayedList+0x3a>
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d007      	beq.n	800aa7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa6e:	4b1a      	ldr	r3, [pc, #104]	; (800aad8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	3304      	adds	r3, #4
 800aa74:	4619      	mov	r1, r3
 800aa76:	4819      	ldr	r0, [pc, #100]	; (800aadc <prvAddCurrentTaskToDelayedList+0x98>)
 800aa78:	f7fe fb9d 	bl	80091b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa7c:	e026      	b.n	800aacc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4413      	add	r3, r2
 800aa84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa86:	4b14      	ldr	r3, [pc, #80]	; (800aad8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d209      	bcs.n	800aaaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa96:	4b12      	ldr	r3, [pc, #72]	; (800aae0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	4b0f      	ldr	r3, [pc, #60]	; (800aad8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	4610      	mov	r0, r2
 800aaa4:	f7fe fbab 	bl	80091fe <vListInsert>
}
 800aaa8:	e010      	b.n	800aacc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aaaa:	4b0e      	ldr	r3, [pc, #56]	; (800aae4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	4b0a      	ldr	r3, [pc, #40]	; (800aad8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	3304      	adds	r3, #4
 800aab4:	4619      	mov	r1, r3
 800aab6:	4610      	mov	r0, r2
 800aab8:	f7fe fba1 	bl	80091fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aabc:	4b0a      	ldr	r3, [pc, #40]	; (800aae8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d202      	bcs.n	800aacc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aac6:	4a08      	ldr	r2, [pc, #32]	; (800aae8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	6013      	str	r3, [r2, #0]
}
 800aacc:	bf00      	nop
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	2000162c 	.word	0x2000162c
 800aad8:	20001154 	.word	0x20001154
 800aadc:	20001614 	.word	0x20001614
 800aae0:	200015e4 	.word	0x200015e4
 800aae4:	200015e0 	.word	0x200015e0
 800aae8:	20001648 	.word	0x20001648

0800aaec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b08a      	sub	sp, #40	; 0x28
 800aaf0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aaf6:	f000 fb07 	bl	800b108 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aafa:	4b1c      	ldr	r3, [pc, #112]	; (800ab6c <xTimerCreateTimerTask+0x80>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d021      	beq.n	800ab46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab02:	2300      	movs	r3, #0
 800ab04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab06:	2300      	movs	r3, #0
 800ab08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab0a:	1d3a      	adds	r2, r7, #4
 800ab0c:	f107 0108 	add.w	r1, r7, #8
 800ab10:	f107 030c 	add.w	r3, r7, #12
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fe fb07 	bl	8009128 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab1a:	6879      	ldr	r1, [r7, #4]
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	9202      	str	r2, [sp, #8]
 800ab22:	9301      	str	r3, [sp, #4]
 800ab24:	2302      	movs	r3, #2
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	2300      	movs	r3, #0
 800ab2a:	460a      	mov	r2, r1
 800ab2c:	4910      	ldr	r1, [pc, #64]	; (800ab70 <xTimerCreateTimerTask+0x84>)
 800ab2e:	4811      	ldr	r0, [pc, #68]	; (800ab74 <xTimerCreateTimerTask+0x88>)
 800ab30:	f7ff f8b4 	bl	8009c9c <xTaskCreateStatic>
 800ab34:	4603      	mov	r3, r0
 800ab36:	4a10      	ldr	r2, [pc, #64]	; (800ab78 <xTimerCreateTimerTask+0x8c>)
 800ab38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ab3a:	4b0f      	ldr	r3, [pc, #60]	; (800ab78 <xTimerCreateTimerTask+0x8c>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d001      	beq.n	800ab46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ab42:	2301      	movs	r3, #1
 800ab44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10a      	bne.n	800ab62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	613b      	str	r3, [r7, #16]
}
 800ab5e:	bf00      	nop
 800ab60:	e7fe      	b.n	800ab60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ab62:	697b      	ldr	r3, [r7, #20]
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3718      	adds	r7, #24
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	20001684 	.word	0x20001684
 800ab70:	0800e8a0 	.word	0x0800e8a0
 800ab74:	0800acb1 	.word	0x0800acb1
 800ab78:	20001688 	.word	0x20001688

0800ab7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b08a      	sub	sp, #40	; 0x28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
 800ab88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10a      	bne.n	800abaa <xTimerGenericCommand+0x2e>
	__asm volatile
 800ab94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab98:	f383 8811 	msr	BASEPRI, r3
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	623b      	str	r3, [r7, #32]
}
 800aba6:	bf00      	nop
 800aba8:	e7fe      	b.n	800aba8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800abaa:	4b1a      	ldr	r3, [pc, #104]	; (800ac14 <xTimerGenericCommand+0x98>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d02a      	beq.n	800ac08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	2b05      	cmp	r3, #5
 800abc2:	dc18      	bgt.n	800abf6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800abc4:	f7ff feb2 	bl	800a92c <xTaskGetSchedulerState>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d109      	bne.n	800abe2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800abce:	4b11      	ldr	r3, [pc, #68]	; (800ac14 <xTimerGenericCommand+0x98>)
 800abd0:	6818      	ldr	r0, [r3, #0]
 800abd2:	f107 0110 	add.w	r1, r7, #16
 800abd6:	2300      	movs	r3, #0
 800abd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abda:	f7fe fc77 	bl	80094cc <xQueueGenericSend>
 800abde:	6278      	str	r0, [r7, #36]	; 0x24
 800abe0:	e012      	b.n	800ac08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800abe2:	4b0c      	ldr	r3, [pc, #48]	; (800ac14 <xTimerGenericCommand+0x98>)
 800abe4:	6818      	ldr	r0, [r3, #0]
 800abe6:	f107 0110 	add.w	r1, r7, #16
 800abea:	2300      	movs	r3, #0
 800abec:	2200      	movs	r2, #0
 800abee:	f7fe fc6d 	bl	80094cc <xQueueGenericSend>
 800abf2:	6278      	str	r0, [r7, #36]	; 0x24
 800abf4:	e008      	b.n	800ac08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800abf6:	4b07      	ldr	r3, [pc, #28]	; (800ac14 <xTimerGenericCommand+0x98>)
 800abf8:	6818      	ldr	r0, [r3, #0]
 800abfa:	f107 0110 	add.w	r1, r7, #16
 800abfe:	2300      	movs	r3, #0
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	f7fe fd61 	bl	80096c8 <xQueueGenericSendFromISR>
 800ac06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3728      	adds	r7, #40	; 0x28
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20001684 	.word	0x20001684

0800ac18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b088      	sub	sp, #32
 800ac1c:	af02      	add	r7, sp, #8
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac22:	4b22      	ldr	r3, [pc, #136]	; (800acac <prvProcessExpiredTimer+0x94>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	3304      	adds	r3, #4
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7fe fb1d 	bl	8009270 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac3c:	f003 0304 	and.w	r3, r3, #4
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d022      	beq.n	800ac8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	699a      	ldr	r2, [r3, #24]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	18d1      	adds	r1, r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	6978      	ldr	r0, [r7, #20]
 800ac52:	f000 f8d1 	bl	800adf8 <prvInsertTimerInActiveList>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d01f      	beq.n	800ac9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	2300      	movs	r3, #0
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	2100      	movs	r1, #0
 800ac66:	6978      	ldr	r0, [r7, #20]
 800ac68:	f7ff ff88 	bl	800ab7c <xTimerGenericCommand>
 800ac6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d113      	bne.n	800ac9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	60fb      	str	r3, [r7, #12]
}
 800ac86:	bf00      	nop
 800ac88:	e7fe      	b.n	800ac88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac90:	f023 0301 	bic.w	r3, r3, #1
 800ac94:	b2da      	uxtb	r2, r3
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	6a1b      	ldr	r3, [r3, #32]
 800aca0:	6978      	ldr	r0, [r7, #20]
 800aca2:	4798      	blx	r3
}
 800aca4:	bf00      	nop
 800aca6:	3718      	adds	r7, #24
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	2000167c 	.word	0x2000167c

0800acb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acb8:	f107 0308 	add.w	r3, r7, #8
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 f857 	bl	800ad70 <prvGetNextExpireTime>
 800acc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	4619      	mov	r1, r3
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f000 f803 	bl	800acd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800acce:	f000 f8d5 	bl	800ae7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acd2:	e7f1      	b.n	800acb8 <prvTimerTask+0x8>

0800acd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800acde:	f7ff fa39 	bl	800a154 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ace2:	f107 0308 	add.w	r3, r7, #8
 800ace6:	4618      	mov	r0, r3
 800ace8:	f000 f866 	bl	800adb8 <prvSampleTimeNow>
 800acec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d130      	bne.n	800ad56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d10a      	bne.n	800ad10 <prvProcessTimerOrBlockTask+0x3c>
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d806      	bhi.n	800ad10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad02:	f7ff fa35 	bl	800a170 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad06:	68f9      	ldr	r1, [r7, #12]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7ff ff85 	bl	800ac18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad0e:	e024      	b.n	800ad5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d008      	beq.n	800ad28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad16:	4b13      	ldr	r3, [pc, #76]	; (800ad64 <prvProcessTimerOrBlockTask+0x90>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d101      	bne.n	800ad24 <prvProcessTimerOrBlockTask+0x50>
 800ad20:	2301      	movs	r3, #1
 800ad22:	e000      	b.n	800ad26 <prvProcessTimerOrBlockTask+0x52>
 800ad24:	2300      	movs	r3, #0
 800ad26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad28:	4b0f      	ldr	r3, [pc, #60]	; (800ad68 <prvProcessTimerOrBlockTask+0x94>)
 800ad2a:	6818      	ldr	r0, [r3, #0]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	4619      	mov	r1, r3
 800ad36:	f7fe ff7d 	bl	8009c34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ad3a:	f7ff fa19 	bl	800a170 <xTaskResumeAll>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10a      	bne.n	800ad5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ad44:	4b09      	ldr	r3, [pc, #36]	; (800ad6c <prvProcessTimerOrBlockTask+0x98>)
 800ad46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	f3bf 8f6f 	isb	sy
}
 800ad54:	e001      	b.n	800ad5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ad56:	f7ff fa0b 	bl	800a170 <xTaskResumeAll>
}
 800ad5a:	bf00      	nop
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	20001680 	.word	0x20001680
 800ad68:	20001684 	.word	0x20001684
 800ad6c:	e000ed04 	.word	0xe000ed04

0800ad70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad78:	4b0e      	ldr	r3, [pc, #56]	; (800adb4 <prvGetNextExpireTime+0x44>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d101      	bne.n	800ad86 <prvGetNextExpireTime+0x16>
 800ad82:	2201      	movs	r2, #1
 800ad84:	e000      	b.n	800ad88 <prvGetNextExpireTime+0x18>
 800ad86:	2200      	movs	r2, #0
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d105      	bne.n	800ada0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad94:	4b07      	ldr	r3, [pc, #28]	; (800adb4 <prvGetNextExpireTime+0x44>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	60fb      	str	r3, [r7, #12]
 800ad9e:	e001      	b.n	800ada4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ada4:	68fb      	ldr	r3, [r7, #12]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3714      	adds	r7, #20
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	2000167c 	.word	0x2000167c

0800adb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800adc0:	f7ff fa74 	bl	800a2ac <xTaskGetTickCount>
 800adc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800adc6:	4b0b      	ldr	r3, [pc, #44]	; (800adf4 <prvSampleTimeNow+0x3c>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d205      	bcs.n	800addc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800add0:	f000 f936 	bl	800b040 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	601a      	str	r2, [r3, #0]
 800adda:	e002      	b.n	800ade2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ade2:	4a04      	ldr	r2, [pc, #16]	; (800adf4 <prvSampleTimeNow+0x3c>)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ade8:	68fb      	ldr	r3, [r7, #12]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	2000168c 	.word	0x2000168c

0800adf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
 800ae04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae06:	2300      	movs	r3, #0
 800ae08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae16:	68ba      	ldr	r2, [r7, #8]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d812      	bhi.n	800ae44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	1ad2      	subs	r2, r2, r3
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d302      	bcc.n	800ae32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	617b      	str	r3, [r7, #20]
 800ae30:	e01b      	b.n	800ae6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae32:	4b10      	ldr	r3, [pc, #64]	; (800ae74 <prvInsertTimerInActiveList+0x7c>)
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	3304      	adds	r3, #4
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	f7fe f9de 	bl	80091fe <vListInsert>
 800ae42:	e012      	b.n	800ae6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d206      	bcs.n	800ae5a <prvInsertTimerInActiveList+0x62>
 800ae4c:	68ba      	ldr	r2, [r7, #8]
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d302      	bcc.n	800ae5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ae54:	2301      	movs	r3, #1
 800ae56:	617b      	str	r3, [r7, #20]
 800ae58:	e007      	b.n	800ae6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae5a:	4b07      	ldr	r3, [pc, #28]	; (800ae78 <prvInsertTimerInActiveList+0x80>)
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	3304      	adds	r3, #4
 800ae62:	4619      	mov	r1, r3
 800ae64:	4610      	mov	r0, r2
 800ae66:	f7fe f9ca 	bl	80091fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ae6a:	697b      	ldr	r3, [r7, #20]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3718      	adds	r7, #24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	20001680 	.word	0x20001680
 800ae78:	2000167c 	.word	0x2000167c

0800ae7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b08e      	sub	sp, #56	; 0x38
 800ae80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae82:	e0ca      	b.n	800b01a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	da18      	bge.n	800aebc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae8a:	1d3b      	adds	r3, r7, #4
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d10a      	bne.n	800aeac <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ae96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9a:	f383 8811 	msr	BASEPRI, r3
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	61fb      	str	r3, [r7, #28]
}
 800aea8:	bf00      	nop
 800aeaa:	e7fe      	b.n	800aeaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aeac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeb2:	6850      	ldr	r0, [r2, #4]
 800aeb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeb6:	6892      	ldr	r2, [r2, #8]
 800aeb8:	4611      	mov	r1, r2
 800aeba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f2c0 80ab 	blt.w	800b01a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeca:	695b      	ldr	r3, [r3, #20]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d004      	beq.n	800aeda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed2:	3304      	adds	r3, #4
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7fe f9cb 	bl	8009270 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aeda:	463b      	mov	r3, r7
 800aedc:	4618      	mov	r0, r3
 800aede:	f7ff ff6b 	bl	800adb8 <prvSampleTimeNow>
 800aee2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b09      	cmp	r3, #9
 800aee8:	f200 8096 	bhi.w	800b018 <prvProcessReceivedCommands+0x19c>
 800aeec:	a201      	add	r2, pc, #4	; (adr r2, 800aef4 <prvProcessReceivedCommands+0x78>)
 800aeee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef2:	bf00      	nop
 800aef4:	0800af1d 	.word	0x0800af1d
 800aef8:	0800af1d 	.word	0x0800af1d
 800aefc:	0800af1d 	.word	0x0800af1d
 800af00:	0800af91 	.word	0x0800af91
 800af04:	0800afa5 	.word	0x0800afa5
 800af08:	0800afef 	.word	0x0800afef
 800af0c:	0800af1d 	.word	0x0800af1d
 800af10:	0800af1d 	.word	0x0800af1d
 800af14:	0800af91 	.word	0x0800af91
 800af18:	0800afa5 	.word	0x0800afa5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af22:	f043 0301 	orr.w	r3, r3, #1
 800af26:	b2da      	uxtb	r2, r3
 800af28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af2e:	68ba      	ldr	r2, [r7, #8]
 800af30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af32:	699b      	ldr	r3, [r3, #24]
 800af34:	18d1      	adds	r1, r2, r3
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af3c:	f7ff ff5c 	bl	800adf8 <prvInsertTimerInActiveList>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d069      	beq.n	800b01a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af54:	f003 0304 	and.w	r3, r3, #4
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d05e      	beq.n	800b01a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	441a      	add	r2, r3
 800af64:	2300      	movs	r3, #0
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	2300      	movs	r3, #0
 800af6a:	2100      	movs	r1, #0
 800af6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af6e:	f7ff fe05 	bl	800ab7c <xTimerGenericCommand>
 800af72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800af74:	6a3b      	ldr	r3, [r7, #32]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d14f      	bne.n	800b01a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800af7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7e:	f383 8811 	msr	BASEPRI, r3
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	61bb      	str	r3, [r7, #24]
}
 800af8c:	bf00      	nop
 800af8e:	e7fe      	b.n	800af8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af96:	f023 0301 	bic.w	r3, r3, #1
 800af9a:	b2da      	uxtb	r2, r3
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800afa2:	e03a      	b.n	800b01a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afaa:	f043 0301 	orr.w	r3, r3, #1
 800afae:	b2da      	uxtb	r2, r3
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800afbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10a      	bne.n	800afda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800afc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	617b      	str	r3, [r7, #20]
}
 800afd6:	bf00      	nop
 800afd8:	e7fe      	b.n	800afd8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800afda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afdc:	699a      	ldr	r2, [r3, #24]
 800afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe0:	18d1      	adds	r1, r2, r3
 800afe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afe8:	f7ff ff06 	bl	800adf8 <prvInsertTimerInActiveList>
					break;
 800afec:	e015      	b.n	800b01a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800afee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aff4:	f003 0302 	and.w	r3, r3, #2
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d103      	bne.n	800b004 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800affc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800affe:	f000 fbdf 	bl	800b7c0 <vPortFree>
 800b002:	e00a      	b.n	800b01a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b006:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b00a:	f023 0301 	bic.w	r3, r3, #1
 800b00e:	b2da      	uxtb	r2, r3
 800b010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b016:	e000      	b.n	800b01a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b018:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b01a:	4b08      	ldr	r3, [pc, #32]	; (800b03c <prvProcessReceivedCommands+0x1c0>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	1d39      	adds	r1, r7, #4
 800b020:	2200      	movs	r2, #0
 800b022:	4618      	mov	r0, r3
 800b024:	f7fe fbec 	bl	8009800 <xQueueReceive>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f47f af2a 	bne.w	800ae84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b030:	bf00      	nop
 800b032:	bf00      	nop
 800b034:	3730      	adds	r7, #48	; 0x30
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	20001684 	.word	0x20001684

0800b040 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b088      	sub	sp, #32
 800b044:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b046:	e048      	b.n	800b0da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b048:	4b2d      	ldr	r3, [pc, #180]	; (800b100 <prvSwitchTimerLists+0xc0>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b052:	4b2b      	ldr	r3, [pc, #172]	; (800b100 <prvSwitchTimerLists+0xc0>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	3304      	adds	r3, #4
 800b060:	4618      	mov	r0, r3
 800b062:	f7fe f905 	bl	8009270 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6a1b      	ldr	r3, [r3, #32]
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b074:	f003 0304 	and.w	r3, r3, #4
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d02e      	beq.n	800b0da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	693a      	ldr	r2, [r7, #16]
 800b082:	4413      	add	r3, r2
 800b084:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b086:	68ba      	ldr	r2, [r7, #8]
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d90e      	bls.n	800b0ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	68ba      	ldr	r2, [r7, #8]
 800b092:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b09a:	4b19      	ldr	r3, [pc, #100]	; (800b100 <prvSwitchTimerLists+0xc0>)
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	3304      	adds	r3, #4
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	f7fe f8aa 	bl	80091fe <vListInsert>
 800b0aa:	e016      	b.n	800b0da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f7ff fd60 	bl	800ab7c <xTimerGenericCommand>
 800b0bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d10a      	bne.n	800b0da <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c8:	f383 8811 	msr	BASEPRI, r3
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	603b      	str	r3, [r7, #0]
}
 800b0d6:	bf00      	nop
 800b0d8:	e7fe      	b.n	800b0d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0da:	4b09      	ldr	r3, [pc, #36]	; (800b100 <prvSwitchTimerLists+0xc0>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d1b1      	bne.n	800b048 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b0e4:	4b06      	ldr	r3, [pc, #24]	; (800b100 <prvSwitchTimerLists+0xc0>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b0ea:	4b06      	ldr	r3, [pc, #24]	; (800b104 <prvSwitchTimerLists+0xc4>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a04      	ldr	r2, [pc, #16]	; (800b100 <prvSwitchTimerLists+0xc0>)
 800b0f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b0f2:	4a04      	ldr	r2, [pc, #16]	; (800b104 <prvSwitchTimerLists+0xc4>)
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	6013      	str	r3, [r2, #0]
}
 800b0f8:	bf00      	nop
 800b0fa:	3718      	adds	r7, #24
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	2000167c 	.word	0x2000167c
 800b104:	20001680 	.word	0x20001680

0800b108 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b10e:	f000 f969 	bl	800b3e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b112:	4b15      	ldr	r3, [pc, #84]	; (800b168 <prvCheckForValidListAndQueue+0x60>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d120      	bne.n	800b15c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b11a:	4814      	ldr	r0, [pc, #80]	; (800b16c <prvCheckForValidListAndQueue+0x64>)
 800b11c:	f7fe f81e 	bl	800915c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b120:	4813      	ldr	r0, [pc, #76]	; (800b170 <prvCheckForValidListAndQueue+0x68>)
 800b122:	f7fe f81b 	bl	800915c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b126:	4b13      	ldr	r3, [pc, #76]	; (800b174 <prvCheckForValidListAndQueue+0x6c>)
 800b128:	4a10      	ldr	r2, [pc, #64]	; (800b16c <prvCheckForValidListAndQueue+0x64>)
 800b12a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b12c:	4b12      	ldr	r3, [pc, #72]	; (800b178 <prvCheckForValidListAndQueue+0x70>)
 800b12e:	4a10      	ldr	r2, [pc, #64]	; (800b170 <prvCheckForValidListAndQueue+0x68>)
 800b130:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b132:	2300      	movs	r3, #0
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	4b11      	ldr	r3, [pc, #68]	; (800b17c <prvCheckForValidListAndQueue+0x74>)
 800b138:	4a11      	ldr	r2, [pc, #68]	; (800b180 <prvCheckForValidListAndQueue+0x78>)
 800b13a:	2110      	movs	r1, #16
 800b13c:	200a      	movs	r0, #10
 800b13e:	f7fe f929 	bl	8009394 <xQueueGenericCreateStatic>
 800b142:	4603      	mov	r3, r0
 800b144:	4a08      	ldr	r2, [pc, #32]	; (800b168 <prvCheckForValidListAndQueue+0x60>)
 800b146:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b148:	4b07      	ldr	r3, [pc, #28]	; (800b168 <prvCheckForValidListAndQueue+0x60>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d005      	beq.n	800b15c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b150:	4b05      	ldr	r3, [pc, #20]	; (800b168 <prvCheckForValidListAndQueue+0x60>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	490b      	ldr	r1, [pc, #44]	; (800b184 <prvCheckForValidListAndQueue+0x7c>)
 800b156:	4618      	mov	r0, r3
 800b158:	f7fe fd42 	bl	8009be0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b15c:	f000 f972 	bl	800b444 <vPortExitCritical>
}
 800b160:	bf00      	nop
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	20001684 	.word	0x20001684
 800b16c:	20001654 	.word	0x20001654
 800b170:	20001668 	.word	0x20001668
 800b174:	2000167c 	.word	0x2000167c
 800b178:	20001680 	.word	0x20001680
 800b17c:	20001730 	.word	0x20001730
 800b180:	20001690 	.word	0x20001690
 800b184:	0800e8a8 	.word	0x0800e8a8

0800b188 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	3b04      	subs	r3, #4
 800b198:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b1a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	3b04      	subs	r3, #4
 800b1a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	f023 0201 	bic.w	r2, r3, #1
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	3b04      	subs	r3, #4
 800b1b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b1b8:	4a0c      	ldr	r2, [pc, #48]	; (800b1ec <pxPortInitialiseStack+0x64>)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3b14      	subs	r3, #20
 800b1c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	3b04      	subs	r3, #4
 800b1ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f06f 0202 	mvn.w	r2, #2
 800b1d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	3b20      	subs	r3, #32
 800b1dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b1de:	68fb      	ldr	r3, [r7, #12]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr
 800b1ec:	0800b1f1 	.word	0x0800b1f1

0800b1f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b1fa:	4b12      	ldr	r3, [pc, #72]	; (800b244 <prvTaskExitError+0x54>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b202:	d00a      	beq.n	800b21a <prvTaskExitError+0x2a>
	__asm volatile
 800b204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b208:	f383 8811 	msr	BASEPRI, r3
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	60fb      	str	r3, [r7, #12]
}
 800b216:	bf00      	nop
 800b218:	e7fe      	b.n	800b218 <prvTaskExitError+0x28>
	__asm volatile
 800b21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	60bb      	str	r3, [r7, #8]
}
 800b22c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b22e:	bf00      	nop
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d0fc      	beq.n	800b230 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b236:	bf00      	nop
 800b238:	bf00      	nop
 800b23a:	3714      	adds	r7, #20
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr
 800b244:	20000020 	.word	0x20000020
	...

0800b250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b250:	4b07      	ldr	r3, [pc, #28]	; (800b270 <pxCurrentTCBConst2>)
 800b252:	6819      	ldr	r1, [r3, #0]
 800b254:	6808      	ldr	r0, [r1, #0]
 800b256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25a:	f380 8809 	msr	PSP, r0
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f04f 0000 	mov.w	r0, #0
 800b266:	f380 8811 	msr	BASEPRI, r0
 800b26a:	4770      	bx	lr
 800b26c:	f3af 8000 	nop.w

0800b270 <pxCurrentTCBConst2>:
 800b270:	20001154 	.word	0x20001154
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b274:	bf00      	nop
 800b276:	bf00      	nop

0800b278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b278:	4808      	ldr	r0, [pc, #32]	; (800b29c <prvPortStartFirstTask+0x24>)
 800b27a:	6800      	ldr	r0, [r0, #0]
 800b27c:	6800      	ldr	r0, [r0, #0]
 800b27e:	f380 8808 	msr	MSP, r0
 800b282:	f04f 0000 	mov.w	r0, #0
 800b286:	f380 8814 	msr	CONTROL, r0
 800b28a:	b662      	cpsie	i
 800b28c:	b661      	cpsie	f
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	f3bf 8f6f 	isb	sy
 800b296:	df00      	svc	0
 800b298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b29a:	bf00      	nop
 800b29c:	e000ed08 	.word	0xe000ed08

0800b2a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b086      	sub	sp, #24
 800b2a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b2a6:	4b46      	ldr	r3, [pc, #280]	; (800b3c0 <xPortStartScheduler+0x120>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a46      	ldr	r2, [pc, #280]	; (800b3c4 <xPortStartScheduler+0x124>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d10a      	bne.n	800b2c6 <xPortStartScheduler+0x26>
	__asm volatile
 800b2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	613b      	str	r3, [r7, #16]
}
 800b2c2:	bf00      	nop
 800b2c4:	e7fe      	b.n	800b2c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b2c6:	4b3e      	ldr	r3, [pc, #248]	; (800b3c0 <xPortStartScheduler+0x120>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a3f      	ldr	r2, [pc, #252]	; (800b3c8 <xPortStartScheduler+0x128>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d10a      	bne.n	800b2e6 <xPortStartScheduler+0x46>
	__asm volatile
 800b2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	60fb      	str	r3, [r7, #12]
}
 800b2e2:	bf00      	nop
 800b2e4:	e7fe      	b.n	800b2e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b2e6:	4b39      	ldr	r3, [pc, #228]	; (800b3cc <xPortStartScheduler+0x12c>)
 800b2e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	22ff      	movs	r2, #255	; 0xff
 800b2f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b300:	78fb      	ldrb	r3, [r7, #3]
 800b302:	b2db      	uxtb	r3, r3
 800b304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b308:	b2da      	uxtb	r2, r3
 800b30a:	4b31      	ldr	r3, [pc, #196]	; (800b3d0 <xPortStartScheduler+0x130>)
 800b30c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b30e:	4b31      	ldr	r3, [pc, #196]	; (800b3d4 <xPortStartScheduler+0x134>)
 800b310:	2207      	movs	r2, #7
 800b312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b314:	e009      	b.n	800b32a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b316:	4b2f      	ldr	r3, [pc, #188]	; (800b3d4 <xPortStartScheduler+0x134>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	3b01      	subs	r3, #1
 800b31c:	4a2d      	ldr	r2, [pc, #180]	; (800b3d4 <xPortStartScheduler+0x134>)
 800b31e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b320:	78fb      	ldrb	r3, [r7, #3]
 800b322:	b2db      	uxtb	r3, r3
 800b324:	005b      	lsls	r3, r3, #1
 800b326:	b2db      	uxtb	r3, r3
 800b328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b32a:	78fb      	ldrb	r3, [r7, #3]
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b332:	2b80      	cmp	r3, #128	; 0x80
 800b334:	d0ef      	beq.n	800b316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b336:	4b27      	ldr	r3, [pc, #156]	; (800b3d4 <xPortStartScheduler+0x134>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f1c3 0307 	rsb	r3, r3, #7
 800b33e:	2b04      	cmp	r3, #4
 800b340:	d00a      	beq.n	800b358 <xPortStartScheduler+0xb8>
	__asm volatile
 800b342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b346:	f383 8811 	msr	BASEPRI, r3
 800b34a:	f3bf 8f6f 	isb	sy
 800b34e:	f3bf 8f4f 	dsb	sy
 800b352:	60bb      	str	r3, [r7, #8]
}
 800b354:	bf00      	nop
 800b356:	e7fe      	b.n	800b356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b358:	4b1e      	ldr	r3, [pc, #120]	; (800b3d4 <xPortStartScheduler+0x134>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	021b      	lsls	r3, r3, #8
 800b35e:	4a1d      	ldr	r2, [pc, #116]	; (800b3d4 <xPortStartScheduler+0x134>)
 800b360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b362:	4b1c      	ldr	r3, [pc, #112]	; (800b3d4 <xPortStartScheduler+0x134>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b36a:	4a1a      	ldr	r2, [pc, #104]	; (800b3d4 <xPortStartScheduler+0x134>)
 800b36c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	b2da      	uxtb	r2, r3
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b376:	4b18      	ldr	r3, [pc, #96]	; (800b3d8 <xPortStartScheduler+0x138>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a17      	ldr	r2, [pc, #92]	; (800b3d8 <xPortStartScheduler+0x138>)
 800b37c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b382:	4b15      	ldr	r3, [pc, #84]	; (800b3d8 <xPortStartScheduler+0x138>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a14      	ldr	r2, [pc, #80]	; (800b3d8 <xPortStartScheduler+0x138>)
 800b388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b38c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b38e:	f000 f8dd 	bl	800b54c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b392:	4b12      	ldr	r3, [pc, #72]	; (800b3dc <xPortStartScheduler+0x13c>)
 800b394:	2200      	movs	r2, #0
 800b396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b398:	f000 f8fc 	bl	800b594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b39c:	4b10      	ldr	r3, [pc, #64]	; (800b3e0 <xPortStartScheduler+0x140>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a0f      	ldr	r2, [pc, #60]	; (800b3e0 <xPortStartScheduler+0x140>)
 800b3a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b3a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b3a8:	f7ff ff66 	bl	800b278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b3ac:	f7ff f848 	bl	800a440 <vTaskSwitchContext>
	prvTaskExitError();
 800b3b0:	f7ff ff1e 	bl	800b1f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b3b4:	2300      	movs	r3, #0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3718      	adds	r7, #24
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	e000ed00 	.word	0xe000ed00
 800b3c4:	410fc271 	.word	0x410fc271
 800b3c8:	410fc270 	.word	0x410fc270
 800b3cc:	e000e400 	.word	0xe000e400
 800b3d0:	20001780 	.word	0x20001780
 800b3d4:	20001784 	.word	0x20001784
 800b3d8:	e000ed20 	.word	0xe000ed20
 800b3dc:	20000020 	.word	0x20000020
 800b3e0:	e000ef34 	.word	0xe000ef34

0800b3e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
	__asm volatile
 800b3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ee:	f383 8811 	msr	BASEPRI, r3
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	607b      	str	r3, [r7, #4]
}
 800b3fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b3fe:	4b0f      	ldr	r3, [pc, #60]	; (800b43c <vPortEnterCritical+0x58>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	3301      	adds	r3, #1
 800b404:	4a0d      	ldr	r2, [pc, #52]	; (800b43c <vPortEnterCritical+0x58>)
 800b406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b408:	4b0c      	ldr	r3, [pc, #48]	; (800b43c <vPortEnterCritical+0x58>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d10f      	bne.n	800b430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b410:	4b0b      	ldr	r3, [pc, #44]	; (800b440 <vPortEnterCritical+0x5c>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00a      	beq.n	800b430 <vPortEnterCritical+0x4c>
	__asm volatile
 800b41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	603b      	str	r3, [r7, #0]
}
 800b42c:	bf00      	nop
 800b42e:	e7fe      	b.n	800b42e <vPortEnterCritical+0x4a>
	}
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr
 800b43c:	20000020 	.word	0x20000020
 800b440:	e000ed04 	.word	0xe000ed04

0800b444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b44a:	4b12      	ldr	r3, [pc, #72]	; (800b494 <vPortExitCritical+0x50>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d10a      	bne.n	800b468 <vPortExitCritical+0x24>
	__asm volatile
 800b452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b456:	f383 8811 	msr	BASEPRI, r3
 800b45a:	f3bf 8f6f 	isb	sy
 800b45e:	f3bf 8f4f 	dsb	sy
 800b462:	607b      	str	r3, [r7, #4]
}
 800b464:	bf00      	nop
 800b466:	e7fe      	b.n	800b466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b468:	4b0a      	ldr	r3, [pc, #40]	; (800b494 <vPortExitCritical+0x50>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	3b01      	subs	r3, #1
 800b46e:	4a09      	ldr	r2, [pc, #36]	; (800b494 <vPortExitCritical+0x50>)
 800b470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b472:	4b08      	ldr	r3, [pc, #32]	; (800b494 <vPortExitCritical+0x50>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d105      	bne.n	800b486 <vPortExitCritical+0x42>
 800b47a:	2300      	movs	r3, #0
 800b47c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	f383 8811 	msr	BASEPRI, r3
}
 800b484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b486:	bf00      	nop
 800b488:	370c      	adds	r7, #12
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	20000020 	.word	0x20000020
	...

0800b4a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b4a0:	f3ef 8009 	mrs	r0, PSP
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	4b15      	ldr	r3, [pc, #84]	; (800b500 <pxCurrentTCBConst>)
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	f01e 0f10 	tst.w	lr, #16
 800b4b0:	bf08      	it	eq
 800b4b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b4b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ba:	6010      	str	r0, [r2, #0]
 800b4bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b4c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b4c4:	f380 8811 	msr	BASEPRI, r0
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f7fe ffb6 	bl	800a440 <vTaskSwitchContext>
 800b4d4:	f04f 0000 	mov.w	r0, #0
 800b4d8:	f380 8811 	msr	BASEPRI, r0
 800b4dc:	bc09      	pop	{r0, r3}
 800b4de:	6819      	ldr	r1, [r3, #0]
 800b4e0:	6808      	ldr	r0, [r1, #0]
 800b4e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e6:	f01e 0f10 	tst.w	lr, #16
 800b4ea:	bf08      	it	eq
 800b4ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b4f0:	f380 8809 	msr	PSP, r0
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	f3af 8000 	nop.w

0800b500 <pxCurrentTCBConst>:
 800b500:	20001154 	.word	0x20001154
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b504:	bf00      	nop
 800b506:	bf00      	nop

0800b508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	607b      	str	r3, [r7, #4]
}
 800b520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b522:	f7fe fed3 	bl	800a2cc <xTaskIncrementTick>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d003      	beq.n	800b534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b52c:	4b06      	ldr	r3, [pc, #24]	; (800b548 <xPortSysTickHandler+0x40>)
 800b52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b532:	601a      	str	r2, [r3, #0]
 800b534:	2300      	movs	r3, #0
 800b536:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	f383 8811 	msr	BASEPRI, r3
}
 800b53e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b540:	bf00      	nop
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	e000ed04 	.word	0xe000ed04

0800b54c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b54c:	b480      	push	{r7}
 800b54e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b550:	4b0b      	ldr	r3, [pc, #44]	; (800b580 <vPortSetupTimerInterrupt+0x34>)
 800b552:	2200      	movs	r2, #0
 800b554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b556:	4b0b      	ldr	r3, [pc, #44]	; (800b584 <vPortSetupTimerInterrupt+0x38>)
 800b558:	2200      	movs	r2, #0
 800b55a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b55c:	4b0a      	ldr	r3, [pc, #40]	; (800b588 <vPortSetupTimerInterrupt+0x3c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a0a      	ldr	r2, [pc, #40]	; (800b58c <vPortSetupTimerInterrupt+0x40>)
 800b562:	fba2 2303 	umull	r2, r3, r2, r3
 800b566:	099b      	lsrs	r3, r3, #6
 800b568:	4a09      	ldr	r2, [pc, #36]	; (800b590 <vPortSetupTimerInterrupt+0x44>)
 800b56a:	3b01      	subs	r3, #1
 800b56c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b56e:	4b04      	ldr	r3, [pc, #16]	; (800b580 <vPortSetupTimerInterrupt+0x34>)
 800b570:	2207      	movs	r2, #7
 800b572:	601a      	str	r2, [r3, #0]
}
 800b574:	bf00      	nop
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr
 800b57e:	bf00      	nop
 800b580:	e000e010 	.word	0xe000e010
 800b584:	e000e018 	.word	0xe000e018
 800b588:	20000014 	.word	0x20000014
 800b58c:	10624dd3 	.word	0x10624dd3
 800b590:	e000e014 	.word	0xe000e014

0800b594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b5a4 <vPortEnableVFP+0x10>
 800b598:	6801      	ldr	r1, [r0, #0]
 800b59a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b59e:	6001      	str	r1, [r0, #0]
 800b5a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b5a2:	bf00      	nop
 800b5a4:	e000ed88 	.word	0xe000ed88

0800b5a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b5ae:	f3ef 8305 	mrs	r3, IPSR
 800b5b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2b0f      	cmp	r3, #15
 800b5b8:	d914      	bls.n	800b5e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b5ba:	4a17      	ldr	r2, [pc, #92]	; (800b618 <vPortValidateInterruptPriority+0x70>)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	4413      	add	r3, r2
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b5c4:	4b15      	ldr	r3, [pc, #84]	; (800b61c <vPortValidateInterruptPriority+0x74>)
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	7afa      	ldrb	r2, [r7, #11]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d20a      	bcs.n	800b5e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	607b      	str	r3, [r7, #4]
}
 800b5e0:	bf00      	nop
 800b5e2:	e7fe      	b.n	800b5e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b5e4:	4b0e      	ldr	r3, [pc, #56]	; (800b620 <vPortValidateInterruptPriority+0x78>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b5ec:	4b0d      	ldr	r3, [pc, #52]	; (800b624 <vPortValidateInterruptPriority+0x7c>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d90a      	bls.n	800b60a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f8:	f383 8811 	msr	BASEPRI, r3
 800b5fc:	f3bf 8f6f 	isb	sy
 800b600:	f3bf 8f4f 	dsb	sy
 800b604:	603b      	str	r3, [r7, #0]
}
 800b606:	bf00      	nop
 800b608:	e7fe      	b.n	800b608 <vPortValidateInterruptPriority+0x60>
	}
 800b60a:	bf00      	nop
 800b60c:	3714      	adds	r7, #20
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	e000e3f0 	.word	0xe000e3f0
 800b61c:	20001780 	.word	0x20001780
 800b620:	e000ed0c 	.word	0xe000ed0c
 800b624:	20001784 	.word	0x20001784

0800b628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b08a      	sub	sp, #40	; 0x28
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b630:	2300      	movs	r3, #0
 800b632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b634:	f7fe fd8e 	bl	800a154 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b638:	4b5b      	ldr	r3, [pc, #364]	; (800b7a8 <pvPortMalloc+0x180>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d101      	bne.n	800b644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b640:	f000 f920 	bl	800b884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b644:	4b59      	ldr	r3, [pc, #356]	; (800b7ac <pvPortMalloc+0x184>)
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4013      	ands	r3, r2
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f040 8093 	bne.w	800b778 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d01d      	beq.n	800b694 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b658:	2208      	movs	r2, #8
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4413      	add	r3, r2
 800b65e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f003 0307 	and.w	r3, r3, #7
 800b666:	2b00      	cmp	r3, #0
 800b668:	d014      	beq.n	800b694 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f023 0307 	bic.w	r3, r3, #7
 800b670:	3308      	adds	r3, #8
 800b672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f003 0307 	and.w	r3, r3, #7
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00a      	beq.n	800b694 <pvPortMalloc+0x6c>
	__asm volatile
 800b67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	617b      	str	r3, [r7, #20]
}
 800b690:	bf00      	nop
 800b692:	e7fe      	b.n	800b692 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d06e      	beq.n	800b778 <pvPortMalloc+0x150>
 800b69a:	4b45      	ldr	r3, [pc, #276]	; (800b7b0 <pvPortMalloc+0x188>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d869      	bhi.n	800b778 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b6a4:	4b43      	ldr	r3, [pc, #268]	; (800b7b4 <pvPortMalloc+0x18c>)
 800b6a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b6a8:	4b42      	ldr	r3, [pc, #264]	; (800b7b4 <pvPortMalloc+0x18c>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6ae:	e004      	b.n	800b6ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d903      	bls.n	800b6cc <pvPortMalloc+0xa4>
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1f1      	bne.n	800b6b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b6cc:	4b36      	ldr	r3, [pc, #216]	; (800b7a8 <pvPortMalloc+0x180>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d050      	beq.n	800b778 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2208      	movs	r2, #8
 800b6dc:	4413      	add	r3, r2
 800b6de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	6a3b      	ldr	r3, [r7, #32]
 800b6e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ea:	685a      	ldr	r2, [r3, #4]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	1ad2      	subs	r2, r2, r3
 800b6f0:	2308      	movs	r3, #8
 800b6f2:	005b      	lsls	r3, r3, #1
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d91f      	bls.n	800b738 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b6f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	f003 0307 	and.w	r3, r3, #7
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00a      	beq.n	800b720 <pvPortMalloc+0xf8>
	__asm volatile
 800b70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	613b      	str	r3, [r7, #16]
}
 800b71c:	bf00      	nop
 800b71e:	e7fe      	b.n	800b71e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	685a      	ldr	r2, [r3, #4]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	1ad2      	subs	r2, r2, r3
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b732:	69b8      	ldr	r0, [r7, #24]
 800b734:	f000 f908 	bl	800b948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b738:	4b1d      	ldr	r3, [pc, #116]	; (800b7b0 <pvPortMalloc+0x188>)
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	4a1b      	ldr	r2, [pc, #108]	; (800b7b0 <pvPortMalloc+0x188>)
 800b744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b746:	4b1a      	ldr	r3, [pc, #104]	; (800b7b0 <pvPortMalloc+0x188>)
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	4b1b      	ldr	r3, [pc, #108]	; (800b7b8 <pvPortMalloc+0x190>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d203      	bcs.n	800b75a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b752:	4b17      	ldr	r3, [pc, #92]	; (800b7b0 <pvPortMalloc+0x188>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a18      	ldr	r2, [pc, #96]	; (800b7b8 <pvPortMalloc+0x190>)
 800b758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	4b13      	ldr	r3, [pc, #76]	; (800b7ac <pvPortMalloc+0x184>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	431a      	orrs	r2, r3
 800b764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76a:	2200      	movs	r2, #0
 800b76c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b76e:	4b13      	ldr	r3, [pc, #76]	; (800b7bc <pvPortMalloc+0x194>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	3301      	adds	r3, #1
 800b774:	4a11      	ldr	r2, [pc, #68]	; (800b7bc <pvPortMalloc+0x194>)
 800b776:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b778:	f7fe fcfa 	bl	800a170 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	f003 0307 	and.w	r3, r3, #7
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00a      	beq.n	800b79c <pvPortMalloc+0x174>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	60fb      	str	r3, [r7, #12]
}
 800b798:	bf00      	nop
 800b79a:	e7fe      	b.n	800b79a <pvPortMalloc+0x172>
	return pvReturn;
 800b79c:	69fb      	ldr	r3, [r7, #28]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3728      	adds	r7, #40	; 0x28
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20005390 	.word	0x20005390
 800b7ac:	200053a4 	.word	0x200053a4
 800b7b0:	20005394 	.word	0x20005394
 800b7b4:	20005388 	.word	0x20005388
 800b7b8:	20005398 	.word	0x20005398
 800b7bc:	2000539c 	.word	0x2000539c

0800b7c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d04d      	beq.n	800b86e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b7d2:	2308      	movs	r3, #8
 800b7d4:	425b      	negs	r3, r3
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	4413      	add	r3, r2
 800b7da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	685a      	ldr	r2, [r3, #4]
 800b7e4:	4b24      	ldr	r3, [pc, #144]	; (800b878 <vPortFree+0xb8>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d10a      	bne.n	800b804 <vPortFree+0x44>
	__asm volatile
 800b7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f2:	f383 8811 	msr	BASEPRI, r3
 800b7f6:	f3bf 8f6f 	isb	sy
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	60fb      	str	r3, [r7, #12]
}
 800b800:	bf00      	nop
 800b802:	e7fe      	b.n	800b802 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00a      	beq.n	800b822 <vPortFree+0x62>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	60bb      	str	r3, [r7, #8]
}
 800b81e:	bf00      	nop
 800b820:	e7fe      	b.n	800b820 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	685a      	ldr	r2, [r3, #4]
 800b826:	4b14      	ldr	r3, [pc, #80]	; (800b878 <vPortFree+0xb8>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4013      	ands	r3, r2
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d01e      	beq.n	800b86e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d11a      	bne.n	800b86e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	685a      	ldr	r2, [r3, #4]
 800b83c:	4b0e      	ldr	r3, [pc, #56]	; (800b878 <vPortFree+0xb8>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	43db      	mvns	r3, r3
 800b842:	401a      	ands	r2, r3
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b848:	f7fe fc84 	bl	800a154 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	685a      	ldr	r2, [r3, #4]
 800b850:	4b0a      	ldr	r3, [pc, #40]	; (800b87c <vPortFree+0xbc>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4413      	add	r3, r2
 800b856:	4a09      	ldr	r2, [pc, #36]	; (800b87c <vPortFree+0xbc>)
 800b858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b85a:	6938      	ldr	r0, [r7, #16]
 800b85c:	f000 f874 	bl	800b948 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b860:	4b07      	ldr	r3, [pc, #28]	; (800b880 <vPortFree+0xc0>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	3301      	adds	r3, #1
 800b866:	4a06      	ldr	r2, [pc, #24]	; (800b880 <vPortFree+0xc0>)
 800b868:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b86a:	f7fe fc81 	bl	800a170 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b86e:	bf00      	nop
 800b870:	3718      	adds	r7, #24
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	200053a4 	.word	0x200053a4
 800b87c:	20005394 	.word	0x20005394
 800b880:	200053a0 	.word	0x200053a0

0800b884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b88a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b88e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b890:	4b27      	ldr	r3, [pc, #156]	; (800b930 <prvHeapInit+0xac>)
 800b892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f003 0307 	and.w	r3, r3, #7
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00c      	beq.n	800b8b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	3307      	adds	r3, #7
 800b8a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f023 0307 	bic.w	r3, r3, #7
 800b8aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	4a1f      	ldr	r2, [pc, #124]	; (800b930 <prvHeapInit+0xac>)
 800b8b4:	4413      	add	r3, r2
 800b8b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b8bc:	4a1d      	ldr	r2, [pc, #116]	; (800b934 <prvHeapInit+0xb0>)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b8c2:	4b1c      	ldr	r3, [pc, #112]	; (800b934 <prvHeapInit+0xb0>)
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	68ba      	ldr	r2, [r7, #8]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b8d0:	2208      	movs	r2, #8
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	1a9b      	subs	r3, r3, r2
 800b8d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f023 0307 	bic.w	r3, r3, #7
 800b8de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	4a15      	ldr	r2, [pc, #84]	; (800b938 <prvHeapInit+0xb4>)
 800b8e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b8e6:	4b14      	ldr	r3, [pc, #80]	; (800b938 <prvHeapInit+0xb4>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b8ee:	4b12      	ldr	r3, [pc, #72]	; (800b938 <prvHeapInit+0xb4>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	1ad2      	subs	r2, r2, r3
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b904:	4b0c      	ldr	r3, [pc, #48]	; (800b938 <prvHeapInit+0xb4>)
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	4a0a      	ldr	r2, [pc, #40]	; (800b93c <prvHeapInit+0xb8>)
 800b912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	4a09      	ldr	r2, [pc, #36]	; (800b940 <prvHeapInit+0xbc>)
 800b91a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b91c:	4b09      	ldr	r3, [pc, #36]	; (800b944 <prvHeapInit+0xc0>)
 800b91e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b922:	601a      	str	r2, [r3, #0]
}
 800b924:	bf00      	nop
 800b926:	3714      	adds	r7, #20
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr
 800b930:	20001788 	.word	0x20001788
 800b934:	20005388 	.word	0x20005388
 800b938:	20005390 	.word	0x20005390
 800b93c:	20005398 	.word	0x20005398
 800b940:	20005394 	.word	0x20005394
 800b944:	200053a4 	.word	0x200053a4

0800b948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b950:	4b28      	ldr	r3, [pc, #160]	; (800b9f4 <prvInsertBlockIntoFreeList+0xac>)
 800b952:	60fb      	str	r3, [r7, #12]
 800b954:	e002      	b.n	800b95c <prvInsertBlockIntoFreeList+0x14>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	60fb      	str	r3, [r7, #12]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	429a      	cmp	r2, r3
 800b964:	d8f7      	bhi.n	800b956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	68ba      	ldr	r2, [r7, #8]
 800b970:	4413      	add	r3, r2
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	429a      	cmp	r2, r3
 800b976:	d108      	bne.n	800b98a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	685a      	ldr	r2, [r3, #4]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	441a      	add	r2, r3
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	441a      	add	r2, r3
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d118      	bne.n	800b9d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	4b15      	ldr	r3, [pc, #84]	; (800b9f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d00d      	beq.n	800b9c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	685a      	ldr	r2, [r3, #4]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	441a      	add	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	601a      	str	r2, [r3, #0]
 800b9c4:	e008      	b.n	800b9d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b9c6:	4b0c      	ldr	r3, [pc, #48]	; (800b9f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	601a      	str	r2, [r3, #0]
 800b9ce:	e003      	b.n	800b9d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d002      	beq.n	800b9e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9e6:	bf00      	nop
 800b9e8:	3714      	adds	r7, #20
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	20005388 	.word	0x20005388
 800b9f8:	20005390 	.word	0x20005390

0800b9fc <__cvt>:
 800b9fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba00:	ec55 4b10 	vmov	r4, r5, d0
 800ba04:	2d00      	cmp	r5, #0
 800ba06:	460e      	mov	r6, r1
 800ba08:	4619      	mov	r1, r3
 800ba0a:	462b      	mov	r3, r5
 800ba0c:	bfbb      	ittet	lt
 800ba0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ba12:	461d      	movlt	r5, r3
 800ba14:	2300      	movge	r3, #0
 800ba16:	232d      	movlt	r3, #45	; 0x2d
 800ba18:	700b      	strb	r3, [r1, #0]
 800ba1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ba20:	4691      	mov	r9, r2
 800ba22:	f023 0820 	bic.w	r8, r3, #32
 800ba26:	bfbc      	itt	lt
 800ba28:	4622      	movlt	r2, r4
 800ba2a:	4614      	movlt	r4, r2
 800ba2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba30:	d005      	beq.n	800ba3e <__cvt+0x42>
 800ba32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ba36:	d100      	bne.n	800ba3a <__cvt+0x3e>
 800ba38:	3601      	adds	r6, #1
 800ba3a:	2102      	movs	r1, #2
 800ba3c:	e000      	b.n	800ba40 <__cvt+0x44>
 800ba3e:	2103      	movs	r1, #3
 800ba40:	ab03      	add	r3, sp, #12
 800ba42:	9301      	str	r3, [sp, #4]
 800ba44:	ab02      	add	r3, sp, #8
 800ba46:	9300      	str	r3, [sp, #0]
 800ba48:	ec45 4b10 	vmov	d0, r4, r5
 800ba4c:	4653      	mov	r3, sl
 800ba4e:	4632      	mov	r2, r6
 800ba50:	f000 feba 	bl	800c7c8 <_dtoa_r>
 800ba54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ba58:	4607      	mov	r7, r0
 800ba5a:	d102      	bne.n	800ba62 <__cvt+0x66>
 800ba5c:	f019 0f01 	tst.w	r9, #1
 800ba60:	d022      	beq.n	800baa8 <__cvt+0xac>
 800ba62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba66:	eb07 0906 	add.w	r9, r7, r6
 800ba6a:	d110      	bne.n	800ba8e <__cvt+0x92>
 800ba6c:	783b      	ldrb	r3, [r7, #0]
 800ba6e:	2b30      	cmp	r3, #48	; 0x30
 800ba70:	d10a      	bne.n	800ba88 <__cvt+0x8c>
 800ba72:	2200      	movs	r2, #0
 800ba74:	2300      	movs	r3, #0
 800ba76:	4620      	mov	r0, r4
 800ba78:	4629      	mov	r1, r5
 800ba7a:	f7f5 f825 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba7e:	b918      	cbnz	r0, 800ba88 <__cvt+0x8c>
 800ba80:	f1c6 0601 	rsb	r6, r6, #1
 800ba84:	f8ca 6000 	str.w	r6, [sl]
 800ba88:	f8da 3000 	ldr.w	r3, [sl]
 800ba8c:	4499      	add	r9, r3
 800ba8e:	2200      	movs	r2, #0
 800ba90:	2300      	movs	r3, #0
 800ba92:	4620      	mov	r0, r4
 800ba94:	4629      	mov	r1, r5
 800ba96:	f7f5 f817 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba9a:	b108      	cbz	r0, 800baa0 <__cvt+0xa4>
 800ba9c:	f8cd 900c 	str.w	r9, [sp, #12]
 800baa0:	2230      	movs	r2, #48	; 0x30
 800baa2:	9b03      	ldr	r3, [sp, #12]
 800baa4:	454b      	cmp	r3, r9
 800baa6:	d307      	bcc.n	800bab8 <__cvt+0xbc>
 800baa8:	9b03      	ldr	r3, [sp, #12]
 800baaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800baac:	1bdb      	subs	r3, r3, r7
 800baae:	4638      	mov	r0, r7
 800bab0:	6013      	str	r3, [r2, #0]
 800bab2:	b004      	add	sp, #16
 800bab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bab8:	1c59      	adds	r1, r3, #1
 800baba:	9103      	str	r1, [sp, #12]
 800babc:	701a      	strb	r2, [r3, #0]
 800babe:	e7f0      	b.n	800baa2 <__cvt+0xa6>

0800bac0 <__exponent>:
 800bac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bac2:	4603      	mov	r3, r0
 800bac4:	2900      	cmp	r1, #0
 800bac6:	bfb8      	it	lt
 800bac8:	4249      	neglt	r1, r1
 800baca:	f803 2b02 	strb.w	r2, [r3], #2
 800bace:	bfb4      	ite	lt
 800bad0:	222d      	movlt	r2, #45	; 0x2d
 800bad2:	222b      	movge	r2, #43	; 0x2b
 800bad4:	2909      	cmp	r1, #9
 800bad6:	7042      	strb	r2, [r0, #1]
 800bad8:	dd2a      	ble.n	800bb30 <__exponent+0x70>
 800bada:	f10d 0207 	add.w	r2, sp, #7
 800bade:	4617      	mov	r7, r2
 800bae0:	260a      	movs	r6, #10
 800bae2:	4694      	mov	ip, r2
 800bae4:	fb91 f5f6 	sdiv	r5, r1, r6
 800bae8:	fb06 1415 	mls	r4, r6, r5, r1
 800baec:	3430      	adds	r4, #48	; 0x30
 800baee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800baf2:	460c      	mov	r4, r1
 800baf4:	2c63      	cmp	r4, #99	; 0x63
 800baf6:	f102 32ff 	add.w	r2, r2, #4294967295
 800bafa:	4629      	mov	r1, r5
 800bafc:	dcf1      	bgt.n	800bae2 <__exponent+0x22>
 800bafe:	3130      	adds	r1, #48	; 0x30
 800bb00:	f1ac 0402 	sub.w	r4, ip, #2
 800bb04:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bb08:	1c41      	adds	r1, r0, #1
 800bb0a:	4622      	mov	r2, r4
 800bb0c:	42ba      	cmp	r2, r7
 800bb0e:	d30a      	bcc.n	800bb26 <__exponent+0x66>
 800bb10:	f10d 0209 	add.w	r2, sp, #9
 800bb14:	eba2 020c 	sub.w	r2, r2, ip
 800bb18:	42bc      	cmp	r4, r7
 800bb1a:	bf88      	it	hi
 800bb1c:	2200      	movhi	r2, #0
 800bb1e:	4413      	add	r3, r2
 800bb20:	1a18      	subs	r0, r3, r0
 800bb22:	b003      	add	sp, #12
 800bb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb26:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bb2a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bb2e:	e7ed      	b.n	800bb0c <__exponent+0x4c>
 800bb30:	2330      	movs	r3, #48	; 0x30
 800bb32:	3130      	adds	r1, #48	; 0x30
 800bb34:	7083      	strb	r3, [r0, #2]
 800bb36:	70c1      	strb	r1, [r0, #3]
 800bb38:	1d03      	adds	r3, r0, #4
 800bb3a:	e7f1      	b.n	800bb20 <__exponent+0x60>

0800bb3c <_printf_float>:
 800bb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb40:	ed2d 8b02 	vpush	{d8}
 800bb44:	b08d      	sub	sp, #52	; 0x34
 800bb46:	460c      	mov	r4, r1
 800bb48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bb4c:	4616      	mov	r6, r2
 800bb4e:	461f      	mov	r7, r3
 800bb50:	4605      	mov	r5, r0
 800bb52:	f000 fcd5 	bl	800c500 <_localeconv_r>
 800bb56:	f8d0 a000 	ldr.w	sl, [r0]
 800bb5a:	4650      	mov	r0, sl
 800bb5c:	f7f4 fb88 	bl	8000270 <strlen>
 800bb60:	2300      	movs	r3, #0
 800bb62:	930a      	str	r3, [sp, #40]	; 0x28
 800bb64:	6823      	ldr	r3, [r4, #0]
 800bb66:	9305      	str	r3, [sp, #20]
 800bb68:	f8d8 3000 	ldr.w	r3, [r8]
 800bb6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bb70:	3307      	adds	r3, #7
 800bb72:	f023 0307 	bic.w	r3, r3, #7
 800bb76:	f103 0208 	add.w	r2, r3, #8
 800bb7a:	f8c8 2000 	str.w	r2, [r8]
 800bb7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bb86:	9307      	str	r3, [sp, #28]
 800bb88:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb8c:	ee08 0a10 	vmov	s16, r0
 800bb90:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800bb94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb98:	4b9e      	ldr	r3, [pc, #632]	; (800be14 <_printf_float+0x2d8>)
 800bb9a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb9e:	f7f4 ffc5 	bl	8000b2c <__aeabi_dcmpun>
 800bba2:	bb88      	cbnz	r0, 800bc08 <_printf_float+0xcc>
 800bba4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bba8:	4b9a      	ldr	r3, [pc, #616]	; (800be14 <_printf_float+0x2d8>)
 800bbaa:	f04f 32ff 	mov.w	r2, #4294967295
 800bbae:	f7f4 ff9f 	bl	8000af0 <__aeabi_dcmple>
 800bbb2:	bb48      	cbnz	r0, 800bc08 <_printf_float+0xcc>
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	4640      	mov	r0, r8
 800bbba:	4649      	mov	r1, r9
 800bbbc:	f7f4 ff8e 	bl	8000adc <__aeabi_dcmplt>
 800bbc0:	b110      	cbz	r0, 800bbc8 <_printf_float+0x8c>
 800bbc2:	232d      	movs	r3, #45	; 0x2d
 800bbc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbc8:	4a93      	ldr	r2, [pc, #588]	; (800be18 <_printf_float+0x2dc>)
 800bbca:	4b94      	ldr	r3, [pc, #592]	; (800be1c <_printf_float+0x2e0>)
 800bbcc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bbd0:	bf94      	ite	ls
 800bbd2:	4690      	movls	r8, r2
 800bbd4:	4698      	movhi	r8, r3
 800bbd6:	2303      	movs	r3, #3
 800bbd8:	6123      	str	r3, [r4, #16]
 800bbda:	9b05      	ldr	r3, [sp, #20]
 800bbdc:	f023 0304 	bic.w	r3, r3, #4
 800bbe0:	6023      	str	r3, [r4, #0]
 800bbe2:	f04f 0900 	mov.w	r9, #0
 800bbe6:	9700      	str	r7, [sp, #0]
 800bbe8:	4633      	mov	r3, r6
 800bbea:	aa0b      	add	r2, sp, #44	; 0x2c
 800bbec:	4621      	mov	r1, r4
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f000 f9da 	bl	800bfa8 <_printf_common>
 800bbf4:	3001      	adds	r0, #1
 800bbf6:	f040 8090 	bne.w	800bd1a <_printf_float+0x1de>
 800bbfa:	f04f 30ff 	mov.w	r0, #4294967295
 800bbfe:	b00d      	add	sp, #52	; 0x34
 800bc00:	ecbd 8b02 	vpop	{d8}
 800bc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc08:	4642      	mov	r2, r8
 800bc0a:	464b      	mov	r3, r9
 800bc0c:	4640      	mov	r0, r8
 800bc0e:	4649      	mov	r1, r9
 800bc10:	f7f4 ff8c 	bl	8000b2c <__aeabi_dcmpun>
 800bc14:	b140      	cbz	r0, 800bc28 <_printf_float+0xec>
 800bc16:	464b      	mov	r3, r9
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	bfbc      	itt	lt
 800bc1c:	232d      	movlt	r3, #45	; 0x2d
 800bc1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bc22:	4a7f      	ldr	r2, [pc, #508]	; (800be20 <_printf_float+0x2e4>)
 800bc24:	4b7f      	ldr	r3, [pc, #508]	; (800be24 <_printf_float+0x2e8>)
 800bc26:	e7d1      	b.n	800bbcc <_printf_float+0x90>
 800bc28:	6863      	ldr	r3, [r4, #4]
 800bc2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bc2e:	9206      	str	r2, [sp, #24]
 800bc30:	1c5a      	adds	r2, r3, #1
 800bc32:	d13f      	bne.n	800bcb4 <_printf_float+0x178>
 800bc34:	2306      	movs	r3, #6
 800bc36:	6063      	str	r3, [r4, #4]
 800bc38:	9b05      	ldr	r3, [sp, #20]
 800bc3a:	6861      	ldr	r1, [r4, #4]
 800bc3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bc40:	2300      	movs	r3, #0
 800bc42:	9303      	str	r3, [sp, #12]
 800bc44:	ab0a      	add	r3, sp, #40	; 0x28
 800bc46:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bc4a:	ab09      	add	r3, sp, #36	; 0x24
 800bc4c:	ec49 8b10 	vmov	d0, r8, r9
 800bc50:	9300      	str	r3, [sp, #0]
 800bc52:	6022      	str	r2, [r4, #0]
 800bc54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bc58:	4628      	mov	r0, r5
 800bc5a:	f7ff fecf 	bl	800b9fc <__cvt>
 800bc5e:	9b06      	ldr	r3, [sp, #24]
 800bc60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc62:	2b47      	cmp	r3, #71	; 0x47
 800bc64:	4680      	mov	r8, r0
 800bc66:	d108      	bne.n	800bc7a <_printf_float+0x13e>
 800bc68:	1cc8      	adds	r0, r1, #3
 800bc6a:	db02      	blt.n	800bc72 <_printf_float+0x136>
 800bc6c:	6863      	ldr	r3, [r4, #4]
 800bc6e:	4299      	cmp	r1, r3
 800bc70:	dd41      	ble.n	800bcf6 <_printf_float+0x1ba>
 800bc72:	f1ab 0302 	sub.w	r3, fp, #2
 800bc76:	fa5f fb83 	uxtb.w	fp, r3
 800bc7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bc7e:	d820      	bhi.n	800bcc2 <_printf_float+0x186>
 800bc80:	3901      	subs	r1, #1
 800bc82:	465a      	mov	r2, fp
 800bc84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bc88:	9109      	str	r1, [sp, #36]	; 0x24
 800bc8a:	f7ff ff19 	bl	800bac0 <__exponent>
 800bc8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc90:	1813      	adds	r3, r2, r0
 800bc92:	2a01      	cmp	r2, #1
 800bc94:	4681      	mov	r9, r0
 800bc96:	6123      	str	r3, [r4, #16]
 800bc98:	dc02      	bgt.n	800bca0 <_printf_float+0x164>
 800bc9a:	6822      	ldr	r2, [r4, #0]
 800bc9c:	07d2      	lsls	r2, r2, #31
 800bc9e:	d501      	bpl.n	800bca4 <_printf_float+0x168>
 800bca0:	3301      	adds	r3, #1
 800bca2:	6123      	str	r3, [r4, #16]
 800bca4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d09c      	beq.n	800bbe6 <_printf_float+0xaa>
 800bcac:	232d      	movs	r3, #45	; 0x2d
 800bcae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcb2:	e798      	b.n	800bbe6 <_printf_float+0xaa>
 800bcb4:	9a06      	ldr	r2, [sp, #24]
 800bcb6:	2a47      	cmp	r2, #71	; 0x47
 800bcb8:	d1be      	bne.n	800bc38 <_printf_float+0xfc>
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d1bc      	bne.n	800bc38 <_printf_float+0xfc>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e7b9      	b.n	800bc36 <_printf_float+0xfa>
 800bcc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bcc6:	d118      	bne.n	800bcfa <_printf_float+0x1be>
 800bcc8:	2900      	cmp	r1, #0
 800bcca:	6863      	ldr	r3, [r4, #4]
 800bccc:	dd0b      	ble.n	800bce6 <_printf_float+0x1aa>
 800bcce:	6121      	str	r1, [r4, #16]
 800bcd0:	b913      	cbnz	r3, 800bcd8 <_printf_float+0x19c>
 800bcd2:	6822      	ldr	r2, [r4, #0]
 800bcd4:	07d0      	lsls	r0, r2, #31
 800bcd6:	d502      	bpl.n	800bcde <_printf_float+0x1a2>
 800bcd8:	3301      	adds	r3, #1
 800bcda:	440b      	add	r3, r1
 800bcdc:	6123      	str	r3, [r4, #16]
 800bcde:	65a1      	str	r1, [r4, #88]	; 0x58
 800bce0:	f04f 0900 	mov.w	r9, #0
 800bce4:	e7de      	b.n	800bca4 <_printf_float+0x168>
 800bce6:	b913      	cbnz	r3, 800bcee <_printf_float+0x1b2>
 800bce8:	6822      	ldr	r2, [r4, #0]
 800bcea:	07d2      	lsls	r2, r2, #31
 800bcec:	d501      	bpl.n	800bcf2 <_printf_float+0x1b6>
 800bcee:	3302      	adds	r3, #2
 800bcf0:	e7f4      	b.n	800bcdc <_printf_float+0x1a0>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e7f2      	b.n	800bcdc <_printf_float+0x1a0>
 800bcf6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bcfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcfc:	4299      	cmp	r1, r3
 800bcfe:	db05      	blt.n	800bd0c <_printf_float+0x1d0>
 800bd00:	6823      	ldr	r3, [r4, #0]
 800bd02:	6121      	str	r1, [r4, #16]
 800bd04:	07d8      	lsls	r0, r3, #31
 800bd06:	d5ea      	bpl.n	800bcde <_printf_float+0x1a2>
 800bd08:	1c4b      	adds	r3, r1, #1
 800bd0a:	e7e7      	b.n	800bcdc <_printf_float+0x1a0>
 800bd0c:	2900      	cmp	r1, #0
 800bd0e:	bfd4      	ite	le
 800bd10:	f1c1 0202 	rsble	r2, r1, #2
 800bd14:	2201      	movgt	r2, #1
 800bd16:	4413      	add	r3, r2
 800bd18:	e7e0      	b.n	800bcdc <_printf_float+0x1a0>
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	055a      	lsls	r2, r3, #21
 800bd1e:	d407      	bmi.n	800bd30 <_printf_float+0x1f4>
 800bd20:	6923      	ldr	r3, [r4, #16]
 800bd22:	4642      	mov	r2, r8
 800bd24:	4631      	mov	r1, r6
 800bd26:	4628      	mov	r0, r5
 800bd28:	47b8      	blx	r7
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	d12c      	bne.n	800bd88 <_printf_float+0x24c>
 800bd2e:	e764      	b.n	800bbfa <_printf_float+0xbe>
 800bd30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd34:	f240 80e0 	bls.w	800bef8 <_printf_float+0x3bc>
 800bd38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	2300      	movs	r3, #0
 800bd40:	f7f4 fec2 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d034      	beq.n	800bdb2 <_printf_float+0x276>
 800bd48:	4a37      	ldr	r2, [pc, #220]	; (800be28 <_printf_float+0x2ec>)
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	4631      	mov	r1, r6
 800bd4e:	4628      	mov	r0, r5
 800bd50:	47b8      	blx	r7
 800bd52:	3001      	adds	r0, #1
 800bd54:	f43f af51 	beq.w	800bbfa <_printf_float+0xbe>
 800bd58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	db02      	blt.n	800bd66 <_printf_float+0x22a>
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	07d8      	lsls	r0, r3, #31
 800bd64:	d510      	bpl.n	800bd88 <_printf_float+0x24c>
 800bd66:	ee18 3a10 	vmov	r3, s16
 800bd6a:	4652      	mov	r2, sl
 800bd6c:	4631      	mov	r1, r6
 800bd6e:	4628      	mov	r0, r5
 800bd70:	47b8      	blx	r7
 800bd72:	3001      	adds	r0, #1
 800bd74:	f43f af41 	beq.w	800bbfa <_printf_float+0xbe>
 800bd78:	f04f 0800 	mov.w	r8, #0
 800bd7c:	f104 091a 	add.w	r9, r4, #26
 800bd80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd82:	3b01      	subs	r3, #1
 800bd84:	4543      	cmp	r3, r8
 800bd86:	dc09      	bgt.n	800bd9c <_printf_float+0x260>
 800bd88:	6823      	ldr	r3, [r4, #0]
 800bd8a:	079b      	lsls	r3, r3, #30
 800bd8c:	f100 8107 	bmi.w	800bf9e <_printf_float+0x462>
 800bd90:	68e0      	ldr	r0, [r4, #12]
 800bd92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd94:	4298      	cmp	r0, r3
 800bd96:	bfb8      	it	lt
 800bd98:	4618      	movlt	r0, r3
 800bd9a:	e730      	b.n	800bbfe <_printf_float+0xc2>
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	464a      	mov	r2, r9
 800bda0:	4631      	mov	r1, r6
 800bda2:	4628      	mov	r0, r5
 800bda4:	47b8      	blx	r7
 800bda6:	3001      	adds	r0, #1
 800bda8:	f43f af27 	beq.w	800bbfa <_printf_float+0xbe>
 800bdac:	f108 0801 	add.w	r8, r8, #1
 800bdb0:	e7e6      	b.n	800bd80 <_printf_float+0x244>
 800bdb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	dc39      	bgt.n	800be2c <_printf_float+0x2f0>
 800bdb8:	4a1b      	ldr	r2, [pc, #108]	; (800be28 <_printf_float+0x2ec>)
 800bdba:	2301      	movs	r3, #1
 800bdbc:	4631      	mov	r1, r6
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	47b8      	blx	r7
 800bdc2:	3001      	adds	r0, #1
 800bdc4:	f43f af19 	beq.w	800bbfa <_printf_float+0xbe>
 800bdc8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	d102      	bne.n	800bdd6 <_printf_float+0x29a>
 800bdd0:	6823      	ldr	r3, [r4, #0]
 800bdd2:	07d9      	lsls	r1, r3, #31
 800bdd4:	d5d8      	bpl.n	800bd88 <_printf_float+0x24c>
 800bdd6:	ee18 3a10 	vmov	r3, s16
 800bdda:	4652      	mov	r2, sl
 800bddc:	4631      	mov	r1, r6
 800bdde:	4628      	mov	r0, r5
 800bde0:	47b8      	blx	r7
 800bde2:	3001      	adds	r0, #1
 800bde4:	f43f af09 	beq.w	800bbfa <_printf_float+0xbe>
 800bde8:	f04f 0900 	mov.w	r9, #0
 800bdec:	f104 0a1a 	add.w	sl, r4, #26
 800bdf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdf2:	425b      	negs	r3, r3
 800bdf4:	454b      	cmp	r3, r9
 800bdf6:	dc01      	bgt.n	800bdfc <_printf_float+0x2c0>
 800bdf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdfa:	e792      	b.n	800bd22 <_printf_float+0x1e6>
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	4652      	mov	r2, sl
 800be00:	4631      	mov	r1, r6
 800be02:	4628      	mov	r0, r5
 800be04:	47b8      	blx	r7
 800be06:	3001      	adds	r0, #1
 800be08:	f43f aef7 	beq.w	800bbfa <_printf_float+0xbe>
 800be0c:	f109 0901 	add.w	r9, r9, #1
 800be10:	e7ee      	b.n	800bdf0 <_printf_float+0x2b4>
 800be12:	bf00      	nop
 800be14:	7fefffff 	.word	0x7fefffff
 800be18:	0800f470 	.word	0x0800f470
 800be1c:	0800f474 	.word	0x0800f474
 800be20:	0800f478 	.word	0x0800f478
 800be24:	0800f47c 	.word	0x0800f47c
 800be28:	0800f480 	.word	0x0800f480
 800be2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be30:	429a      	cmp	r2, r3
 800be32:	bfa8      	it	ge
 800be34:	461a      	movge	r2, r3
 800be36:	2a00      	cmp	r2, #0
 800be38:	4691      	mov	r9, r2
 800be3a:	dc37      	bgt.n	800beac <_printf_float+0x370>
 800be3c:	f04f 0b00 	mov.w	fp, #0
 800be40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be44:	f104 021a 	add.w	r2, r4, #26
 800be48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be4a:	9305      	str	r3, [sp, #20]
 800be4c:	eba3 0309 	sub.w	r3, r3, r9
 800be50:	455b      	cmp	r3, fp
 800be52:	dc33      	bgt.n	800bebc <_printf_float+0x380>
 800be54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be58:	429a      	cmp	r2, r3
 800be5a:	db3b      	blt.n	800bed4 <_printf_float+0x398>
 800be5c:	6823      	ldr	r3, [r4, #0]
 800be5e:	07da      	lsls	r2, r3, #31
 800be60:	d438      	bmi.n	800bed4 <_printf_float+0x398>
 800be62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800be66:	eba2 0903 	sub.w	r9, r2, r3
 800be6a:	9b05      	ldr	r3, [sp, #20]
 800be6c:	1ad2      	subs	r2, r2, r3
 800be6e:	4591      	cmp	r9, r2
 800be70:	bfa8      	it	ge
 800be72:	4691      	movge	r9, r2
 800be74:	f1b9 0f00 	cmp.w	r9, #0
 800be78:	dc35      	bgt.n	800bee6 <_printf_float+0x3aa>
 800be7a:	f04f 0800 	mov.w	r8, #0
 800be7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be82:	f104 0a1a 	add.w	sl, r4, #26
 800be86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be8a:	1a9b      	subs	r3, r3, r2
 800be8c:	eba3 0309 	sub.w	r3, r3, r9
 800be90:	4543      	cmp	r3, r8
 800be92:	f77f af79 	ble.w	800bd88 <_printf_float+0x24c>
 800be96:	2301      	movs	r3, #1
 800be98:	4652      	mov	r2, sl
 800be9a:	4631      	mov	r1, r6
 800be9c:	4628      	mov	r0, r5
 800be9e:	47b8      	blx	r7
 800bea0:	3001      	adds	r0, #1
 800bea2:	f43f aeaa 	beq.w	800bbfa <_printf_float+0xbe>
 800bea6:	f108 0801 	add.w	r8, r8, #1
 800beaa:	e7ec      	b.n	800be86 <_printf_float+0x34a>
 800beac:	4613      	mov	r3, r2
 800beae:	4631      	mov	r1, r6
 800beb0:	4642      	mov	r2, r8
 800beb2:	4628      	mov	r0, r5
 800beb4:	47b8      	blx	r7
 800beb6:	3001      	adds	r0, #1
 800beb8:	d1c0      	bne.n	800be3c <_printf_float+0x300>
 800beba:	e69e      	b.n	800bbfa <_printf_float+0xbe>
 800bebc:	2301      	movs	r3, #1
 800bebe:	4631      	mov	r1, r6
 800bec0:	4628      	mov	r0, r5
 800bec2:	9205      	str	r2, [sp, #20]
 800bec4:	47b8      	blx	r7
 800bec6:	3001      	adds	r0, #1
 800bec8:	f43f ae97 	beq.w	800bbfa <_printf_float+0xbe>
 800becc:	9a05      	ldr	r2, [sp, #20]
 800bece:	f10b 0b01 	add.w	fp, fp, #1
 800bed2:	e7b9      	b.n	800be48 <_printf_float+0x30c>
 800bed4:	ee18 3a10 	vmov	r3, s16
 800bed8:	4652      	mov	r2, sl
 800beda:	4631      	mov	r1, r6
 800bedc:	4628      	mov	r0, r5
 800bede:	47b8      	blx	r7
 800bee0:	3001      	adds	r0, #1
 800bee2:	d1be      	bne.n	800be62 <_printf_float+0x326>
 800bee4:	e689      	b.n	800bbfa <_printf_float+0xbe>
 800bee6:	9a05      	ldr	r2, [sp, #20]
 800bee8:	464b      	mov	r3, r9
 800beea:	4442      	add	r2, r8
 800beec:	4631      	mov	r1, r6
 800beee:	4628      	mov	r0, r5
 800bef0:	47b8      	blx	r7
 800bef2:	3001      	adds	r0, #1
 800bef4:	d1c1      	bne.n	800be7a <_printf_float+0x33e>
 800bef6:	e680      	b.n	800bbfa <_printf_float+0xbe>
 800bef8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800befa:	2a01      	cmp	r2, #1
 800befc:	dc01      	bgt.n	800bf02 <_printf_float+0x3c6>
 800befe:	07db      	lsls	r3, r3, #31
 800bf00:	d53a      	bpl.n	800bf78 <_printf_float+0x43c>
 800bf02:	2301      	movs	r3, #1
 800bf04:	4642      	mov	r2, r8
 800bf06:	4631      	mov	r1, r6
 800bf08:	4628      	mov	r0, r5
 800bf0a:	47b8      	blx	r7
 800bf0c:	3001      	adds	r0, #1
 800bf0e:	f43f ae74 	beq.w	800bbfa <_printf_float+0xbe>
 800bf12:	ee18 3a10 	vmov	r3, s16
 800bf16:	4652      	mov	r2, sl
 800bf18:	4631      	mov	r1, r6
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	47b8      	blx	r7
 800bf1e:	3001      	adds	r0, #1
 800bf20:	f43f ae6b 	beq.w	800bbfa <_printf_float+0xbe>
 800bf24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf28:	2200      	movs	r2, #0
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bf30:	f7f4 fdca 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf34:	b9d8      	cbnz	r0, 800bf6e <_printf_float+0x432>
 800bf36:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bf3a:	f108 0201 	add.w	r2, r8, #1
 800bf3e:	4631      	mov	r1, r6
 800bf40:	4628      	mov	r0, r5
 800bf42:	47b8      	blx	r7
 800bf44:	3001      	adds	r0, #1
 800bf46:	d10e      	bne.n	800bf66 <_printf_float+0x42a>
 800bf48:	e657      	b.n	800bbfa <_printf_float+0xbe>
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	4652      	mov	r2, sl
 800bf4e:	4631      	mov	r1, r6
 800bf50:	4628      	mov	r0, r5
 800bf52:	47b8      	blx	r7
 800bf54:	3001      	adds	r0, #1
 800bf56:	f43f ae50 	beq.w	800bbfa <_printf_float+0xbe>
 800bf5a:	f108 0801 	add.w	r8, r8, #1
 800bf5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf60:	3b01      	subs	r3, #1
 800bf62:	4543      	cmp	r3, r8
 800bf64:	dcf1      	bgt.n	800bf4a <_printf_float+0x40e>
 800bf66:	464b      	mov	r3, r9
 800bf68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bf6c:	e6da      	b.n	800bd24 <_printf_float+0x1e8>
 800bf6e:	f04f 0800 	mov.w	r8, #0
 800bf72:	f104 0a1a 	add.w	sl, r4, #26
 800bf76:	e7f2      	b.n	800bf5e <_printf_float+0x422>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	4642      	mov	r2, r8
 800bf7c:	e7df      	b.n	800bf3e <_printf_float+0x402>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	464a      	mov	r2, r9
 800bf82:	4631      	mov	r1, r6
 800bf84:	4628      	mov	r0, r5
 800bf86:	47b8      	blx	r7
 800bf88:	3001      	adds	r0, #1
 800bf8a:	f43f ae36 	beq.w	800bbfa <_printf_float+0xbe>
 800bf8e:	f108 0801 	add.w	r8, r8, #1
 800bf92:	68e3      	ldr	r3, [r4, #12]
 800bf94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf96:	1a5b      	subs	r3, r3, r1
 800bf98:	4543      	cmp	r3, r8
 800bf9a:	dcf0      	bgt.n	800bf7e <_printf_float+0x442>
 800bf9c:	e6f8      	b.n	800bd90 <_printf_float+0x254>
 800bf9e:	f04f 0800 	mov.w	r8, #0
 800bfa2:	f104 0919 	add.w	r9, r4, #25
 800bfa6:	e7f4      	b.n	800bf92 <_printf_float+0x456>

0800bfa8 <_printf_common>:
 800bfa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfac:	4616      	mov	r6, r2
 800bfae:	4699      	mov	r9, r3
 800bfb0:	688a      	ldr	r2, [r1, #8]
 800bfb2:	690b      	ldr	r3, [r1, #16]
 800bfb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	bfb8      	it	lt
 800bfbc:	4613      	movlt	r3, r2
 800bfbe:	6033      	str	r3, [r6, #0]
 800bfc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfc4:	4607      	mov	r7, r0
 800bfc6:	460c      	mov	r4, r1
 800bfc8:	b10a      	cbz	r2, 800bfce <_printf_common+0x26>
 800bfca:	3301      	adds	r3, #1
 800bfcc:	6033      	str	r3, [r6, #0]
 800bfce:	6823      	ldr	r3, [r4, #0]
 800bfd0:	0699      	lsls	r1, r3, #26
 800bfd2:	bf42      	ittt	mi
 800bfd4:	6833      	ldrmi	r3, [r6, #0]
 800bfd6:	3302      	addmi	r3, #2
 800bfd8:	6033      	strmi	r3, [r6, #0]
 800bfda:	6825      	ldr	r5, [r4, #0]
 800bfdc:	f015 0506 	ands.w	r5, r5, #6
 800bfe0:	d106      	bne.n	800bff0 <_printf_common+0x48>
 800bfe2:	f104 0a19 	add.w	sl, r4, #25
 800bfe6:	68e3      	ldr	r3, [r4, #12]
 800bfe8:	6832      	ldr	r2, [r6, #0]
 800bfea:	1a9b      	subs	r3, r3, r2
 800bfec:	42ab      	cmp	r3, r5
 800bfee:	dc26      	bgt.n	800c03e <_printf_common+0x96>
 800bff0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bff4:	1e13      	subs	r3, r2, #0
 800bff6:	6822      	ldr	r2, [r4, #0]
 800bff8:	bf18      	it	ne
 800bffa:	2301      	movne	r3, #1
 800bffc:	0692      	lsls	r2, r2, #26
 800bffe:	d42b      	bmi.n	800c058 <_printf_common+0xb0>
 800c000:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c004:	4649      	mov	r1, r9
 800c006:	4638      	mov	r0, r7
 800c008:	47c0      	blx	r8
 800c00a:	3001      	adds	r0, #1
 800c00c:	d01e      	beq.n	800c04c <_printf_common+0xa4>
 800c00e:	6823      	ldr	r3, [r4, #0]
 800c010:	6922      	ldr	r2, [r4, #16]
 800c012:	f003 0306 	and.w	r3, r3, #6
 800c016:	2b04      	cmp	r3, #4
 800c018:	bf02      	ittt	eq
 800c01a:	68e5      	ldreq	r5, [r4, #12]
 800c01c:	6833      	ldreq	r3, [r6, #0]
 800c01e:	1aed      	subeq	r5, r5, r3
 800c020:	68a3      	ldr	r3, [r4, #8]
 800c022:	bf0c      	ite	eq
 800c024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c028:	2500      	movne	r5, #0
 800c02a:	4293      	cmp	r3, r2
 800c02c:	bfc4      	itt	gt
 800c02e:	1a9b      	subgt	r3, r3, r2
 800c030:	18ed      	addgt	r5, r5, r3
 800c032:	2600      	movs	r6, #0
 800c034:	341a      	adds	r4, #26
 800c036:	42b5      	cmp	r5, r6
 800c038:	d11a      	bne.n	800c070 <_printf_common+0xc8>
 800c03a:	2000      	movs	r0, #0
 800c03c:	e008      	b.n	800c050 <_printf_common+0xa8>
 800c03e:	2301      	movs	r3, #1
 800c040:	4652      	mov	r2, sl
 800c042:	4649      	mov	r1, r9
 800c044:	4638      	mov	r0, r7
 800c046:	47c0      	blx	r8
 800c048:	3001      	adds	r0, #1
 800c04a:	d103      	bne.n	800c054 <_printf_common+0xac>
 800c04c:	f04f 30ff 	mov.w	r0, #4294967295
 800c050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c054:	3501      	adds	r5, #1
 800c056:	e7c6      	b.n	800bfe6 <_printf_common+0x3e>
 800c058:	18e1      	adds	r1, r4, r3
 800c05a:	1c5a      	adds	r2, r3, #1
 800c05c:	2030      	movs	r0, #48	; 0x30
 800c05e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c062:	4422      	add	r2, r4
 800c064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c068:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c06c:	3302      	adds	r3, #2
 800c06e:	e7c7      	b.n	800c000 <_printf_common+0x58>
 800c070:	2301      	movs	r3, #1
 800c072:	4622      	mov	r2, r4
 800c074:	4649      	mov	r1, r9
 800c076:	4638      	mov	r0, r7
 800c078:	47c0      	blx	r8
 800c07a:	3001      	adds	r0, #1
 800c07c:	d0e6      	beq.n	800c04c <_printf_common+0xa4>
 800c07e:	3601      	adds	r6, #1
 800c080:	e7d9      	b.n	800c036 <_printf_common+0x8e>
	...

0800c084 <_printf_i>:
 800c084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c088:	7e0f      	ldrb	r7, [r1, #24]
 800c08a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c08c:	2f78      	cmp	r7, #120	; 0x78
 800c08e:	4691      	mov	r9, r2
 800c090:	4680      	mov	r8, r0
 800c092:	460c      	mov	r4, r1
 800c094:	469a      	mov	sl, r3
 800c096:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c09a:	d807      	bhi.n	800c0ac <_printf_i+0x28>
 800c09c:	2f62      	cmp	r7, #98	; 0x62
 800c09e:	d80a      	bhi.n	800c0b6 <_printf_i+0x32>
 800c0a0:	2f00      	cmp	r7, #0
 800c0a2:	f000 80d4 	beq.w	800c24e <_printf_i+0x1ca>
 800c0a6:	2f58      	cmp	r7, #88	; 0x58
 800c0a8:	f000 80c0 	beq.w	800c22c <_printf_i+0x1a8>
 800c0ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0b4:	e03a      	b.n	800c12c <_printf_i+0xa8>
 800c0b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0ba:	2b15      	cmp	r3, #21
 800c0bc:	d8f6      	bhi.n	800c0ac <_printf_i+0x28>
 800c0be:	a101      	add	r1, pc, #4	; (adr r1, 800c0c4 <_printf_i+0x40>)
 800c0c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0c4:	0800c11d 	.word	0x0800c11d
 800c0c8:	0800c131 	.word	0x0800c131
 800c0cc:	0800c0ad 	.word	0x0800c0ad
 800c0d0:	0800c0ad 	.word	0x0800c0ad
 800c0d4:	0800c0ad 	.word	0x0800c0ad
 800c0d8:	0800c0ad 	.word	0x0800c0ad
 800c0dc:	0800c131 	.word	0x0800c131
 800c0e0:	0800c0ad 	.word	0x0800c0ad
 800c0e4:	0800c0ad 	.word	0x0800c0ad
 800c0e8:	0800c0ad 	.word	0x0800c0ad
 800c0ec:	0800c0ad 	.word	0x0800c0ad
 800c0f0:	0800c235 	.word	0x0800c235
 800c0f4:	0800c15d 	.word	0x0800c15d
 800c0f8:	0800c1ef 	.word	0x0800c1ef
 800c0fc:	0800c0ad 	.word	0x0800c0ad
 800c100:	0800c0ad 	.word	0x0800c0ad
 800c104:	0800c257 	.word	0x0800c257
 800c108:	0800c0ad 	.word	0x0800c0ad
 800c10c:	0800c15d 	.word	0x0800c15d
 800c110:	0800c0ad 	.word	0x0800c0ad
 800c114:	0800c0ad 	.word	0x0800c0ad
 800c118:	0800c1f7 	.word	0x0800c1f7
 800c11c:	682b      	ldr	r3, [r5, #0]
 800c11e:	1d1a      	adds	r2, r3, #4
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	602a      	str	r2, [r5, #0]
 800c124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c12c:	2301      	movs	r3, #1
 800c12e:	e09f      	b.n	800c270 <_printf_i+0x1ec>
 800c130:	6820      	ldr	r0, [r4, #0]
 800c132:	682b      	ldr	r3, [r5, #0]
 800c134:	0607      	lsls	r7, r0, #24
 800c136:	f103 0104 	add.w	r1, r3, #4
 800c13a:	6029      	str	r1, [r5, #0]
 800c13c:	d501      	bpl.n	800c142 <_printf_i+0xbe>
 800c13e:	681e      	ldr	r6, [r3, #0]
 800c140:	e003      	b.n	800c14a <_printf_i+0xc6>
 800c142:	0646      	lsls	r6, r0, #25
 800c144:	d5fb      	bpl.n	800c13e <_printf_i+0xba>
 800c146:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c14a:	2e00      	cmp	r6, #0
 800c14c:	da03      	bge.n	800c156 <_printf_i+0xd2>
 800c14e:	232d      	movs	r3, #45	; 0x2d
 800c150:	4276      	negs	r6, r6
 800c152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c156:	485a      	ldr	r0, [pc, #360]	; (800c2c0 <_printf_i+0x23c>)
 800c158:	230a      	movs	r3, #10
 800c15a:	e012      	b.n	800c182 <_printf_i+0xfe>
 800c15c:	682b      	ldr	r3, [r5, #0]
 800c15e:	6820      	ldr	r0, [r4, #0]
 800c160:	1d19      	adds	r1, r3, #4
 800c162:	6029      	str	r1, [r5, #0]
 800c164:	0605      	lsls	r5, r0, #24
 800c166:	d501      	bpl.n	800c16c <_printf_i+0xe8>
 800c168:	681e      	ldr	r6, [r3, #0]
 800c16a:	e002      	b.n	800c172 <_printf_i+0xee>
 800c16c:	0641      	lsls	r1, r0, #25
 800c16e:	d5fb      	bpl.n	800c168 <_printf_i+0xe4>
 800c170:	881e      	ldrh	r6, [r3, #0]
 800c172:	4853      	ldr	r0, [pc, #332]	; (800c2c0 <_printf_i+0x23c>)
 800c174:	2f6f      	cmp	r7, #111	; 0x6f
 800c176:	bf0c      	ite	eq
 800c178:	2308      	moveq	r3, #8
 800c17a:	230a      	movne	r3, #10
 800c17c:	2100      	movs	r1, #0
 800c17e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c182:	6865      	ldr	r5, [r4, #4]
 800c184:	60a5      	str	r5, [r4, #8]
 800c186:	2d00      	cmp	r5, #0
 800c188:	bfa2      	ittt	ge
 800c18a:	6821      	ldrge	r1, [r4, #0]
 800c18c:	f021 0104 	bicge.w	r1, r1, #4
 800c190:	6021      	strge	r1, [r4, #0]
 800c192:	b90e      	cbnz	r6, 800c198 <_printf_i+0x114>
 800c194:	2d00      	cmp	r5, #0
 800c196:	d04b      	beq.n	800c230 <_printf_i+0x1ac>
 800c198:	4615      	mov	r5, r2
 800c19a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c19e:	fb03 6711 	mls	r7, r3, r1, r6
 800c1a2:	5dc7      	ldrb	r7, [r0, r7]
 800c1a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c1a8:	4637      	mov	r7, r6
 800c1aa:	42bb      	cmp	r3, r7
 800c1ac:	460e      	mov	r6, r1
 800c1ae:	d9f4      	bls.n	800c19a <_printf_i+0x116>
 800c1b0:	2b08      	cmp	r3, #8
 800c1b2:	d10b      	bne.n	800c1cc <_printf_i+0x148>
 800c1b4:	6823      	ldr	r3, [r4, #0]
 800c1b6:	07de      	lsls	r6, r3, #31
 800c1b8:	d508      	bpl.n	800c1cc <_printf_i+0x148>
 800c1ba:	6923      	ldr	r3, [r4, #16]
 800c1bc:	6861      	ldr	r1, [r4, #4]
 800c1be:	4299      	cmp	r1, r3
 800c1c0:	bfde      	ittt	le
 800c1c2:	2330      	movle	r3, #48	; 0x30
 800c1c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c1cc:	1b52      	subs	r2, r2, r5
 800c1ce:	6122      	str	r2, [r4, #16]
 800c1d0:	f8cd a000 	str.w	sl, [sp]
 800c1d4:	464b      	mov	r3, r9
 800c1d6:	aa03      	add	r2, sp, #12
 800c1d8:	4621      	mov	r1, r4
 800c1da:	4640      	mov	r0, r8
 800c1dc:	f7ff fee4 	bl	800bfa8 <_printf_common>
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	d14a      	bne.n	800c27a <_printf_i+0x1f6>
 800c1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e8:	b004      	add	sp, #16
 800c1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ee:	6823      	ldr	r3, [r4, #0]
 800c1f0:	f043 0320 	orr.w	r3, r3, #32
 800c1f4:	6023      	str	r3, [r4, #0]
 800c1f6:	4833      	ldr	r0, [pc, #204]	; (800c2c4 <_printf_i+0x240>)
 800c1f8:	2778      	movs	r7, #120	; 0x78
 800c1fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c1fe:	6823      	ldr	r3, [r4, #0]
 800c200:	6829      	ldr	r1, [r5, #0]
 800c202:	061f      	lsls	r7, r3, #24
 800c204:	f851 6b04 	ldr.w	r6, [r1], #4
 800c208:	d402      	bmi.n	800c210 <_printf_i+0x18c>
 800c20a:	065f      	lsls	r7, r3, #25
 800c20c:	bf48      	it	mi
 800c20e:	b2b6      	uxthmi	r6, r6
 800c210:	07df      	lsls	r7, r3, #31
 800c212:	bf48      	it	mi
 800c214:	f043 0320 	orrmi.w	r3, r3, #32
 800c218:	6029      	str	r1, [r5, #0]
 800c21a:	bf48      	it	mi
 800c21c:	6023      	strmi	r3, [r4, #0]
 800c21e:	b91e      	cbnz	r6, 800c228 <_printf_i+0x1a4>
 800c220:	6823      	ldr	r3, [r4, #0]
 800c222:	f023 0320 	bic.w	r3, r3, #32
 800c226:	6023      	str	r3, [r4, #0]
 800c228:	2310      	movs	r3, #16
 800c22a:	e7a7      	b.n	800c17c <_printf_i+0xf8>
 800c22c:	4824      	ldr	r0, [pc, #144]	; (800c2c0 <_printf_i+0x23c>)
 800c22e:	e7e4      	b.n	800c1fa <_printf_i+0x176>
 800c230:	4615      	mov	r5, r2
 800c232:	e7bd      	b.n	800c1b0 <_printf_i+0x12c>
 800c234:	682b      	ldr	r3, [r5, #0]
 800c236:	6826      	ldr	r6, [r4, #0]
 800c238:	6961      	ldr	r1, [r4, #20]
 800c23a:	1d18      	adds	r0, r3, #4
 800c23c:	6028      	str	r0, [r5, #0]
 800c23e:	0635      	lsls	r5, r6, #24
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	d501      	bpl.n	800c248 <_printf_i+0x1c4>
 800c244:	6019      	str	r1, [r3, #0]
 800c246:	e002      	b.n	800c24e <_printf_i+0x1ca>
 800c248:	0670      	lsls	r0, r6, #25
 800c24a:	d5fb      	bpl.n	800c244 <_printf_i+0x1c0>
 800c24c:	8019      	strh	r1, [r3, #0]
 800c24e:	2300      	movs	r3, #0
 800c250:	6123      	str	r3, [r4, #16]
 800c252:	4615      	mov	r5, r2
 800c254:	e7bc      	b.n	800c1d0 <_printf_i+0x14c>
 800c256:	682b      	ldr	r3, [r5, #0]
 800c258:	1d1a      	adds	r2, r3, #4
 800c25a:	602a      	str	r2, [r5, #0]
 800c25c:	681d      	ldr	r5, [r3, #0]
 800c25e:	6862      	ldr	r2, [r4, #4]
 800c260:	2100      	movs	r1, #0
 800c262:	4628      	mov	r0, r5
 800c264:	f7f3 ffb4 	bl	80001d0 <memchr>
 800c268:	b108      	cbz	r0, 800c26e <_printf_i+0x1ea>
 800c26a:	1b40      	subs	r0, r0, r5
 800c26c:	6060      	str	r0, [r4, #4]
 800c26e:	6863      	ldr	r3, [r4, #4]
 800c270:	6123      	str	r3, [r4, #16]
 800c272:	2300      	movs	r3, #0
 800c274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c278:	e7aa      	b.n	800c1d0 <_printf_i+0x14c>
 800c27a:	6923      	ldr	r3, [r4, #16]
 800c27c:	462a      	mov	r2, r5
 800c27e:	4649      	mov	r1, r9
 800c280:	4640      	mov	r0, r8
 800c282:	47d0      	blx	sl
 800c284:	3001      	adds	r0, #1
 800c286:	d0ad      	beq.n	800c1e4 <_printf_i+0x160>
 800c288:	6823      	ldr	r3, [r4, #0]
 800c28a:	079b      	lsls	r3, r3, #30
 800c28c:	d413      	bmi.n	800c2b6 <_printf_i+0x232>
 800c28e:	68e0      	ldr	r0, [r4, #12]
 800c290:	9b03      	ldr	r3, [sp, #12]
 800c292:	4298      	cmp	r0, r3
 800c294:	bfb8      	it	lt
 800c296:	4618      	movlt	r0, r3
 800c298:	e7a6      	b.n	800c1e8 <_printf_i+0x164>
 800c29a:	2301      	movs	r3, #1
 800c29c:	4632      	mov	r2, r6
 800c29e:	4649      	mov	r1, r9
 800c2a0:	4640      	mov	r0, r8
 800c2a2:	47d0      	blx	sl
 800c2a4:	3001      	adds	r0, #1
 800c2a6:	d09d      	beq.n	800c1e4 <_printf_i+0x160>
 800c2a8:	3501      	adds	r5, #1
 800c2aa:	68e3      	ldr	r3, [r4, #12]
 800c2ac:	9903      	ldr	r1, [sp, #12]
 800c2ae:	1a5b      	subs	r3, r3, r1
 800c2b0:	42ab      	cmp	r3, r5
 800c2b2:	dcf2      	bgt.n	800c29a <_printf_i+0x216>
 800c2b4:	e7eb      	b.n	800c28e <_printf_i+0x20a>
 800c2b6:	2500      	movs	r5, #0
 800c2b8:	f104 0619 	add.w	r6, r4, #25
 800c2bc:	e7f5      	b.n	800c2aa <_printf_i+0x226>
 800c2be:	bf00      	nop
 800c2c0:	0800f482 	.word	0x0800f482
 800c2c4:	0800f493 	.word	0x0800f493

0800c2c8 <std>:
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	b510      	push	{r4, lr}
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	e9c0 3300 	strd	r3, r3, [r0]
 800c2d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2d6:	6083      	str	r3, [r0, #8]
 800c2d8:	8181      	strh	r1, [r0, #12]
 800c2da:	6643      	str	r3, [r0, #100]	; 0x64
 800c2dc:	81c2      	strh	r2, [r0, #14]
 800c2de:	6183      	str	r3, [r0, #24]
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	2208      	movs	r2, #8
 800c2e4:	305c      	adds	r0, #92	; 0x5c
 800c2e6:	f000 f902 	bl	800c4ee <memset>
 800c2ea:	4b05      	ldr	r3, [pc, #20]	; (800c300 <std+0x38>)
 800c2ec:	6263      	str	r3, [r4, #36]	; 0x24
 800c2ee:	4b05      	ldr	r3, [pc, #20]	; (800c304 <std+0x3c>)
 800c2f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2f2:	4b05      	ldr	r3, [pc, #20]	; (800c308 <std+0x40>)
 800c2f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2f6:	4b05      	ldr	r3, [pc, #20]	; (800c30c <std+0x44>)
 800c2f8:	6224      	str	r4, [r4, #32]
 800c2fa:	6323      	str	r3, [r4, #48]	; 0x30
 800c2fc:	bd10      	pop	{r4, pc}
 800c2fe:	bf00      	nop
 800c300:	0800c469 	.word	0x0800c469
 800c304:	0800c48b 	.word	0x0800c48b
 800c308:	0800c4c3 	.word	0x0800c4c3
 800c30c:	0800c4e7 	.word	0x0800c4e7

0800c310 <stdio_exit_handler>:
 800c310:	4a02      	ldr	r2, [pc, #8]	; (800c31c <stdio_exit_handler+0xc>)
 800c312:	4903      	ldr	r1, [pc, #12]	; (800c320 <stdio_exit_handler+0x10>)
 800c314:	4803      	ldr	r0, [pc, #12]	; (800c324 <stdio_exit_handler+0x14>)
 800c316:	f000 b869 	b.w	800c3ec <_fwalk_sglue>
 800c31a:	bf00      	nop
 800c31c:	20000024 	.word	0x20000024
 800c320:	0800e061 	.word	0x0800e061
 800c324:	20000030 	.word	0x20000030

0800c328 <cleanup_stdio>:
 800c328:	6841      	ldr	r1, [r0, #4]
 800c32a:	4b0c      	ldr	r3, [pc, #48]	; (800c35c <cleanup_stdio+0x34>)
 800c32c:	4299      	cmp	r1, r3
 800c32e:	b510      	push	{r4, lr}
 800c330:	4604      	mov	r4, r0
 800c332:	d001      	beq.n	800c338 <cleanup_stdio+0x10>
 800c334:	f001 fe94 	bl	800e060 <_fflush_r>
 800c338:	68a1      	ldr	r1, [r4, #8]
 800c33a:	4b09      	ldr	r3, [pc, #36]	; (800c360 <cleanup_stdio+0x38>)
 800c33c:	4299      	cmp	r1, r3
 800c33e:	d002      	beq.n	800c346 <cleanup_stdio+0x1e>
 800c340:	4620      	mov	r0, r4
 800c342:	f001 fe8d 	bl	800e060 <_fflush_r>
 800c346:	68e1      	ldr	r1, [r4, #12]
 800c348:	4b06      	ldr	r3, [pc, #24]	; (800c364 <cleanup_stdio+0x3c>)
 800c34a:	4299      	cmp	r1, r3
 800c34c:	d004      	beq.n	800c358 <cleanup_stdio+0x30>
 800c34e:	4620      	mov	r0, r4
 800c350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c354:	f001 be84 	b.w	800e060 <_fflush_r>
 800c358:	bd10      	pop	{r4, pc}
 800c35a:	bf00      	nop
 800c35c:	200053a8 	.word	0x200053a8
 800c360:	20005410 	.word	0x20005410
 800c364:	20005478 	.word	0x20005478

0800c368 <global_stdio_init.part.0>:
 800c368:	b510      	push	{r4, lr}
 800c36a:	4b0b      	ldr	r3, [pc, #44]	; (800c398 <global_stdio_init.part.0+0x30>)
 800c36c:	4c0b      	ldr	r4, [pc, #44]	; (800c39c <global_stdio_init.part.0+0x34>)
 800c36e:	4a0c      	ldr	r2, [pc, #48]	; (800c3a0 <global_stdio_init.part.0+0x38>)
 800c370:	601a      	str	r2, [r3, #0]
 800c372:	4620      	mov	r0, r4
 800c374:	2200      	movs	r2, #0
 800c376:	2104      	movs	r1, #4
 800c378:	f7ff ffa6 	bl	800c2c8 <std>
 800c37c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c380:	2201      	movs	r2, #1
 800c382:	2109      	movs	r1, #9
 800c384:	f7ff ffa0 	bl	800c2c8 <std>
 800c388:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c38c:	2202      	movs	r2, #2
 800c38e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c392:	2112      	movs	r1, #18
 800c394:	f7ff bf98 	b.w	800c2c8 <std>
 800c398:	200054e0 	.word	0x200054e0
 800c39c:	200053a8 	.word	0x200053a8
 800c3a0:	0800c311 	.word	0x0800c311

0800c3a4 <__sfp_lock_acquire>:
 800c3a4:	4801      	ldr	r0, [pc, #4]	; (800c3ac <__sfp_lock_acquire+0x8>)
 800c3a6:	f000 b975 	b.w	800c694 <__retarget_lock_acquire_recursive>
 800c3aa:	bf00      	nop
 800c3ac:	200054e9 	.word	0x200054e9

0800c3b0 <__sfp_lock_release>:
 800c3b0:	4801      	ldr	r0, [pc, #4]	; (800c3b8 <__sfp_lock_release+0x8>)
 800c3b2:	f000 b970 	b.w	800c696 <__retarget_lock_release_recursive>
 800c3b6:	bf00      	nop
 800c3b8:	200054e9 	.word	0x200054e9

0800c3bc <__sinit>:
 800c3bc:	b510      	push	{r4, lr}
 800c3be:	4604      	mov	r4, r0
 800c3c0:	f7ff fff0 	bl	800c3a4 <__sfp_lock_acquire>
 800c3c4:	6a23      	ldr	r3, [r4, #32]
 800c3c6:	b11b      	cbz	r3, 800c3d0 <__sinit+0x14>
 800c3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3cc:	f7ff bff0 	b.w	800c3b0 <__sfp_lock_release>
 800c3d0:	4b04      	ldr	r3, [pc, #16]	; (800c3e4 <__sinit+0x28>)
 800c3d2:	6223      	str	r3, [r4, #32]
 800c3d4:	4b04      	ldr	r3, [pc, #16]	; (800c3e8 <__sinit+0x2c>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1f5      	bne.n	800c3c8 <__sinit+0xc>
 800c3dc:	f7ff ffc4 	bl	800c368 <global_stdio_init.part.0>
 800c3e0:	e7f2      	b.n	800c3c8 <__sinit+0xc>
 800c3e2:	bf00      	nop
 800c3e4:	0800c329 	.word	0x0800c329
 800c3e8:	200054e0 	.word	0x200054e0

0800c3ec <_fwalk_sglue>:
 800c3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3f0:	4607      	mov	r7, r0
 800c3f2:	4688      	mov	r8, r1
 800c3f4:	4614      	mov	r4, r2
 800c3f6:	2600      	movs	r6, #0
 800c3f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3fc:	f1b9 0901 	subs.w	r9, r9, #1
 800c400:	d505      	bpl.n	800c40e <_fwalk_sglue+0x22>
 800c402:	6824      	ldr	r4, [r4, #0]
 800c404:	2c00      	cmp	r4, #0
 800c406:	d1f7      	bne.n	800c3f8 <_fwalk_sglue+0xc>
 800c408:	4630      	mov	r0, r6
 800c40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c40e:	89ab      	ldrh	r3, [r5, #12]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d907      	bls.n	800c424 <_fwalk_sglue+0x38>
 800c414:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c418:	3301      	adds	r3, #1
 800c41a:	d003      	beq.n	800c424 <_fwalk_sglue+0x38>
 800c41c:	4629      	mov	r1, r5
 800c41e:	4638      	mov	r0, r7
 800c420:	47c0      	blx	r8
 800c422:	4306      	orrs	r6, r0
 800c424:	3568      	adds	r5, #104	; 0x68
 800c426:	e7e9      	b.n	800c3fc <_fwalk_sglue+0x10>

0800c428 <siprintf>:
 800c428:	b40e      	push	{r1, r2, r3}
 800c42a:	b500      	push	{lr}
 800c42c:	b09c      	sub	sp, #112	; 0x70
 800c42e:	ab1d      	add	r3, sp, #116	; 0x74
 800c430:	9002      	str	r0, [sp, #8]
 800c432:	9006      	str	r0, [sp, #24]
 800c434:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c438:	4809      	ldr	r0, [pc, #36]	; (800c460 <siprintf+0x38>)
 800c43a:	9107      	str	r1, [sp, #28]
 800c43c:	9104      	str	r1, [sp, #16]
 800c43e:	4909      	ldr	r1, [pc, #36]	; (800c464 <siprintf+0x3c>)
 800c440:	f853 2b04 	ldr.w	r2, [r3], #4
 800c444:	9105      	str	r1, [sp, #20]
 800c446:	6800      	ldr	r0, [r0, #0]
 800c448:	9301      	str	r3, [sp, #4]
 800c44a:	a902      	add	r1, sp, #8
 800c44c:	f001 fc84 	bl	800dd58 <_svfiprintf_r>
 800c450:	9b02      	ldr	r3, [sp, #8]
 800c452:	2200      	movs	r2, #0
 800c454:	701a      	strb	r2, [r3, #0]
 800c456:	b01c      	add	sp, #112	; 0x70
 800c458:	f85d eb04 	ldr.w	lr, [sp], #4
 800c45c:	b003      	add	sp, #12
 800c45e:	4770      	bx	lr
 800c460:	2000007c 	.word	0x2000007c
 800c464:	ffff0208 	.word	0xffff0208

0800c468 <__sread>:
 800c468:	b510      	push	{r4, lr}
 800c46a:	460c      	mov	r4, r1
 800c46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c470:	f000 f8c2 	bl	800c5f8 <_read_r>
 800c474:	2800      	cmp	r0, #0
 800c476:	bfab      	itete	ge
 800c478:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c47a:	89a3      	ldrhlt	r3, [r4, #12]
 800c47c:	181b      	addge	r3, r3, r0
 800c47e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c482:	bfac      	ite	ge
 800c484:	6563      	strge	r3, [r4, #84]	; 0x54
 800c486:	81a3      	strhlt	r3, [r4, #12]
 800c488:	bd10      	pop	{r4, pc}

0800c48a <__swrite>:
 800c48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c48e:	461f      	mov	r7, r3
 800c490:	898b      	ldrh	r3, [r1, #12]
 800c492:	05db      	lsls	r3, r3, #23
 800c494:	4605      	mov	r5, r0
 800c496:	460c      	mov	r4, r1
 800c498:	4616      	mov	r6, r2
 800c49a:	d505      	bpl.n	800c4a8 <__swrite+0x1e>
 800c49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f000 f896 	bl	800c5d4 <_lseek_r>
 800c4a8:	89a3      	ldrh	r3, [r4, #12]
 800c4aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4b2:	81a3      	strh	r3, [r4, #12]
 800c4b4:	4632      	mov	r2, r6
 800c4b6:	463b      	mov	r3, r7
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4be:	f000 b8ad 	b.w	800c61c <_write_r>

0800c4c2 <__sseek>:
 800c4c2:	b510      	push	{r4, lr}
 800c4c4:	460c      	mov	r4, r1
 800c4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4ca:	f000 f883 	bl	800c5d4 <_lseek_r>
 800c4ce:	1c43      	adds	r3, r0, #1
 800c4d0:	89a3      	ldrh	r3, [r4, #12]
 800c4d2:	bf15      	itete	ne
 800c4d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4de:	81a3      	strheq	r3, [r4, #12]
 800c4e0:	bf18      	it	ne
 800c4e2:	81a3      	strhne	r3, [r4, #12]
 800c4e4:	bd10      	pop	{r4, pc}

0800c4e6 <__sclose>:
 800c4e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4ea:	f000 b80d 	b.w	800c508 <_close_r>

0800c4ee <memset>:
 800c4ee:	4402      	add	r2, r0
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d100      	bne.n	800c4f8 <memset+0xa>
 800c4f6:	4770      	bx	lr
 800c4f8:	f803 1b01 	strb.w	r1, [r3], #1
 800c4fc:	e7f9      	b.n	800c4f2 <memset+0x4>
	...

0800c500 <_localeconv_r>:
 800c500:	4800      	ldr	r0, [pc, #0]	; (800c504 <_localeconv_r+0x4>)
 800c502:	4770      	bx	lr
 800c504:	20000170 	.word	0x20000170

0800c508 <_close_r>:
 800c508:	b538      	push	{r3, r4, r5, lr}
 800c50a:	4d06      	ldr	r5, [pc, #24]	; (800c524 <_close_r+0x1c>)
 800c50c:	2300      	movs	r3, #0
 800c50e:	4604      	mov	r4, r0
 800c510:	4608      	mov	r0, r1
 800c512:	602b      	str	r3, [r5, #0]
 800c514:	f7f7 fc7f 	bl	8003e16 <_close>
 800c518:	1c43      	adds	r3, r0, #1
 800c51a:	d102      	bne.n	800c522 <_close_r+0x1a>
 800c51c:	682b      	ldr	r3, [r5, #0]
 800c51e:	b103      	cbz	r3, 800c522 <_close_r+0x1a>
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	bd38      	pop	{r3, r4, r5, pc}
 800c524:	200054e4 	.word	0x200054e4

0800c528 <_reclaim_reent>:
 800c528:	4b29      	ldr	r3, [pc, #164]	; (800c5d0 <_reclaim_reent+0xa8>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4283      	cmp	r3, r0
 800c52e:	b570      	push	{r4, r5, r6, lr}
 800c530:	4604      	mov	r4, r0
 800c532:	d04b      	beq.n	800c5cc <_reclaim_reent+0xa4>
 800c534:	69c3      	ldr	r3, [r0, #28]
 800c536:	b143      	cbz	r3, 800c54a <_reclaim_reent+0x22>
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d144      	bne.n	800c5c8 <_reclaim_reent+0xa0>
 800c53e:	69e3      	ldr	r3, [r4, #28]
 800c540:	6819      	ldr	r1, [r3, #0]
 800c542:	b111      	cbz	r1, 800c54a <_reclaim_reent+0x22>
 800c544:	4620      	mov	r0, r4
 800c546:	f000 ff31 	bl	800d3ac <_free_r>
 800c54a:	6961      	ldr	r1, [r4, #20]
 800c54c:	b111      	cbz	r1, 800c554 <_reclaim_reent+0x2c>
 800c54e:	4620      	mov	r0, r4
 800c550:	f000 ff2c 	bl	800d3ac <_free_r>
 800c554:	69e1      	ldr	r1, [r4, #28]
 800c556:	b111      	cbz	r1, 800c55e <_reclaim_reent+0x36>
 800c558:	4620      	mov	r0, r4
 800c55a:	f000 ff27 	bl	800d3ac <_free_r>
 800c55e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c560:	b111      	cbz	r1, 800c568 <_reclaim_reent+0x40>
 800c562:	4620      	mov	r0, r4
 800c564:	f000 ff22 	bl	800d3ac <_free_r>
 800c568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c56a:	b111      	cbz	r1, 800c572 <_reclaim_reent+0x4a>
 800c56c:	4620      	mov	r0, r4
 800c56e:	f000 ff1d 	bl	800d3ac <_free_r>
 800c572:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c574:	b111      	cbz	r1, 800c57c <_reclaim_reent+0x54>
 800c576:	4620      	mov	r0, r4
 800c578:	f000 ff18 	bl	800d3ac <_free_r>
 800c57c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c57e:	b111      	cbz	r1, 800c586 <_reclaim_reent+0x5e>
 800c580:	4620      	mov	r0, r4
 800c582:	f000 ff13 	bl	800d3ac <_free_r>
 800c586:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c588:	b111      	cbz	r1, 800c590 <_reclaim_reent+0x68>
 800c58a:	4620      	mov	r0, r4
 800c58c:	f000 ff0e 	bl	800d3ac <_free_r>
 800c590:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c592:	b111      	cbz	r1, 800c59a <_reclaim_reent+0x72>
 800c594:	4620      	mov	r0, r4
 800c596:	f000 ff09 	bl	800d3ac <_free_r>
 800c59a:	6a23      	ldr	r3, [r4, #32]
 800c59c:	b1b3      	cbz	r3, 800c5cc <_reclaim_reent+0xa4>
 800c59e:	4620      	mov	r0, r4
 800c5a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5a4:	4718      	bx	r3
 800c5a6:	5949      	ldr	r1, [r1, r5]
 800c5a8:	b941      	cbnz	r1, 800c5bc <_reclaim_reent+0x94>
 800c5aa:	3504      	adds	r5, #4
 800c5ac:	69e3      	ldr	r3, [r4, #28]
 800c5ae:	2d80      	cmp	r5, #128	; 0x80
 800c5b0:	68d9      	ldr	r1, [r3, #12]
 800c5b2:	d1f8      	bne.n	800c5a6 <_reclaim_reent+0x7e>
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	f000 fef9 	bl	800d3ac <_free_r>
 800c5ba:	e7c0      	b.n	800c53e <_reclaim_reent+0x16>
 800c5bc:	680e      	ldr	r6, [r1, #0]
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f000 fef4 	bl	800d3ac <_free_r>
 800c5c4:	4631      	mov	r1, r6
 800c5c6:	e7ef      	b.n	800c5a8 <_reclaim_reent+0x80>
 800c5c8:	2500      	movs	r5, #0
 800c5ca:	e7ef      	b.n	800c5ac <_reclaim_reent+0x84>
 800c5cc:	bd70      	pop	{r4, r5, r6, pc}
 800c5ce:	bf00      	nop
 800c5d0:	2000007c 	.word	0x2000007c

0800c5d4 <_lseek_r>:
 800c5d4:	b538      	push	{r3, r4, r5, lr}
 800c5d6:	4d07      	ldr	r5, [pc, #28]	; (800c5f4 <_lseek_r+0x20>)
 800c5d8:	4604      	mov	r4, r0
 800c5da:	4608      	mov	r0, r1
 800c5dc:	4611      	mov	r1, r2
 800c5de:	2200      	movs	r2, #0
 800c5e0:	602a      	str	r2, [r5, #0]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	f7f7 fc3e 	bl	8003e64 <_lseek>
 800c5e8:	1c43      	adds	r3, r0, #1
 800c5ea:	d102      	bne.n	800c5f2 <_lseek_r+0x1e>
 800c5ec:	682b      	ldr	r3, [r5, #0]
 800c5ee:	b103      	cbz	r3, 800c5f2 <_lseek_r+0x1e>
 800c5f0:	6023      	str	r3, [r4, #0]
 800c5f2:	bd38      	pop	{r3, r4, r5, pc}
 800c5f4:	200054e4 	.word	0x200054e4

0800c5f8 <_read_r>:
 800c5f8:	b538      	push	{r3, r4, r5, lr}
 800c5fa:	4d07      	ldr	r5, [pc, #28]	; (800c618 <_read_r+0x20>)
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	4608      	mov	r0, r1
 800c600:	4611      	mov	r1, r2
 800c602:	2200      	movs	r2, #0
 800c604:	602a      	str	r2, [r5, #0]
 800c606:	461a      	mov	r2, r3
 800c608:	f7f7 fbcc 	bl	8003da4 <_read>
 800c60c:	1c43      	adds	r3, r0, #1
 800c60e:	d102      	bne.n	800c616 <_read_r+0x1e>
 800c610:	682b      	ldr	r3, [r5, #0]
 800c612:	b103      	cbz	r3, 800c616 <_read_r+0x1e>
 800c614:	6023      	str	r3, [r4, #0]
 800c616:	bd38      	pop	{r3, r4, r5, pc}
 800c618:	200054e4 	.word	0x200054e4

0800c61c <_write_r>:
 800c61c:	b538      	push	{r3, r4, r5, lr}
 800c61e:	4d07      	ldr	r5, [pc, #28]	; (800c63c <_write_r+0x20>)
 800c620:	4604      	mov	r4, r0
 800c622:	4608      	mov	r0, r1
 800c624:	4611      	mov	r1, r2
 800c626:	2200      	movs	r2, #0
 800c628:	602a      	str	r2, [r5, #0]
 800c62a:	461a      	mov	r2, r3
 800c62c:	f7f7 fbd7 	bl	8003dde <_write>
 800c630:	1c43      	adds	r3, r0, #1
 800c632:	d102      	bne.n	800c63a <_write_r+0x1e>
 800c634:	682b      	ldr	r3, [r5, #0]
 800c636:	b103      	cbz	r3, 800c63a <_write_r+0x1e>
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	bd38      	pop	{r3, r4, r5, pc}
 800c63c:	200054e4 	.word	0x200054e4

0800c640 <__errno>:
 800c640:	4b01      	ldr	r3, [pc, #4]	; (800c648 <__errno+0x8>)
 800c642:	6818      	ldr	r0, [r3, #0]
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	2000007c 	.word	0x2000007c

0800c64c <__libc_init_array>:
 800c64c:	b570      	push	{r4, r5, r6, lr}
 800c64e:	4d0d      	ldr	r5, [pc, #52]	; (800c684 <__libc_init_array+0x38>)
 800c650:	4c0d      	ldr	r4, [pc, #52]	; (800c688 <__libc_init_array+0x3c>)
 800c652:	1b64      	subs	r4, r4, r5
 800c654:	10a4      	asrs	r4, r4, #2
 800c656:	2600      	movs	r6, #0
 800c658:	42a6      	cmp	r6, r4
 800c65a:	d109      	bne.n	800c670 <__libc_init_array+0x24>
 800c65c:	4d0b      	ldr	r5, [pc, #44]	; (800c68c <__libc_init_array+0x40>)
 800c65e:	4c0c      	ldr	r4, [pc, #48]	; (800c690 <__libc_init_array+0x44>)
 800c660:	f002 f894 	bl	800e78c <_init>
 800c664:	1b64      	subs	r4, r4, r5
 800c666:	10a4      	asrs	r4, r4, #2
 800c668:	2600      	movs	r6, #0
 800c66a:	42a6      	cmp	r6, r4
 800c66c:	d105      	bne.n	800c67a <__libc_init_array+0x2e>
 800c66e:	bd70      	pop	{r4, r5, r6, pc}
 800c670:	f855 3b04 	ldr.w	r3, [r5], #4
 800c674:	4798      	blx	r3
 800c676:	3601      	adds	r6, #1
 800c678:	e7ee      	b.n	800c658 <__libc_init_array+0xc>
 800c67a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c67e:	4798      	blx	r3
 800c680:	3601      	adds	r6, #1
 800c682:	e7f2      	b.n	800c66a <__libc_init_array+0x1e>
 800c684:	0800f7ec 	.word	0x0800f7ec
 800c688:	0800f7ec 	.word	0x0800f7ec
 800c68c:	0800f7ec 	.word	0x0800f7ec
 800c690:	0800f7f0 	.word	0x0800f7f0

0800c694 <__retarget_lock_acquire_recursive>:
 800c694:	4770      	bx	lr

0800c696 <__retarget_lock_release_recursive>:
 800c696:	4770      	bx	lr

0800c698 <memcpy>:
 800c698:	440a      	add	r2, r1
 800c69a:	4291      	cmp	r1, r2
 800c69c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6a0:	d100      	bne.n	800c6a4 <memcpy+0xc>
 800c6a2:	4770      	bx	lr
 800c6a4:	b510      	push	{r4, lr}
 800c6a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6ae:	4291      	cmp	r1, r2
 800c6b0:	d1f9      	bne.n	800c6a6 <memcpy+0xe>
 800c6b2:	bd10      	pop	{r4, pc}

0800c6b4 <quorem>:
 800c6b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b8:	6903      	ldr	r3, [r0, #16]
 800c6ba:	690c      	ldr	r4, [r1, #16]
 800c6bc:	42a3      	cmp	r3, r4
 800c6be:	4607      	mov	r7, r0
 800c6c0:	db7e      	blt.n	800c7c0 <quorem+0x10c>
 800c6c2:	3c01      	subs	r4, #1
 800c6c4:	f101 0814 	add.w	r8, r1, #20
 800c6c8:	f100 0514 	add.w	r5, r0, #20
 800c6cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6d0:	9301      	str	r3, [sp, #4]
 800c6d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c6d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c6e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c6e6:	fbb2 f6f3 	udiv	r6, r2, r3
 800c6ea:	d331      	bcc.n	800c750 <quorem+0x9c>
 800c6ec:	f04f 0e00 	mov.w	lr, #0
 800c6f0:	4640      	mov	r0, r8
 800c6f2:	46ac      	mov	ip, r5
 800c6f4:	46f2      	mov	sl, lr
 800c6f6:	f850 2b04 	ldr.w	r2, [r0], #4
 800c6fa:	b293      	uxth	r3, r2
 800c6fc:	fb06 e303 	mla	r3, r6, r3, lr
 800c700:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c704:	0c1a      	lsrs	r2, r3, #16
 800c706:	b29b      	uxth	r3, r3
 800c708:	ebaa 0303 	sub.w	r3, sl, r3
 800c70c:	f8dc a000 	ldr.w	sl, [ip]
 800c710:	fa13 f38a 	uxtah	r3, r3, sl
 800c714:	fb06 220e 	mla	r2, r6, lr, r2
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	9b00      	ldr	r3, [sp, #0]
 800c71c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c720:	b292      	uxth	r2, r2
 800c722:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c726:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c72a:	f8bd 3000 	ldrh.w	r3, [sp]
 800c72e:	4581      	cmp	r9, r0
 800c730:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c734:	f84c 3b04 	str.w	r3, [ip], #4
 800c738:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c73c:	d2db      	bcs.n	800c6f6 <quorem+0x42>
 800c73e:	f855 300b 	ldr.w	r3, [r5, fp]
 800c742:	b92b      	cbnz	r3, 800c750 <quorem+0x9c>
 800c744:	9b01      	ldr	r3, [sp, #4]
 800c746:	3b04      	subs	r3, #4
 800c748:	429d      	cmp	r5, r3
 800c74a:	461a      	mov	r2, r3
 800c74c:	d32c      	bcc.n	800c7a8 <quorem+0xf4>
 800c74e:	613c      	str	r4, [r7, #16]
 800c750:	4638      	mov	r0, r7
 800c752:	f001 f9a7 	bl	800daa4 <__mcmp>
 800c756:	2800      	cmp	r0, #0
 800c758:	db22      	blt.n	800c7a0 <quorem+0xec>
 800c75a:	3601      	adds	r6, #1
 800c75c:	4629      	mov	r1, r5
 800c75e:	2000      	movs	r0, #0
 800c760:	f858 2b04 	ldr.w	r2, [r8], #4
 800c764:	f8d1 c000 	ldr.w	ip, [r1]
 800c768:	b293      	uxth	r3, r2
 800c76a:	1ac3      	subs	r3, r0, r3
 800c76c:	0c12      	lsrs	r2, r2, #16
 800c76e:	fa13 f38c 	uxtah	r3, r3, ip
 800c772:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c776:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c780:	45c1      	cmp	r9, r8
 800c782:	f841 3b04 	str.w	r3, [r1], #4
 800c786:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c78a:	d2e9      	bcs.n	800c760 <quorem+0xac>
 800c78c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c790:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c794:	b922      	cbnz	r2, 800c7a0 <quorem+0xec>
 800c796:	3b04      	subs	r3, #4
 800c798:	429d      	cmp	r5, r3
 800c79a:	461a      	mov	r2, r3
 800c79c:	d30a      	bcc.n	800c7b4 <quorem+0x100>
 800c79e:	613c      	str	r4, [r7, #16]
 800c7a0:	4630      	mov	r0, r6
 800c7a2:	b003      	add	sp, #12
 800c7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a8:	6812      	ldr	r2, [r2, #0]
 800c7aa:	3b04      	subs	r3, #4
 800c7ac:	2a00      	cmp	r2, #0
 800c7ae:	d1ce      	bne.n	800c74e <quorem+0x9a>
 800c7b0:	3c01      	subs	r4, #1
 800c7b2:	e7c9      	b.n	800c748 <quorem+0x94>
 800c7b4:	6812      	ldr	r2, [r2, #0]
 800c7b6:	3b04      	subs	r3, #4
 800c7b8:	2a00      	cmp	r2, #0
 800c7ba:	d1f0      	bne.n	800c79e <quorem+0xea>
 800c7bc:	3c01      	subs	r4, #1
 800c7be:	e7eb      	b.n	800c798 <quorem+0xe4>
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	e7ee      	b.n	800c7a2 <quorem+0xee>
 800c7c4:	0000      	movs	r0, r0
	...

0800c7c8 <_dtoa_r>:
 800c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7cc:	ed2d 8b04 	vpush	{d8-d9}
 800c7d0:	69c5      	ldr	r5, [r0, #28]
 800c7d2:	b093      	sub	sp, #76	; 0x4c
 800c7d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c7d8:	ec57 6b10 	vmov	r6, r7, d0
 800c7dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c7e0:	9107      	str	r1, [sp, #28]
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	920a      	str	r2, [sp, #40]	; 0x28
 800c7e6:	930d      	str	r3, [sp, #52]	; 0x34
 800c7e8:	b975      	cbnz	r5, 800c808 <_dtoa_r+0x40>
 800c7ea:	2010      	movs	r0, #16
 800c7ec:	f000 fe2a 	bl	800d444 <malloc>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	61e0      	str	r0, [r4, #28]
 800c7f4:	b920      	cbnz	r0, 800c800 <_dtoa_r+0x38>
 800c7f6:	4bae      	ldr	r3, [pc, #696]	; (800cab0 <_dtoa_r+0x2e8>)
 800c7f8:	21ef      	movs	r1, #239	; 0xef
 800c7fa:	48ae      	ldr	r0, [pc, #696]	; (800cab4 <_dtoa_r+0x2ec>)
 800c7fc:	f001 fc82 	bl	800e104 <__assert_func>
 800c800:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c804:	6005      	str	r5, [r0, #0]
 800c806:	60c5      	str	r5, [r0, #12]
 800c808:	69e3      	ldr	r3, [r4, #28]
 800c80a:	6819      	ldr	r1, [r3, #0]
 800c80c:	b151      	cbz	r1, 800c824 <_dtoa_r+0x5c>
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	604a      	str	r2, [r1, #4]
 800c812:	2301      	movs	r3, #1
 800c814:	4093      	lsls	r3, r2
 800c816:	608b      	str	r3, [r1, #8]
 800c818:	4620      	mov	r0, r4
 800c81a:	f000 ff07 	bl	800d62c <_Bfree>
 800c81e:	69e3      	ldr	r3, [r4, #28]
 800c820:	2200      	movs	r2, #0
 800c822:	601a      	str	r2, [r3, #0]
 800c824:	1e3b      	subs	r3, r7, #0
 800c826:	bfbb      	ittet	lt
 800c828:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c82c:	9303      	strlt	r3, [sp, #12]
 800c82e:	2300      	movge	r3, #0
 800c830:	2201      	movlt	r2, #1
 800c832:	bfac      	ite	ge
 800c834:	f8c8 3000 	strge.w	r3, [r8]
 800c838:	f8c8 2000 	strlt.w	r2, [r8]
 800c83c:	4b9e      	ldr	r3, [pc, #632]	; (800cab8 <_dtoa_r+0x2f0>)
 800c83e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c842:	ea33 0308 	bics.w	r3, r3, r8
 800c846:	d11b      	bne.n	800c880 <_dtoa_r+0xb8>
 800c848:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c84a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c84e:	6013      	str	r3, [r2, #0]
 800c850:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c854:	4333      	orrs	r3, r6
 800c856:	f000 8593 	beq.w	800d380 <_dtoa_r+0xbb8>
 800c85a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c85c:	b963      	cbnz	r3, 800c878 <_dtoa_r+0xb0>
 800c85e:	4b97      	ldr	r3, [pc, #604]	; (800cabc <_dtoa_r+0x2f4>)
 800c860:	e027      	b.n	800c8b2 <_dtoa_r+0xea>
 800c862:	4b97      	ldr	r3, [pc, #604]	; (800cac0 <_dtoa_r+0x2f8>)
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	3308      	adds	r3, #8
 800c868:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c86a:	6013      	str	r3, [r2, #0]
 800c86c:	9800      	ldr	r0, [sp, #0]
 800c86e:	b013      	add	sp, #76	; 0x4c
 800c870:	ecbd 8b04 	vpop	{d8-d9}
 800c874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c878:	4b90      	ldr	r3, [pc, #576]	; (800cabc <_dtoa_r+0x2f4>)
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	3303      	adds	r3, #3
 800c87e:	e7f3      	b.n	800c868 <_dtoa_r+0xa0>
 800c880:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c884:	2200      	movs	r2, #0
 800c886:	ec51 0b17 	vmov	r0, r1, d7
 800c88a:	eeb0 8a47 	vmov.f32	s16, s14
 800c88e:	eef0 8a67 	vmov.f32	s17, s15
 800c892:	2300      	movs	r3, #0
 800c894:	f7f4 f918 	bl	8000ac8 <__aeabi_dcmpeq>
 800c898:	4681      	mov	r9, r0
 800c89a:	b160      	cbz	r0, 800c8b6 <_dtoa_r+0xee>
 800c89c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c89e:	2301      	movs	r3, #1
 800c8a0:	6013      	str	r3, [r2, #0]
 800c8a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	f000 8568 	beq.w	800d37a <_dtoa_r+0xbb2>
 800c8aa:	4b86      	ldr	r3, [pc, #536]	; (800cac4 <_dtoa_r+0x2fc>)
 800c8ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c8ae:	6013      	str	r3, [r2, #0]
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	9300      	str	r3, [sp, #0]
 800c8b4:	e7da      	b.n	800c86c <_dtoa_r+0xa4>
 800c8b6:	aa10      	add	r2, sp, #64	; 0x40
 800c8b8:	a911      	add	r1, sp, #68	; 0x44
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	eeb0 0a48 	vmov.f32	s0, s16
 800c8c0:	eef0 0a68 	vmov.f32	s1, s17
 800c8c4:	f001 f994 	bl	800dbf0 <__d2b>
 800c8c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c8cc:	4682      	mov	sl, r0
 800c8ce:	2d00      	cmp	r5, #0
 800c8d0:	d07f      	beq.n	800c9d2 <_dtoa_r+0x20a>
 800c8d2:	ee18 3a90 	vmov	r3, s17
 800c8d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c8de:	ec51 0b18 	vmov	r0, r1, d8
 800c8e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c8e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c8ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	4b75      	ldr	r3, [pc, #468]	; (800cac8 <_dtoa_r+0x300>)
 800c8f4:	f7f3 fcc8 	bl	8000288 <__aeabi_dsub>
 800c8f8:	a367      	add	r3, pc, #412	; (adr r3, 800ca98 <_dtoa_r+0x2d0>)
 800c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fe:	f7f3 fe7b 	bl	80005f8 <__aeabi_dmul>
 800c902:	a367      	add	r3, pc, #412	; (adr r3, 800caa0 <_dtoa_r+0x2d8>)
 800c904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c908:	f7f3 fcc0 	bl	800028c <__adddf3>
 800c90c:	4606      	mov	r6, r0
 800c90e:	4628      	mov	r0, r5
 800c910:	460f      	mov	r7, r1
 800c912:	f7f3 fe07 	bl	8000524 <__aeabi_i2d>
 800c916:	a364      	add	r3, pc, #400	; (adr r3, 800caa8 <_dtoa_r+0x2e0>)
 800c918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91c:	f7f3 fe6c 	bl	80005f8 <__aeabi_dmul>
 800c920:	4602      	mov	r2, r0
 800c922:	460b      	mov	r3, r1
 800c924:	4630      	mov	r0, r6
 800c926:	4639      	mov	r1, r7
 800c928:	f7f3 fcb0 	bl	800028c <__adddf3>
 800c92c:	4606      	mov	r6, r0
 800c92e:	460f      	mov	r7, r1
 800c930:	f7f4 f912 	bl	8000b58 <__aeabi_d2iz>
 800c934:	2200      	movs	r2, #0
 800c936:	4683      	mov	fp, r0
 800c938:	2300      	movs	r3, #0
 800c93a:	4630      	mov	r0, r6
 800c93c:	4639      	mov	r1, r7
 800c93e:	f7f4 f8cd 	bl	8000adc <__aeabi_dcmplt>
 800c942:	b148      	cbz	r0, 800c958 <_dtoa_r+0x190>
 800c944:	4658      	mov	r0, fp
 800c946:	f7f3 fded 	bl	8000524 <__aeabi_i2d>
 800c94a:	4632      	mov	r2, r6
 800c94c:	463b      	mov	r3, r7
 800c94e:	f7f4 f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 800c952:	b908      	cbnz	r0, 800c958 <_dtoa_r+0x190>
 800c954:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c958:	f1bb 0f16 	cmp.w	fp, #22
 800c95c:	d857      	bhi.n	800ca0e <_dtoa_r+0x246>
 800c95e:	4b5b      	ldr	r3, [pc, #364]	; (800cacc <_dtoa_r+0x304>)
 800c960:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c968:	ec51 0b18 	vmov	r0, r1, d8
 800c96c:	f7f4 f8b6 	bl	8000adc <__aeabi_dcmplt>
 800c970:	2800      	cmp	r0, #0
 800c972:	d04e      	beq.n	800ca12 <_dtoa_r+0x24a>
 800c974:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c978:	2300      	movs	r3, #0
 800c97a:	930c      	str	r3, [sp, #48]	; 0x30
 800c97c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c97e:	1b5b      	subs	r3, r3, r5
 800c980:	1e5a      	subs	r2, r3, #1
 800c982:	bf45      	ittet	mi
 800c984:	f1c3 0301 	rsbmi	r3, r3, #1
 800c988:	9305      	strmi	r3, [sp, #20]
 800c98a:	2300      	movpl	r3, #0
 800c98c:	2300      	movmi	r3, #0
 800c98e:	9206      	str	r2, [sp, #24]
 800c990:	bf54      	ite	pl
 800c992:	9305      	strpl	r3, [sp, #20]
 800c994:	9306      	strmi	r3, [sp, #24]
 800c996:	f1bb 0f00 	cmp.w	fp, #0
 800c99a:	db3c      	blt.n	800ca16 <_dtoa_r+0x24e>
 800c99c:	9b06      	ldr	r3, [sp, #24]
 800c99e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c9a2:	445b      	add	r3, fp
 800c9a4:	9306      	str	r3, [sp, #24]
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	9308      	str	r3, [sp, #32]
 800c9aa:	9b07      	ldr	r3, [sp, #28]
 800c9ac:	2b09      	cmp	r3, #9
 800c9ae:	d868      	bhi.n	800ca82 <_dtoa_r+0x2ba>
 800c9b0:	2b05      	cmp	r3, #5
 800c9b2:	bfc4      	itt	gt
 800c9b4:	3b04      	subgt	r3, #4
 800c9b6:	9307      	strgt	r3, [sp, #28]
 800c9b8:	9b07      	ldr	r3, [sp, #28]
 800c9ba:	f1a3 0302 	sub.w	r3, r3, #2
 800c9be:	bfcc      	ite	gt
 800c9c0:	2500      	movgt	r5, #0
 800c9c2:	2501      	movle	r5, #1
 800c9c4:	2b03      	cmp	r3, #3
 800c9c6:	f200 8085 	bhi.w	800cad4 <_dtoa_r+0x30c>
 800c9ca:	e8df f003 	tbb	[pc, r3]
 800c9ce:	3b2e      	.short	0x3b2e
 800c9d0:	5839      	.short	0x5839
 800c9d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c9d6:	441d      	add	r5, r3
 800c9d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c9dc:	2b20      	cmp	r3, #32
 800c9de:	bfc1      	itttt	gt
 800c9e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c9e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c9e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c9ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c9f0:	bfd6      	itet	le
 800c9f2:	f1c3 0320 	rsble	r3, r3, #32
 800c9f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800c9fa:	fa06 f003 	lslle.w	r0, r6, r3
 800c9fe:	f7f3 fd81 	bl	8000504 <__aeabi_ui2d>
 800ca02:	2201      	movs	r2, #1
 800ca04:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ca08:	3d01      	subs	r5, #1
 800ca0a:	920e      	str	r2, [sp, #56]	; 0x38
 800ca0c:	e76f      	b.n	800c8ee <_dtoa_r+0x126>
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e7b3      	b.n	800c97a <_dtoa_r+0x1b2>
 800ca12:	900c      	str	r0, [sp, #48]	; 0x30
 800ca14:	e7b2      	b.n	800c97c <_dtoa_r+0x1b4>
 800ca16:	9b05      	ldr	r3, [sp, #20]
 800ca18:	eba3 030b 	sub.w	r3, r3, fp
 800ca1c:	9305      	str	r3, [sp, #20]
 800ca1e:	f1cb 0300 	rsb	r3, fp, #0
 800ca22:	9308      	str	r3, [sp, #32]
 800ca24:	2300      	movs	r3, #0
 800ca26:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca28:	e7bf      	b.n	800c9aa <_dtoa_r+0x1e2>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ca2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	dc52      	bgt.n	800cada <_dtoa_r+0x312>
 800ca34:	2301      	movs	r3, #1
 800ca36:	9301      	str	r3, [sp, #4]
 800ca38:	9304      	str	r3, [sp, #16]
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	920a      	str	r2, [sp, #40]	; 0x28
 800ca3e:	e00b      	b.n	800ca58 <_dtoa_r+0x290>
 800ca40:	2301      	movs	r3, #1
 800ca42:	e7f3      	b.n	800ca2c <_dtoa_r+0x264>
 800ca44:	2300      	movs	r3, #0
 800ca46:	9309      	str	r3, [sp, #36]	; 0x24
 800ca48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca4a:	445b      	add	r3, fp
 800ca4c:	9301      	str	r3, [sp, #4]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	9304      	str	r3, [sp, #16]
 800ca54:	bfb8      	it	lt
 800ca56:	2301      	movlt	r3, #1
 800ca58:	69e0      	ldr	r0, [r4, #28]
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	2204      	movs	r2, #4
 800ca5e:	f102 0614 	add.w	r6, r2, #20
 800ca62:	429e      	cmp	r6, r3
 800ca64:	d93d      	bls.n	800cae2 <_dtoa_r+0x31a>
 800ca66:	6041      	str	r1, [r0, #4]
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f000 fd9f 	bl	800d5ac <_Balloc>
 800ca6e:	9000      	str	r0, [sp, #0]
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d139      	bne.n	800cae8 <_dtoa_r+0x320>
 800ca74:	4b16      	ldr	r3, [pc, #88]	; (800cad0 <_dtoa_r+0x308>)
 800ca76:	4602      	mov	r2, r0
 800ca78:	f240 11af 	movw	r1, #431	; 0x1af
 800ca7c:	e6bd      	b.n	800c7fa <_dtoa_r+0x32>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e7e1      	b.n	800ca46 <_dtoa_r+0x27e>
 800ca82:	2501      	movs	r5, #1
 800ca84:	2300      	movs	r3, #0
 800ca86:	9307      	str	r3, [sp, #28]
 800ca88:	9509      	str	r5, [sp, #36]	; 0x24
 800ca8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca8e:	9301      	str	r3, [sp, #4]
 800ca90:	9304      	str	r3, [sp, #16]
 800ca92:	2200      	movs	r2, #0
 800ca94:	2312      	movs	r3, #18
 800ca96:	e7d1      	b.n	800ca3c <_dtoa_r+0x274>
 800ca98:	636f4361 	.word	0x636f4361
 800ca9c:	3fd287a7 	.word	0x3fd287a7
 800caa0:	8b60c8b3 	.word	0x8b60c8b3
 800caa4:	3fc68a28 	.word	0x3fc68a28
 800caa8:	509f79fb 	.word	0x509f79fb
 800caac:	3fd34413 	.word	0x3fd34413
 800cab0:	0800f4b1 	.word	0x0800f4b1
 800cab4:	0800f4c8 	.word	0x0800f4c8
 800cab8:	7ff00000 	.word	0x7ff00000
 800cabc:	0800f4ad 	.word	0x0800f4ad
 800cac0:	0800f4a4 	.word	0x0800f4a4
 800cac4:	0800f481 	.word	0x0800f481
 800cac8:	3ff80000 	.word	0x3ff80000
 800cacc:	0800f5b8 	.word	0x0800f5b8
 800cad0:	0800f520 	.word	0x0800f520
 800cad4:	2301      	movs	r3, #1
 800cad6:	9309      	str	r3, [sp, #36]	; 0x24
 800cad8:	e7d7      	b.n	800ca8a <_dtoa_r+0x2c2>
 800cada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cadc:	9301      	str	r3, [sp, #4]
 800cade:	9304      	str	r3, [sp, #16]
 800cae0:	e7ba      	b.n	800ca58 <_dtoa_r+0x290>
 800cae2:	3101      	adds	r1, #1
 800cae4:	0052      	lsls	r2, r2, #1
 800cae6:	e7ba      	b.n	800ca5e <_dtoa_r+0x296>
 800cae8:	69e3      	ldr	r3, [r4, #28]
 800caea:	9a00      	ldr	r2, [sp, #0]
 800caec:	601a      	str	r2, [r3, #0]
 800caee:	9b04      	ldr	r3, [sp, #16]
 800caf0:	2b0e      	cmp	r3, #14
 800caf2:	f200 80a8 	bhi.w	800cc46 <_dtoa_r+0x47e>
 800caf6:	2d00      	cmp	r5, #0
 800caf8:	f000 80a5 	beq.w	800cc46 <_dtoa_r+0x47e>
 800cafc:	f1bb 0f00 	cmp.w	fp, #0
 800cb00:	dd38      	ble.n	800cb74 <_dtoa_r+0x3ac>
 800cb02:	4bc0      	ldr	r3, [pc, #768]	; (800ce04 <_dtoa_r+0x63c>)
 800cb04:	f00b 020f 	and.w	r2, fp, #15
 800cb08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cb10:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cb14:	ea4f 182b 	mov.w	r8, fp, asr #4
 800cb18:	d019      	beq.n	800cb4e <_dtoa_r+0x386>
 800cb1a:	4bbb      	ldr	r3, [pc, #748]	; (800ce08 <_dtoa_r+0x640>)
 800cb1c:	ec51 0b18 	vmov	r0, r1, d8
 800cb20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb24:	f7f3 fe92 	bl	800084c <__aeabi_ddiv>
 800cb28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb2c:	f008 080f 	and.w	r8, r8, #15
 800cb30:	2503      	movs	r5, #3
 800cb32:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ce08 <_dtoa_r+0x640>
 800cb36:	f1b8 0f00 	cmp.w	r8, #0
 800cb3a:	d10a      	bne.n	800cb52 <_dtoa_r+0x38a>
 800cb3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb40:	4632      	mov	r2, r6
 800cb42:	463b      	mov	r3, r7
 800cb44:	f7f3 fe82 	bl	800084c <__aeabi_ddiv>
 800cb48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb4c:	e02b      	b.n	800cba6 <_dtoa_r+0x3de>
 800cb4e:	2502      	movs	r5, #2
 800cb50:	e7ef      	b.n	800cb32 <_dtoa_r+0x36a>
 800cb52:	f018 0f01 	tst.w	r8, #1
 800cb56:	d008      	beq.n	800cb6a <_dtoa_r+0x3a2>
 800cb58:	4630      	mov	r0, r6
 800cb5a:	4639      	mov	r1, r7
 800cb5c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cb60:	f7f3 fd4a 	bl	80005f8 <__aeabi_dmul>
 800cb64:	3501      	adds	r5, #1
 800cb66:	4606      	mov	r6, r0
 800cb68:	460f      	mov	r7, r1
 800cb6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cb6e:	f109 0908 	add.w	r9, r9, #8
 800cb72:	e7e0      	b.n	800cb36 <_dtoa_r+0x36e>
 800cb74:	f000 809f 	beq.w	800ccb6 <_dtoa_r+0x4ee>
 800cb78:	f1cb 0600 	rsb	r6, fp, #0
 800cb7c:	4ba1      	ldr	r3, [pc, #644]	; (800ce04 <_dtoa_r+0x63c>)
 800cb7e:	4fa2      	ldr	r7, [pc, #648]	; (800ce08 <_dtoa_r+0x640>)
 800cb80:	f006 020f 	and.w	r2, r6, #15
 800cb84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8c:	ec51 0b18 	vmov	r0, r1, d8
 800cb90:	f7f3 fd32 	bl	80005f8 <__aeabi_dmul>
 800cb94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb98:	1136      	asrs	r6, r6, #4
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	2502      	movs	r5, #2
 800cb9e:	2e00      	cmp	r6, #0
 800cba0:	d17e      	bne.n	800cca0 <_dtoa_r+0x4d8>
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d1d0      	bne.n	800cb48 <_dtoa_r+0x380>
 800cba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cba8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f000 8084 	beq.w	800ccba <_dtoa_r+0x4f2>
 800cbb2:	4b96      	ldr	r3, [pc, #600]	; (800ce0c <_dtoa_r+0x644>)
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	4640      	mov	r0, r8
 800cbb8:	4649      	mov	r1, r9
 800cbba:	f7f3 ff8f 	bl	8000adc <__aeabi_dcmplt>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	d07b      	beq.n	800ccba <_dtoa_r+0x4f2>
 800cbc2:	9b04      	ldr	r3, [sp, #16]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d078      	beq.n	800ccba <_dtoa_r+0x4f2>
 800cbc8:	9b01      	ldr	r3, [sp, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	dd39      	ble.n	800cc42 <_dtoa_r+0x47a>
 800cbce:	4b90      	ldr	r3, [pc, #576]	; (800ce10 <_dtoa_r+0x648>)
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	4640      	mov	r0, r8
 800cbd4:	4649      	mov	r1, r9
 800cbd6:	f7f3 fd0f 	bl	80005f8 <__aeabi_dmul>
 800cbda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbde:	9e01      	ldr	r6, [sp, #4]
 800cbe0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cbe4:	3501      	adds	r5, #1
 800cbe6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cbea:	4628      	mov	r0, r5
 800cbec:	f7f3 fc9a 	bl	8000524 <__aeabi_i2d>
 800cbf0:	4642      	mov	r2, r8
 800cbf2:	464b      	mov	r3, r9
 800cbf4:	f7f3 fd00 	bl	80005f8 <__aeabi_dmul>
 800cbf8:	4b86      	ldr	r3, [pc, #536]	; (800ce14 <_dtoa_r+0x64c>)
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f7f3 fb46 	bl	800028c <__adddf3>
 800cc00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cc04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc08:	9303      	str	r3, [sp, #12]
 800cc0a:	2e00      	cmp	r6, #0
 800cc0c:	d158      	bne.n	800ccc0 <_dtoa_r+0x4f8>
 800cc0e:	4b82      	ldr	r3, [pc, #520]	; (800ce18 <_dtoa_r+0x650>)
 800cc10:	2200      	movs	r2, #0
 800cc12:	4640      	mov	r0, r8
 800cc14:	4649      	mov	r1, r9
 800cc16:	f7f3 fb37 	bl	8000288 <__aeabi_dsub>
 800cc1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc1e:	4680      	mov	r8, r0
 800cc20:	4689      	mov	r9, r1
 800cc22:	f7f3 ff79 	bl	8000b18 <__aeabi_dcmpgt>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	f040 8296 	bne.w	800d158 <_dtoa_r+0x990>
 800cc2c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cc30:	4640      	mov	r0, r8
 800cc32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc36:	4649      	mov	r1, r9
 800cc38:	f7f3 ff50 	bl	8000adc <__aeabi_dcmplt>
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	f040 8289 	bne.w	800d154 <_dtoa_r+0x98c>
 800cc42:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cc46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	f2c0 814e 	blt.w	800ceea <_dtoa_r+0x722>
 800cc4e:	f1bb 0f0e 	cmp.w	fp, #14
 800cc52:	f300 814a 	bgt.w	800ceea <_dtoa_r+0x722>
 800cc56:	4b6b      	ldr	r3, [pc, #428]	; (800ce04 <_dtoa_r+0x63c>)
 800cc58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cc5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f280 80dc 	bge.w	800ce20 <_dtoa_r+0x658>
 800cc68:	9b04      	ldr	r3, [sp, #16]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	f300 80d8 	bgt.w	800ce20 <_dtoa_r+0x658>
 800cc70:	f040 826f 	bne.w	800d152 <_dtoa_r+0x98a>
 800cc74:	4b68      	ldr	r3, [pc, #416]	; (800ce18 <_dtoa_r+0x650>)
 800cc76:	2200      	movs	r2, #0
 800cc78:	4640      	mov	r0, r8
 800cc7a:	4649      	mov	r1, r9
 800cc7c:	f7f3 fcbc 	bl	80005f8 <__aeabi_dmul>
 800cc80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc84:	f7f3 ff3e 	bl	8000b04 <__aeabi_dcmpge>
 800cc88:	9e04      	ldr	r6, [sp, #16]
 800cc8a:	4637      	mov	r7, r6
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	f040 8245 	bne.w	800d11c <_dtoa_r+0x954>
 800cc92:	9d00      	ldr	r5, [sp, #0]
 800cc94:	2331      	movs	r3, #49	; 0x31
 800cc96:	f805 3b01 	strb.w	r3, [r5], #1
 800cc9a:	f10b 0b01 	add.w	fp, fp, #1
 800cc9e:	e241      	b.n	800d124 <_dtoa_r+0x95c>
 800cca0:	07f2      	lsls	r2, r6, #31
 800cca2:	d505      	bpl.n	800ccb0 <_dtoa_r+0x4e8>
 800cca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cca8:	f7f3 fca6 	bl	80005f8 <__aeabi_dmul>
 800ccac:	3501      	adds	r5, #1
 800ccae:	2301      	movs	r3, #1
 800ccb0:	1076      	asrs	r6, r6, #1
 800ccb2:	3708      	adds	r7, #8
 800ccb4:	e773      	b.n	800cb9e <_dtoa_r+0x3d6>
 800ccb6:	2502      	movs	r5, #2
 800ccb8:	e775      	b.n	800cba6 <_dtoa_r+0x3de>
 800ccba:	9e04      	ldr	r6, [sp, #16]
 800ccbc:	465f      	mov	r7, fp
 800ccbe:	e792      	b.n	800cbe6 <_dtoa_r+0x41e>
 800ccc0:	9900      	ldr	r1, [sp, #0]
 800ccc2:	4b50      	ldr	r3, [pc, #320]	; (800ce04 <_dtoa_r+0x63c>)
 800ccc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccc8:	4431      	add	r1, r6
 800ccca:	9102      	str	r1, [sp, #8]
 800cccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccce:	eeb0 9a47 	vmov.f32	s18, s14
 800ccd2:	eef0 9a67 	vmov.f32	s19, s15
 800ccd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ccda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ccde:	2900      	cmp	r1, #0
 800cce0:	d044      	beq.n	800cd6c <_dtoa_r+0x5a4>
 800cce2:	494e      	ldr	r1, [pc, #312]	; (800ce1c <_dtoa_r+0x654>)
 800cce4:	2000      	movs	r0, #0
 800cce6:	f7f3 fdb1 	bl	800084c <__aeabi_ddiv>
 800ccea:	ec53 2b19 	vmov	r2, r3, d9
 800ccee:	f7f3 facb 	bl	8000288 <__aeabi_dsub>
 800ccf2:	9d00      	ldr	r5, [sp, #0]
 800ccf4:	ec41 0b19 	vmov	d9, r0, r1
 800ccf8:	4649      	mov	r1, r9
 800ccfa:	4640      	mov	r0, r8
 800ccfc:	f7f3 ff2c 	bl	8000b58 <__aeabi_d2iz>
 800cd00:	4606      	mov	r6, r0
 800cd02:	f7f3 fc0f 	bl	8000524 <__aeabi_i2d>
 800cd06:	4602      	mov	r2, r0
 800cd08:	460b      	mov	r3, r1
 800cd0a:	4640      	mov	r0, r8
 800cd0c:	4649      	mov	r1, r9
 800cd0e:	f7f3 fabb 	bl	8000288 <__aeabi_dsub>
 800cd12:	3630      	adds	r6, #48	; 0x30
 800cd14:	f805 6b01 	strb.w	r6, [r5], #1
 800cd18:	ec53 2b19 	vmov	r2, r3, d9
 800cd1c:	4680      	mov	r8, r0
 800cd1e:	4689      	mov	r9, r1
 800cd20:	f7f3 fedc 	bl	8000adc <__aeabi_dcmplt>
 800cd24:	2800      	cmp	r0, #0
 800cd26:	d164      	bne.n	800cdf2 <_dtoa_r+0x62a>
 800cd28:	4642      	mov	r2, r8
 800cd2a:	464b      	mov	r3, r9
 800cd2c:	4937      	ldr	r1, [pc, #220]	; (800ce0c <_dtoa_r+0x644>)
 800cd2e:	2000      	movs	r0, #0
 800cd30:	f7f3 faaa 	bl	8000288 <__aeabi_dsub>
 800cd34:	ec53 2b19 	vmov	r2, r3, d9
 800cd38:	f7f3 fed0 	bl	8000adc <__aeabi_dcmplt>
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	f040 80b6 	bne.w	800ceae <_dtoa_r+0x6e6>
 800cd42:	9b02      	ldr	r3, [sp, #8]
 800cd44:	429d      	cmp	r5, r3
 800cd46:	f43f af7c 	beq.w	800cc42 <_dtoa_r+0x47a>
 800cd4a:	4b31      	ldr	r3, [pc, #196]	; (800ce10 <_dtoa_r+0x648>)
 800cd4c:	ec51 0b19 	vmov	r0, r1, d9
 800cd50:	2200      	movs	r2, #0
 800cd52:	f7f3 fc51 	bl	80005f8 <__aeabi_dmul>
 800cd56:	4b2e      	ldr	r3, [pc, #184]	; (800ce10 <_dtoa_r+0x648>)
 800cd58:	ec41 0b19 	vmov	d9, r0, r1
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	4640      	mov	r0, r8
 800cd60:	4649      	mov	r1, r9
 800cd62:	f7f3 fc49 	bl	80005f8 <__aeabi_dmul>
 800cd66:	4680      	mov	r8, r0
 800cd68:	4689      	mov	r9, r1
 800cd6a:	e7c5      	b.n	800ccf8 <_dtoa_r+0x530>
 800cd6c:	ec51 0b17 	vmov	r0, r1, d7
 800cd70:	f7f3 fc42 	bl	80005f8 <__aeabi_dmul>
 800cd74:	9b02      	ldr	r3, [sp, #8]
 800cd76:	9d00      	ldr	r5, [sp, #0]
 800cd78:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd7a:	ec41 0b19 	vmov	d9, r0, r1
 800cd7e:	4649      	mov	r1, r9
 800cd80:	4640      	mov	r0, r8
 800cd82:	f7f3 fee9 	bl	8000b58 <__aeabi_d2iz>
 800cd86:	4606      	mov	r6, r0
 800cd88:	f7f3 fbcc 	bl	8000524 <__aeabi_i2d>
 800cd8c:	3630      	adds	r6, #48	; 0x30
 800cd8e:	4602      	mov	r2, r0
 800cd90:	460b      	mov	r3, r1
 800cd92:	4640      	mov	r0, r8
 800cd94:	4649      	mov	r1, r9
 800cd96:	f7f3 fa77 	bl	8000288 <__aeabi_dsub>
 800cd9a:	f805 6b01 	strb.w	r6, [r5], #1
 800cd9e:	9b02      	ldr	r3, [sp, #8]
 800cda0:	429d      	cmp	r5, r3
 800cda2:	4680      	mov	r8, r0
 800cda4:	4689      	mov	r9, r1
 800cda6:	f04f 0200 	mov.w	r2, #0
 800cdaa:	d124      	bne.n	800cdf6 <_dtoa_r+0x62e>
 800cdac:	4b1b      	ldr	r3, [pc, #108]	; (800ce1c <_dtoa_r+0x654>)
 800cdae:	ec51 0b19 	vmov	r0, r1, d9
 800cdb2:	f7f3 fa6b 	bl	800028c <__adddf3>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	460b      	mov	r3, r1
 800cdba:	4640      	mov	r0, r8
 800cdbc:	4649      	mov	r1, r9
 800cdbe:	f7f3 feab 	bl	8000b18 <__aeabi_dcmpgt>
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d173      	bne.n	800ceae <_dtoa_r+0x6e6>
 800cdc6:	ec53 2b19 	vmov	r2, r3, d9
 800cdca:	4914      	ldr	r1, [pc, #80]	; (800ce1c <_dtoa_r+0x654>)
 800cdcc:	2000      	movs	r0, #0
 800cdce:	f7f3 fa5b 	bl	8000288 <__aeabi_dsub>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	4640      	mov	r0, r8
 800cdd8:	4649      	mov	r1, r9
 800cdda:	f7f3 fe7f 	bl	8000adc <__aeabi_dcmplt>
 800cdde:	2800      	cmp	r0, #0
 800cde0:	f43f af2f 	beq.w	800cc42 <_dtoa_r+0x47a>
 800cde4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cde6:	1e6b      	subs	r3, r5, #1
 800cde8:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cdee:	2b30      	cmp	r3, #48	; 0x30
 800cdf0:	d0f8      	beq.n	800cde4 <_dtoa_r+0x61c>
 800cdf2:	46bb      	mov	fp, r7
 800cdf4:	e04a      	b.n	800ce8c <_dtoa_r+0x6c4>
 800cdf6:	4b06      	ldr	r3, [pc, #24]	; (800ce10 <_dtoa_r+0x648>)
 800cdf8:	f7f3 fbfe 	bl	80005f8 <__aeabi_dmul>
 800cdfc:	4680      	mov	r8, r0
 800cdfe:	4689      	mov	r9, r1
 800ce00:	e7bd      	b.n	800cd7e <_dtoa_r+0x5b6>
 800ce02:	bf00      	nop
 800ce04:	0800f5b8 	.word	0x0800f5b8
 800ce08:	0800f590 	.word	0x0800f590
 800ce0c:	3ff00000 	.word	0x3ff00000
 800ce10:	40240000 	.word	0x40240000
 800ce14:	401c0000 	.word	0x401c0000
 800ce18:	40140000 	.word	0x40140000
 800ce1c:	3fe00000 	.word	0x3fe00000
 800ce20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ce24:	9d00      	ldr	r5, [sp, #0]
 800ce26:	4642      	mov	r2, r8
 800ce28:	464b      	mov	r3, r9
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	4639      	mov	r1, r7
 800ce2e:	f7f3 fd0d 	bl	800084c <__aeabi_ddiv>
 800ce32:	f7f3 fe91 	bl	8000b58 <__aeabi_d2iz>
 800ce36:	9001      	str	r0, [sp, #4]
 800ce38:	f7f3 fb74 	bl	8000524 <__aeabi_i2d>
 800ce3c:	4642      	mov	r2, r8
 800ce3e:	464b      	mov	r3, r9
 800ce40:	f7f3 fbda 	bl	80005f8 <__aeabi_dmul>
 800ce44:	4602      	mov	r2, r0
 800ce46:	460b      	mov	r3, r1
 800ce48:	4630      	mov	r0, r6
 800ce4a:	4639      	mov	r1, r7
 800ce4c:	f7f3 fa1c 	bl	8000288 <__aeabi_dsub>
 800ce50:	9e01      	ldr	r6, [sp, #4]
 800ce52:	9f04      	ldr	r7, [sp, #16]
 800ce54:	3630      	adds	r6, #48	; 0x30
 800ce56:	f805 6b01 	strb.w	r6, [r5], #1
 800ce5a:	9e00      	ldr	r6, [sp, #0]
 800ce5c:	1bae      	subs	r6, r5, r6
 800ce5e:	42b7      	cmp	r7, r6
 800ce60:	4602      	mov	r2, r0
 800ce62:	460b      	mov	r3, r1
 800ce64:	d134      	bne.n	800ced0 <_dtoa_r+0x708>
 800ce66:	f7f3 fa11 	bl	800028c <__adddf3>
 800ce6a:	4642      	mov	r2, r8
 800ce6c:	464b      	mov	r3, r9
 800ce6e:	4606      	mov	r6, r0
 800ce70:	460f      	mov	r7, r1
 800ce72:	f7f3 fe51 	bl	8000b18 <__aeabi_dcmpgt>
 800ce76:	b9c8      	cbnz	r0, 800ceac <_dtoa_r+0x6e4>
 800ce78:	4642      	mov	r2, r8
 800ce7a:	464b      	mov	r3, r9
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	4639      	mov	r1, r7
 800ce80:	f7f3 fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce84:	b110      	cbz	r0, 800ce8c <_dtoa_r+0x6c4>
 800ce86:	9b01      	ldr	r3, [sp, #4]
 800ce88:	07db      	lsls	r3, r3, #31
 800ce8a:	d40f      	bmi.n	800ceac <_dtoa_r+0x6e4>
 800ce8c:	4651      	mov	r1, sl
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f000 fbcc 	bl	800d62c <_Bfree>
 800ce94:	2300      	movs	r3, #0
 800ce96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce98:	702b      	strb	r3, [r5, #0]
 800ce9a:	f10b 0301 	add.w	r3, fp, #1
 800ce9e:	6013      	str	r3, [r2, #0]
 800cea0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f43f ace2 	beq.w	800c86c <_dtoa_r+0xa4>
 800cea8:	601d      	str	r5, [r3, #0]
 800ceaa:	e4df      	b.n	800c86c <_dtoa_r+0xa4>
 800ceac:	465f      	mov	r7, fp
 800ceae:	462b      	mov	r3, r5
 800ceb0:	461d      	mov	r5, r3
 800ceb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ceb6:	2a39      	cmp	r2, #57	; 0x39
 800ceb8:	d106      	bne.n	800cec8 <_dtoa_r+0x700>
 800ceba:	9a00      	ldr	r2, [sp, #0]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d1f7      	bne.n	800ceb0 <_dtoa_r+0x6e8>
 800cec0:	9900      	ldr	r1, [sp, #0]
 800cec2:	2230      	movs	r2, #48	; 0x30
 800cec4:	3701      	adds	r7, #1
 800cec6:	700a      	strb	r2, [r1, #0]
 800cec8:	781a      	ldrb	r2, [r3, #0]
 800ceca:	3201      	adds	r2, #1
 800cecc:	701a      	strb	r2, [r3, #0]
 800cece:	e790      	b.n	800cdf2 <_dtoa_r+0x62a>
 800ced0:	4ba3      	ldr	r3, [pc, #652]	; (800d160 <_dtoa_r+0x998>)
 800ced2:	2200      	movs	r2, #0
 800ced4:	f7f3 fb90 	bl	80005f8 <__aeabi_dmul>
 800ced8:	2200      	movs	r2, #0
 800ceda:	2300      	movs	r3, #0
 800cedc:	4606      	mov	r6, r0
 800cede:	460f      	mov	r7, r1
 800cee0:	f7f3 fdf2 	bl	8000ac8 <__aeabi_dcmpeq>
 800cee4:	2800      	cmp	r0, #0
 800cee6:	d09e      	beq.n	800ce26 <_dtoa_r+0x65e>
 800cee8:	e7d0      	b.n	800ce8c <_dtoa_r+0x6c4>
 800ceea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ceec:	2a00      	cmp	r2, #0
 800ceee:	f000 80ca 	beq.w	800d086 <_dtoa_r+0x8be>
 800cef2:	9a07      	ldr	r2, [sp, #28]
 800cef4:	2a01      	cmp	r2, #1
 800cef6:	f300 80ad 	bgt.w	800d054 <_dtoa_r+0x88c>
 800cefa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cefc:	2a00      	cmp	r2, #0
 800cefe:	f000 80a5 	beq.w	800d04c <_dtoa_r+0x884>
 800cf02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cf06:	9e08      	ldr	r6, [sp, #32]
 800cf08:	9d05      	ldr	r5, [sp, #20]
 800cf0a:	9a05      	ldr	r2, [sp, #20]
 800cf0c:	441a      	add	r2, r3
 800cf0e:	9205      	str	r2, [sp, #20]
 800cf10:	9a06      	ldr	r2, [sp, #24]
 800cf12:	2101      	movs	r1, #1
 800cf14:	441a      	add	r2, r3
 800cf16:	4620      	mov	r0, r4
 800cf18:	9206      	str	r2, [sp, #24]
 800cf1a:	f000 fc3d 	bl	800d798 <__i2b>
 800cf1e:	4607      	mov	r7, r0
 800cf20:	b165      	cbz	r5, 800cf3c <_dtoa_r+0x774>
 800cf22:	9b06      	ldr	r3, [sp, #24]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	dd09      	ble.n	800cf3c <_dtoa_r+0x774>
 800cf28:	42ab      	cmp	r3, r5
 800cf2a:	9a05      	ldr	r2, [sp, #20]
 800cf2c:	bfa8      	it	ge
 800cf2e:	462b      	movge	r3, r5
 800cf30:	1ad2      	subs	r2, r2, r3
 800cf32:	9205      	str	r2, [sp, #20]
 800cf34:	9a06      	ldr	r2, [sp, #24]
 800cf36:	1aed      	subs	r5, r5, r3
 800cf38:	1ad3      	subs	r3, r2, r3
 800cf3a:	9306      	str	r3, [sp, #24]
 800cf3c:	9b08      	ldr	r3, [sp, #32]
 800cf3e:	b1f3      	cbz	r3, 800cf7e <_dtoa_r+0x7b6>
 800cf40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f000 80a3 	beq.w	800d08e <_dtoa_r+0x8c6>
 800cf48:	2e00      	cmp	r6, #0
 800cf4a:	dd10      	ble.n	800cf6e <_dtoa_r+0x7a6>
 800cf4c:	4639      	mov	r1, r7
 800cf4e:	4632      	mov	r2, r6
 800cf50:	4620      	mov	r0, r4
 800cf52:	f000 fce1 	bl	800d918 <__pow5mult>
 800cf56:	4652      	mov	r2, sl
 800cf58:	4601      	mov	r1, r0
 800cf5a:	4607      	mov	r7, r0
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f000 fc31 	bl	800d7c4 <__multiply>
 800cf62:	4651      	mov	r1, sl
 800cf64:	4680      	mov	r8, r0
 800cf66:	4620      	mov	r0, r4
 800cf68:	f000 fb60 	bl	800d62c <_Bfree>
 800cf6c:	46c2      	mov	sl, r8
 800cf6e:	9b08      	ldr	r3, [sp, #32]
 800cf70:	1b9a      	subs	r2, r3, r6
 800cf72:	d004      	beq.n	800cf7e <_dtoa_r+0x7b6>
 800cf74:	4651      	mov	r1, sl
 800cf76:	4620      	mov	r0, r4
 800cf78:	f000 fcce 	bl	800d918 <__pow5mult>
 800cf7c:	4682      	mov	sl, r0
 800cf7e:	2101      	movs	r1, #1
 800cf80:	4620      	mov	r0, r4
 800cf82:	f000 fc09 	bl	800d798 <__i2b>
 800cf86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	4606      	mov	r6, r0
 800cf8c:	f340 8081 	ble.w	800d092 <_dtoa_r+0x8ca>
 800cf90:	461a      	mov	r2, r3
 800cf92:	4601      	mov	r1, r0
 800cf94:	4620      	mov	r0, r4
 800cf96:	f000 fcbf 	bl	800d918 <__pow5mult>
 800cf9a:	9b07      	ldr	r3, [sp, #28]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	4606      	mov	r6, r0
 800cfa0:	dd7a      	ble.n	800d098 <_dtoa_r+0x8d0>
 800cfa2:	f04f 0800 	mov.w	r8, #0
 800cfa6:	6933      	ldr	r3, [r6, #16]
 800cfa8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cfac:	6918      	ldr	r0, [r3, #16]
 800cfae:	f000 fba5 	bl	800d6fc <__hi0bits>
 800cfb2:	f1c0 0020 	rsb	r0, r0, #32
 800cfb6:	9b06      	ldr	r3, [sp, #24]
 800cfb8:	4418      	add	r0, r3
 800cfba:	f010 001f 	ands.w	r0, r0, #31
 800cfbe:	f000 8094 	beq.w	800d0ea <_dtoa_r+0x922>
 800cfc2:	f1c0 0320 	rsb	r3, r0, #32
 800cfc6:	2b04      	cmp	r3, #4
 800cfc8:	f340 8085 	ble.w	800d0d6 <_dtoa_r+0x90e>
 800cfcc:	9b05      	ldr	r3, [sp, #20]
 800cfce:	f1c0 001c 	rsb	r0, r0, #28
 800cfd2:	4403      	add	r3, r0
 800cfd4:	9305      	str	r3, [sp, #20]
 800cfd6:	9b06      	ldr	r3, [sp, #24]
 800cfd8:	4403      	add	r3, r0
 800cfda:	4405      	add	r5, r0
 800cfdc:	9306      	str	r3, [sp, #24]
 800cfde:	9b05      	ldr	r3, [sp, #20]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	dd05      	ble.n	800cff0 <_dtoa_r+0x828>
 800cfe4:	4651      	mov	r1, sl
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	4620      	mov	r0, r4
 800cfea:	f000 fcef 	bl	800d9cc <__lshift>
 800cfee:	4682      	mov	sl, r0
 800cff0:	9b06      	ldr	r3, [sp, #24]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	dd05      	ble.n	800d002 <_dtoa_r+0x83a>
 800cff6:	4631      	mov	r1, r6
 800cff8:	461a      	mov	r2, r3
 800cffa:	4620      	mov	r0, r4
 800cffc:	f000 fce6 	bl	800d9cc <__lshift>
 800d000:	4606      	mov	r6, r0
 800d002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d004:	2b00      	cmp	r3, #0
 800d006:	d072      	beq.n	800d0ee <_dtoa_r+0x926>
 800d008:	4631      	mov	r1, r6
 800d00a:	4650      	mov	r0, sl
 800d00c:	f000 fd4a 	bl	800daa4 <__mcmp>
 800d010:	2800      	cmp	r0, #0
 800d012:	da6c      	bge.n	800d0ee <_dtoa_r+0x926>
 800d014:	2300      	movs	r3, #0
 800d016:	4651      	mov	r1, sl
 800d018:	220a      	movs	r2, #10
 800d01a:	4620      	mov	r0, r4
 800d01c:	f000 fb28 	bl	800d670 <__multadd>
 800d020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d022:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d026:	4682      	mov	sl, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f000 81b0 	beq.w	800d38e <_dtoa_r+0xbc6>
 800d02e:	2300      	movs	r3, #0
 800d030:	4639      	mov	r1, r7
 800d032:	220a      	movs	r2, #10
 800d034:	4620      	mov	r0, r4
 800d036:	f000 fb1b 	bl	800d670 <__multadd>
 800d03a:	9b01      	ldr	r3, [sp, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	4607      	mov	r7, r0
 800d040:	f300 8096 	bgt.w	800d170 <_dtoa_r+0x9a8>
 800d044:	9b07      	ldr	r3, [sp, #28]
 800d046:	2b02      	cmp	r3, #2
 800d048:	dc59      	bgt.n	800d0fe <_dtoa_r+0x936>
 800d04a:	e091      	b.n	800d170 <_dtoa_r+0x9a8>
 800d04c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d04e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d052:	e758      	b.n	800cf06 <_dtoa_r+0x73e>
 800d054:	9b04      	ldr	r3, [sp, #16]
 800d056:	1e5e      	subs	r6, r3, #1
 800d058:	9b08      	ldr	r3, [sp, #32]
 800d05a:	42b3      	cmp	r3, r6
 800d05c:	bfbf      	itttt	lt
 800d05e:	9b08      	ldrlt	r3, [sp, #32]
 800d060:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d062:	9608      	strlt	r6, [sp, #32]
 800d064:	1af3      	sublt	r3, r6, r3
 800d066:	bfb4      	ite	lt
 800d068:	18d2      	addlt	r2, r2, r3
 800d06a:	1b9e      	subge	r6, r3, r6
 800d06c:	9b04      	ldr	r3, [sp, #16]
 800d06e:	bfbc      	itt	lt
 800d070:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d072:	2600      	movlt	r6, #0
 800d074:	2b00      	cmp	r3, #0
 800d076:	bfb7      	itett	lt
 800d078:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d07c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d080:	1a9d      	sublt	r5, r3, r2
 800d082:	2300      	movlt	r3, #0
 800d084:	e741      	b.n	800cf0a <_dtoa_r+0x742>
 800d086:	9e08      	ldr	r6, [sp, #32]
 800d088:	9d05      	ldr	r5, [sp, #20]
 800d08a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d08c:	e748      	b.n	800cf20 <_dtoa_r+0x758>
 800d08e:	9a08      	ldr	r2, [sp, #32]
 800d090:	e770      	b.n	800cf74 <_dtoa_r+0x7ac>
 800d092:	9b07      	ldr	r3, [sp, #28]
 800d094:	2b01      	cmp	r3, #1
 800d096:	dc19      	bgt.n	800d0cc <_dtoa_r+0x904>
 800d098:	9b02      	ldr	r3, [sp, #8]
 800d09a:	b9bb      	cbnz	r3, 800d0cc <_dtoa_r+0x904>
 800d09c:	9b03      	ldr	r3, [sp, #12]
 800d09e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0a2:	b99b      	cbnz	r3, 800d0cc <_dtoa_r+0x904>
 800d0a4:	9b03      	ldr	r3, [sp, #12]
 800d0a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0aa:	0d1b      	lsrs	r3, r3, #20
 800d0ac:	051b      	lsls	r3, r3, #20
 800d0ae:	b183      	cbz	r3, 800d0d2 <_dtoa_r+0x90a>
 800d0b0:	9b05      	ldr	r3, [sp, #20]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	9305      	str	r3, [sp, #20]
 800d0b6:	9b06      	ldr	r3, [sp, #24]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	9306      	str	r3, [sp, #24]
 800d0bc:	f04f 0801 	mov.w	r8, #1
 800d0c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f47f af6f 	bne.w	800cfa6 <_dtoa_r+0x7de>
 800d0c8:	2001      	movs	r0, #1
 800d0ca:	e774      	b.n	800cfb6 <_dtoa_r+0x7ee>
 800d0cc:	f04f 0800 	mov.w	r8, #0
 800d0d0:	e7f6      	b.n	800d0c0 <_dtoa_r+0x8f8>
 800d0d2:	4698      	mov	r8, r3
 800d0d4:	e7f4      	b.n	800d0c0 <_dtoa_r+0x8f8>
 800d0d6:	d082      	beq.n	800cfde <_dtoa_r+0x816>
 800d0d8:	9a05      	ldr	r2, [sp, #20]
 800d0da:	331c      	adds	r3, #28
 800d0dc:	441a      	add	r2, r3
 800d0de:	9205      	str	r2, [sp, #20]
 800d0e0:	9a06      	ldr	r2, [sp, #24]
 800d0e2:	441a      	add	r2, r3
 800d0e4:	441d      	add	r5, r3
 800d0e6:	9206      	str	r2, [sp, #24]
 800d0e8:	e779      	b.n	800cfde <_dtoa_r+0x816>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	e7f4      	b.n	800d0d8 <_dtoa_r+0x910>
 800d0ee:	9b04      	ldr	r3, [sp, #16]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	dc37      	bgt.n	800d164 <_dtoa_r+0x99c>
 800d0f4:	9b07      	ldr	r3, [sp, #28]
 800d0f6:	2b02      	cmp	r3, #2
 800d0f8:	dd34      	ble.n	800d164 <_dtoa_r+0x99c>
 800d0fa:	9b04      	ldr	r3, [sp, #16]
 800d0fc:	9301      	str	r3, [sp, #4]
 800d0fe:	9b01      	ldr	r3, [sp, #4]
 800d100:	b963      	cbnz	r3, 800d11c <_dtoa_r+0x954>
 800d102:	4631      	mov	r1, r6
 800d104:	2205      	movs	r2, #5
 800d106:	4620      	mov	r0, r4
 800d108:	f000 fab2 	bl	800d670 <__multadd>
 800d10c:	4601      	mov	r1, r0
 800d10e:	4606      	mov	r6, r0
 800d110:	4650      	mov	r0, sl
 800d112:	f000 fcc7 	bl	800daa4 <__mcmp>
 800d116:	2800      	cmp	r0, #0
 800d118:	f73f adbb 	bgt.w	800cc92 <_dtoa_r+0x4ca>
 800d11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d11e:	9d00      	ldr	r5, [sp, #0]
 800d120:	ea6f 0b03 	mvn.w	fp, r3
 800d124:	f04f 0800 	mov.w	r8, #0
 800d128:	4631      	mov	r1, r6
 800d12a:	4620      	mov	r0, r4
 800d12c:	f000 fa7e 	bl	800d62c <_Bfree>
 800d130:	2f00      	cmp	r7, #0
 800d132:	f43f aeab 	beq.w	800ce8c <_dtoa_r+0x6c4>
 800d136:	f1b8 0f00 	cmp.w	r8, #0
 800d13a:	d005      	beq.n	800d148 <_dtoa_r+0x980>
 800d13c:	45b8      	cmp	r8, r7
 800d13e:	d003      	beq.n	800d148 <_dtoa_r+0x980>
 800d140:	4641      	mov	r1, r8
 800d142:	4620      	mov	r0, r4
 800d144:	f000 fa72 	bl	800d62c <_Bfree>
 800d148:	4639      	mov	r1, r7
 800d14a:	4620      	mov	r0, r4
 800d14c:	f000 fa6e 	bl	800d62c <_Bfree>
 800d150:	e69c      	b.n	800ce8c <_dtoa_r+0x6c4>
 800d152:	2600      	movs	r6, #0
 800d154:	4637      	mov	r7, r6
 800d156:	e7e1      	b.n	800d11c <_dtoa_r+0x954>
 800d158:	46bb      	mov	fp, r7
 800d15a:	4637      	mov	r7, r6
 800d15c:	e599      	b.n	800cc92 <_dtoa_r+0x4ca>
 800d15e:	bf00      	nop
 800d160:	40240000 	.word	0x40240000
 800d164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d166:	2b00      	cmp	r3, #0
 800d168:	f000 80c8 	beq.w	800d2fc <_dtoa_r+0xb34>
 800d16c:	9b04      	ldr	r3, [sp, #16]
 800d16e:	9301      	str	r3, [sp, #4]
 800d170:	2d00      	cmp	r5, #0
 800d172:	dd05      	ble.n	800d180 <_dtoa_r+0x9b8>
 800d174:	4639      	mov	r1, r7
 800d176:	462a      	mov	r2, r5
 800d178:	4620      	mov	r0, r4
 800d17a:	f000 fc27 	bl	800d9cc <__lshift>
 800d17e:	4607      	mov	r7, r0
 800d180:	f1b8 0f00 	cmp.w	r8, #0
 800d184:	d05b      	beq.n	800d23e <_dtoa_r+0xa76>
 800d186:	6879      	ldr	r1, [r7, #4]
 800d188:	4620      	mov	r0, r4
 800d18a:	f000 fa0f 	bl	800d5ac <_Balloc>
 800d18e:	4605      	mov	r5, r0
 800d190:	b928      	cbnz	r0, 800d19e <_dtoa_r+0x9d6>
 800d192:	4b83      	ldr	r3, [pc, #524]	; (800d3a0 <_dtoa_r+0xbd8>)
 800d194:	4602      	mov	r2, r0
 800d196:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d19a:	f7ff bb2e 	b.w	800c7fa <_dtoa_r+0x32>
 800d19e:	693a      	ldr	r2, [r7, #16]
 800d1a0:	3202      	adds	r2, #2
 800d1a2:	0092      	lsls	r2, r2, #2
 800d1a4:	f107 010c 	add.w	r1, r7, #12
 800d1a8:	300c      	adds	r0, #12
 800d1aa:	f7ff fa75 	bl	800c698 <memcpy>
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	4629      	mov	r1, r5
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	f000 fc0a 	bl	800d9cc <__lshift>
 800d1b8:	9b00      	ldr	r3, [sp, #0]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	9304      	str	r3, [sp, #16]
 800d1be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	9308      	str	r3, [sp, #32]
 800d1c6:	9b02      	ldr	r3, [sp, #8]
 800d1c8:	f003 0301 	and.w	r3, r3, #1
 800d1cc:	46b8      	mov	r8, r7
 800d1ce:	9306      	str	r3, [sp, #24]
 800d1d0:	4607      	mov	r7, r0
 800d1d2:	9b04      	ldr	r3, [sp, #16]
 800d1d4:	4631      	mov	r1, r6
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	4650      	mov	r0, sl
 800d1da:	9301      	str	r3, [sp, #4]
 800d1dc:	f7ff fa6a 	bl	800c6b4 <quorem>
 800d1e0:	4641      	mov	r1, r8
 800d1e2:	9002      	str	r0, [sp, #8]
 800d1e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d1e8:	4650      	mov	r0, sl
 800d1ea:	f000 fc5b 	bl	800daa4 <__mcmp>
 800d1ee:	463a      	mov	r2, r7
 800d1f0:	9005      	str	r0, [sp, #20]
 800d1f2:	4631      	mov	r1, r6
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	f000 fc71 	bl	800dadc <__mdiff>
 800d1fa:	68c2      	ldr	r2, [r0, #12]
 800d1fc:	4605      	mov	r5, r0
 800d1fe:	bb02      	cbnz	r2, 800d242 <_dtoa_r+0xa7a>
 800d200:	4601      	mov	r1, r0
 800d202:	4650      	mov	r0, sl
 800d204:	f000 fc4e 	bl	800daa4 <__mcmp>
 800d208:	4602      	mov	r2, r0
 800d20a:	4629      	mov	r1, r5
 800d20c:	4620      	mov	r0, r4
 800d20e:	9209      	str	r2, [sp, #36]	; 0x24
 800d210:	f000 fa0c 	bl	800d62c <_Bfree>
 800d214:	9b07      	ldr	r3, [sp, #28]
 800d216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d218:	9d04      	ldr	r5, [sp, #16]
 800d21a:	ea43 0102 	orr.w	r1, r3, r2
 800d21e:	9b06      	ldr	r3, [sp, #24]
 800d220:	4319      	orrs	r1, r3
 800d222:	d110      	bne.n	800d246 <_dtoa_r+0xa7e>
 800d224:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d228:	d029      	beq.n	800d27e <_dtoa_r+0xab6>
 800d22a:	9b05      	ldr	r3, [sp, #20]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	dd02      	ble.n	800d236 <_dtoa_r+0xa6e>
 800d230:	9b02      	ldr	r3, [sp, #8]
 800d232:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d236:	9b01      	ldr	r3, [sp, #4]
 800d238:	f883 9000 	strb.w	r9, [r3]
 800d23c:	e774      	b.n	800d128 <_dtoa_r+0x960>
 800d23e:	4638      	mov	r0, r7
 800d240:	e7ba      	b.n	800d1b8 <_dtoa_r+0x9f0>
 800d242:	2201      	movs	r2, #1
 800d244:	e7e1      	b.n	800d20a <_dtoa_r+0xa42>
 800d246:	9b05      	ldr	r3, [sp, #20]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	db04      	blt.n	800d256 <_dtoa_r+0xa8e>
 800d24c:	9907      	ldr	r1, [sp, #28]
 800d24e:	430b      	orrs	r3, r1
 800d250:	9906      	ldr	r1, [sp, #24]
 800d252:	430b      	orrs	r3, r1
 800d254:	d120      	bne.n	800d298 <_dtoa_r+0xad0>
 800d256:	2a00      	cmp	r2, #0
 800d258:	dded      	ble.n	800d236 <_dtoa_r+0xa6e>
 800d25a:	4651      	mov	r1, sl
 800d25c:	2201      	movs	r2, #1
 800d25e:	4620      	mov	r0, r4
 800d260:	f000 fbb4 	bl	800d9cc <__lshift>
 800d264:	4631      	mov	r1, r6
 800d266:	4682      	mov	sl, r0
 800d268:	f000 fc1c 	bl	800daa4 <__mcmp>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	dc03      	bgt.n	800d278 <_dtoa_r+0xab0>
 800d270:	d1e1      	bne.n	800d236 <_dtoa_r+0xa6e>
 800d272:	f019 0f01 	tst.w	r9, #1
 800d276:	d0de      	beq.n	800d236 <_dtoa_r+0xa6e>
 800d278:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d27c:	d1d8      	bne.n	800d230 <_dtoa_r+0xa68>
 800d27e:	9a01      	ldr	r2, [sp, #4]
 800d280:	2339      	movs	r3, #57	; 0x39
 800d282:	7013      	strb	r3, [r2, #0]
 800d284:	462b      	mov	r3, r5
 800d286:	461d      	mov	r5, r3
 800d288:	3b01      	subs	r3, #1
 800d28a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d28e:	2a39      	cmp	r2, #57	; 0x39
 800d290:	d06c      	beq.n	800d36c <_dtoa_r+0xba4>
 800d292:	3201      	adds	r2, #1
 800d294:	701a      	strb	r2, [r3, #0]
 800d296:	e747      	b.n	800d128 <_dtoa_r+0x960>
 800d298:	2a00      	cmp	r2, #0
 800d29a:	dd07      	ble.n	800d2ac <_dtoa_r+0xae4>
 800d29c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d2a0:	d0ed      	beq.n	800d27e <_dtoa_r+0xab6>
 800d2a2:	9a01      	ldr	r2, [sp, #4]
 800d2a4:	f109 0301 	add.w	r3, r9, #1
 800d2a8:	7013      	strb	r3, [r2, #0]
 800d2aa:	e73d      	b.n	800d128 <_dtoa_r+0x960>
 800d2ac:	9b04      	ldr	r3, [sp, #16]
 800d2ae:	9a08      	ldr	r2, [sp, #32]
 800d2b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d043      	beq.n	800d340 <_dtoa_r+0xb78>
 800d2b8:	4651      	mov	r1, sl
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	220a      	movs	r2, #10
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f000 f9d6 	bl	800d670 <__multadd>
 800d2c4:	45b8      	cmp	r8, r7
 800d2c6:	4682      	mov	sl, r0
 800d2c8:	f04f 0300 	mov.w	r3, #0
 800d2cc:	f04f 020a 	mov.w	r2, #10
 800d2d0:	4641      	mov	r1, r8
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	d107      	bne.n	800d2e6 <_dtoa_r+0xb1e>
 800d2d6:	f000 f9cb 	bl	800d670 <__multadd>
 800d2da:	4680      	mov	r8, r0
 800d2dc:	4607      	mov	r7, r0
 800d2de:	9b04      	ldr	r3, [sp, #16]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	9304      	str	r3, [sp, #16]
 800d2e4:	e775      	b.n	800d1d2 <_dtoa_r+0xa0a>
 800d2e6:	f000 f9c3 	bl	800d670 <__multadd>
 800d2ea:	4639      	mov	r1, r7
 800d2ec:	4680      	mov	r8, r0
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	220a      	movs	r2, #10
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	f000 f9bc 	bl	800d670 <__multadd>
 800d2f8:	4607      	mov	r7, r0
 800d2fa:	e7f0      	b.n	800d2de <_dtoa_r+0xb16>
 800d2fc:	9b04      	ldr	r3, [sp, #16]
 800d2fe:	9301      	str	r3, [sp, #4]
 800d300:	9d00      	ldr	r5, [sp, #0]
 800d302:	4631      	mov	r1, r6
 800d304:	4650      	mov	r0, sl
 800d306:	f7ff f9d5 	bl	800c6b4 <quorem>
 800d30a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d30e:	9b00      	ldr	r3, [sp, #0]
 800d310:	f805 9b01 	strb.w	r9, [r5], #1
 800d314:	1aea      	subs	r2, r5, r3
 800d316:	9b01      	ldr	r3, [sp, #4]
 800d318:	4293      	cmp	r3, r2
 800d31a:	dd07      	ble.n	800d32c <_dtoa_r+0xb64>
 800d31c:	4651      	mov	r1, sl
 800d31e:	2300      	movs	r3, #0
 800d320:	220a      	movs	r2, #10
 800d322:	4620      	mov	r0, r4
 800d324:	f000 f9a4 	bl	800d670 <__multadd>
 800d328:	4682      	mov	sl, r0
 800d32a:	e7ea      	b.n	800d302 <_dtoa_r+0xb3a>
 800d32c:	9b01      	ldr	r3, [sp, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	bfc8      	it	gt
 800d332:	461d      	movgt	r5, r3
 800d334:	9b00      	ldr	r3, [sp, #0]
 800d336:	bfd8      	it	le
 800d338:	2501      	movle	r5, #1
 800d33a:	441d      	add	r5, r3
 800d33c:	f04f 0800 	mov.w	r8, #0
 800d340:	4651      	mov	r1, sl
 800d342:	2201      	movs	r2, #1
 800d344:	4620      	mov	r0, r4
 800d346:	f000 fb41 	bl	800d9cc <__lshift>
 800d34a:	4631      	mov	r1, r6
 800d34c:	4682      	mov	sl, r0
 800d34e:	f000 fba9 	bl	800daa4 <__mcmp>
 800d352:	2800      	cmp	r0, #0
 800d354:	dc96      	bgt.n	800d284 <_dtoa_r+0xabc>
 800d356:	d102      	bne.n	800d35e <_dtoa_r+0xb96>
 800d358:	f019 0f01 	tst.w	r9, #1
 800d35c:	d192      	bne.n	800d284 <_dtoa_r+0xabc>
 800d35e:	462b      	mov	r3, r5
 800d360:	461d      	mov	r5, r3
 800d362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d366:	2a30      	cmp	r2, #48	; 0x30
 800d368:	d0fa      	beq.n	800d360 <_dtoa_r+0xb98>
 800d36a:	e6dd      	b.n	800d128 <_dtoa_r+0x960>
 800d36c:	9a00      	ldr	r2, [sp, #0]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d189      	bne.n	800d286 <_dtoa_r+0xabe>
 800d372:	f10b 0b01 	add.w	fp, fp, #1
 800d376:	2331      	movs	r3, #49	; 0x31
 800d378:	e796      	b.n	800d2a8 <_dtoa_r+0xae0>
 800d37a:	4b0a      	ldr	r3, [pc, #40]	; (800d3a4 <_dtoa_r+0xbdc>)
 800d37c:	f7ff ba99 	b.w	800c8b2 <_dtoa_r+0xea>
 800d380:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d382:	2b00      	cmp	r3, #0
 800d384:	f47f aa6d 	bne.w	800c862 <_dtoa_r+0x9a>
 800d388:	4b07      	ldr	r3, [pc, #28]	; (800d3a8 <_dtoa_r+0xbe0>)
 800d38a:	f7ff ba92 	b.w	800c8b2 <_dtoa_r+0xea>
 800d38e:	9b01      	ldr	r3, [sp, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	dcb5      	bgt.n	800d300 <_dtoa_r+0xb38>
 800d394:	9b07      	ldr	r3, [sp, #28]
 800d396:	2b02      	cmp	r3, #2
 800d398:	f73f aeb1 	bgt.w	800d0fe <_dtoa_r+0x936>
 800d39c:	e7b0      	b.n	800d300 <_dtoa_r+0xb38>
 800d39e:	bf00      	nop
 800d3a0:	0800f520 	.word	0x0800f520
 800d3a4:	0800f480 	.word	0x0800f480
 800d3a8:	0800f4a4 	.word	0x0800f4a4

0800d3ac <_free_r>:
 800d3ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3ae:	2900      	cmp	r1, #0
 800d3b0:	d044      	beq.n	800d43c <_free_r+0x90>
 800d3b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3b6:	9001      	str	r0, [sp, #4]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f1a1 0404 	sub.w	r4, r1, #4
 800d3be:	bfb8      	it	lt
 800d3c0:	18e4      	addlt	r4, r4, r3
 800d3c2:	f000 f8e7 	bl	800d594 <__malloc_lock>
 800d3c6:	4a1e      	ldr	r2, [pc, #120]	; (800d440 <_free_r+0x94>)
 800d3c8:	9801      	ldr	r0, [sp, #4]
 800d3ca:	6813      	ldr	r3, [r2, #0]
 800d3cc:	b933      	cbnz	r3, 800d3dc <_free_r+0x30>
 800d3ce:	6063      	str	r3, [r4, #4]
 800d3d0:	6014      	str	r4, [r2, #0]
 800d3d2:	b003      	add	sp, #12
 800d3d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3d8:	f000 b8e2 	b.w	800d5a0 <__malloc_unlock>
 800d3dc:	42a3      	cmp	r3, r4
 800d3de:	d908      	bls.n	800d3f2 <_free_r+0x46>
 800d3e0:	6825      	ldr	r5, [r4, #0]
 800d3e2:	1961      	adds	r1, r4, r5
 800d3e4:	428b      	cmp	r3, r1
 800d3e6:	bf01      	itttt	eq
 800d3e8:	6819      	ldreq	r1, [r3, #0]
 800d3ea:	685b      	ldreq	r3, [r3, #4]
 800d3ec:	1949      	addeq	r1, r1, r5
 800d3ee:	6021      	streq	r1, [r4, #0]
 800d3f0:	e7ed      	b.n	800d3ce <_free_r+0x22>
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	b10b      	cbz	r3, 800d3fc <_free_r+0x50>
 800d3f8:	42a3      	cmp	r3, r4
 800d3fa:	d9fa      	bls.n	800d3f2 <_free_r+0x46>
 800d3fc:	6811      	ldr	r1, [r2, #0]
 800d3fe:	1855      	adds	r5, r2, r1
 800d400:	42a5      	cmp	r5, r4
 800d402:	d10b      	bne.n	800d41c <_free_r+0x70>
 800d404:	6824      	ldr	r4, [r4, #0]
 800d406:	4421      	add	r1, r4
 800d408:	1854      	adds	r4, r2, r1
 800d40a:	42a3      	cmp	r3, r4
 800d40c:	6011      	str	r1, [r2, #0]
 800d40e:	d1e0      	bne.n	800d3d2 <_free_r+0x26>
 800d410:	681c      	ldr	r4, [r3, #0]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	6053      	str	r3, [r2, #4]
 800d416:	440c      	add	r4, r1
 800d418:	6014      	str	r4, [r2, #0]
 800d41a:	e7da      	b.n	800d3d2 <_free_r+0x26>
 800d41c:	d902      	bls.n	800d424 <_free_r+0x78>
 800d41e:	230c      	movs	r3, #12
 800d420:	6003      	str	r3, [r0, #0]
 800d422:	e7d6      	b.n	800d3d2 <_free_r+0x26>
 800d424:	6825      	ldr	r5, [r4, #0]
 800d426:	1961      	adds	r1, r4, r5
 800d428:	428b      	cmp	r3, r1
 800d42a:	bf04      	itt	eq
 800d42c:	6819      	ldreq	r1, [r3, #0]
 800d42e:	685b      	ldreq	r3, [r3, #4]
 800d430:	6063      	str	r3, [r4, #4]
 800d432:	bf04      	itt	eq
 800d434:	1949      	addeq	r1, r1, r5
 800d436:	6021      	streq	r1, [r4, #0]
 800d438:	6054      	str	r4, [r2, #4]
 800d43a:	e7ca      	b.n	800d3d2 <_free_r+0x26>
 800d43c:	b003      	add	sp, #12
 800d43e:	bd30      	pop	{r4, r5, pc}
 800d440:	200054ec 	.word	0x200054ec

0800d444 <malloc>:
 800d444:	4b02      	ldr	r3, [pc, #8]	; (800d450 <malloc+0xc>)
 800d446:	4601      	mov	r1, r0
 800d448:	6818      	ldr	r0, [r3, #0]
 800d44a:	f000 b823 	b.w	800d494 <_malloc_r>
 800d44e:	bf00      	nop
 800d450:	2000007c 	.word	0x2000007c

0800d454 <sbrk_aligned>:
 800d454:	b570      	push	{r4, r5, r6, lr}
 800d456:	4e0e      	ldr	r6, [pc, #56]	; (800d490 <sbrk_aligned+0x3c>)
 800d458:	460c      	mov	r4, r1
 800d45a:	6831      	ldr	r1, [r6, #0]
 800d45c:	4605      	mov	r5, r0
 800d45e:	b911      	cbnz	r1, 800d466 <sbrk_aligned+0x12>
 800d460:	f000 fe40 	bl	800e0e4 <_sbrk_r>
 800d464:	6030      	str	r0, [r6, #0]
 800d466:	4621      	mov	r1, r4
 800d468:	4628      	mov	r0, r5
 800d46a:	f000 fe3b 	bl	800e0e4 <_sbrk_r>
 800d46e:	1c43      	adds	r3, r0, #1
 800d470:	d00a      	beq.n	800d488 <sbrk_aligned+0x34>
 800d472:	1cc4      	adds	r4, r0, #3
 800d474:	f024 0403 	bic.w	r4, r4, #3
 800d478:	42a0      	cmp	r0, r4
 800d47a:	d007      	beq.n	800d48c <sbrk_aligned+0x38>
 800d47c:	1a21      	subs	r1, r4, r0
 800d47e:	4628      	mov	r0, r5
 800d480:	f000 fe30 	bl	800e0e4 <_sbrk_r>
 800d484:	3001      	adds	r0, #1
 800d486:	d101      	bne.n	800d48c <sbrk_aligned+0x38>
 800d488:	f04f 34ff 	mov.w	r4, #4294967295
 800d48c:	4620      	mov	r0, r4
 800d48e:	bd70      	pop	{r4, r5, r6, pc}
 800d490:	200054f0 	.word	0x200054f0

0800d494 <_malloc_r>:
 800d494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d498:	1ccd      	adds	r5, r1, #3
 800d49a:	f025 0503 	bic.w	r5, r5, #3
 800d49e:	3508      	adds	r5, #8
 800d4a0:	2d0c      	cmp	r5, #12
 800d4a2:	bf38      	it	cc
 800d4a4:	250c      	movcc	r5, #12
 800d4a6:	2d00      	cmp	r5, #0
 800d4a8:	4607      	mov	r7, r0
 800d4aa:	db01      	blt.n	800d4b0 <_malloc_r+0x1c>
 800d4ac:	42a9      	cmp	r1, r5
 800d4ae:	d905      	bls.n	800d4bc <_malloc_r+0x28>
 800d4b0:	230c      	movs	r3, #12
 800d4b2:	603b      	str	r3, [r7, #0]
 800d4b4:	2600      	movs	r6, #0
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d590 <_malloc_r+0xfc>
 800d4c0:	f000 f868 	bl	800d594 <__malloc_lock>
 800d4c4:	f8d8 3000 	ldr.w	r3, [r8]
 800d4c8:	461c      	mov	r4, r3
 800d4ca:	bb5c      	cbnz	r4, 800d524 <_malloc_r+0x90>
 800d4cc:	4629      	mov	r1, r5
 800d4ce:	4638      	mov	r0, r7
 800d4d0:	f7ff ffc0 	bl	800d454 <sbrk_aligned>
 800d4d4:	1c43      	adds	r3, r0, #1
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	d155      	bne.n	800d586 <_malloc_r+0xf2>
 800d4da:	f8d8 4000 	ldr.w	r4, [r8]
 800d4de:	4626      	mov	r6, r4
 800d4e0:	2e00      	cmp	r6, #0
 800d4e2:	d145      	bne.n	800d570 <_malloc_r+0xdc>
 800d4e4:	2c00      	cmp	r4, #0
 800d4e6:	d048      	beq.n	800d57a <_malloc_r+0xe6>
 800d4e8:	6823      	ldr	r3, [r4, #0]
 800d4ea:	4631      	mov	r1, r6
 800d4ec:	4638      	mov	r0, r7
 800d4ee:	eb04 0903 	add.w	r9, r4, r3
 800d4f2:	f000 fdf7 	bl	800e0e4 <_sbrk_r>
 800d4f6:	4581      	cmp	r9, r0
 800d4f8:	d13f      	bne.n	800d57a <_malloc_r+0xe6>
 800d4fa:	6821      	ldr	r1, [r4, #0]
 800d4fc:	1a6d      	subs	r5, r5, r1
 800d4fe:	4629      	mov	r1, r5
 800d500:	4638      	mov	r0, r7
 800d502:	f7ff ffa7 	bl	800d454 <sbrk_aligned>
 800d506:	3001      	adds	r0, #1
 800d508:	d037      	beq.n	800d57a <_malloc_r+0xe6>
 800d50a:	6823      	ldr	r3, [r4, #0]
 800d50c:	442b      	add	r3, r5
 800d50e:	6023      	str	r3, [r4, #0]
 800d510:	f8d8 3000 	ldr.w	r3, [r8]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d038      	beq.n	800d58a <_malloc_r+0xf6>
 800d518:	685a      	ldr	r2, [r3, #4]
 800d51a:	42a2      	cmp	r2, r4
 800d51c:	d12b      	bne.n	800d576 <_malloc_r+0xe2>
 800d51e:	2200      	movs	r2, #0
 800d520:	605a      	str	r2, [r3, #4]
 800d522:	e00f      	b.n	800d544 <_malloc_r+0xb0>
 800d524:	6822      	ldr	r2, [r4, #0]
 800d526:	1b52      	subs	r2, r2, r5
 800d528:	d41f      	bmi.n	800d56a <_malloc_r+0xd6>
 800d52a:	2a0b      	cmp	r2, #11
 800d52c:	d917      	bls.n	800d55e <_malloc_r+0xca>
 800d52e:	1961      	adds	r1, r4, r5
 800d530:	42a3      	cmp	r3, r4
 800d532:	6025      	str	r5, [r4, #0]
 800d534:	bf18      	it	ne
 800d536:	6059      	strne	r1, [r3, #4]
 800d538:	6863      	ldr	r3, [r4, #4]
 800d53a:	bf08      	it	eq
 800d53c:	f8c8 1000 	streq.w	r1, [r8]
 800d540:	5162      	str	r2, [r4, r5]
 800d542:	604b      	str	r3, [r1, #4]
 800d544:	4638      	mov	r0, r7
 800d546:	f104 060b 	add.w	r6, r4, #11
 800d54a:	f000 f829 	bl	800d5a0 <__malloc_unlock>
 800d54e:	f026 0607 	bic.w	r6, r6, #7
 800d552:	1d23      	adds	r3, r4, #4
 800d554:	1af2      	subs	r2, r6, r3
 800d556:	d0ae      	beq.n	800d4b6 <_malloc_r+0x22>
 800d558:	1b9b      	subs	r3, r3, r6
 800d55a:	50a3      	str	r3, [r4, r2]
 800d55c:	e7ab      	b.n	800d4b6 <_malloc_r+0x22>
 800d55e:	42a3      	cmp	r3, r4
 800d560:	6862      	ldr	r2, [r4, #4]
 800d562:	d1dd      	bne.n	800d520 <_malloc_r+0x8c>
 800d564:	f8c8 2000 	str.w	r2, [r8]
 800d568:	e7ec      	b.n	800d544 <_malloc_r+0xb0>
 800d56a:	4623      	mov	r3, r4
 800d56c:	6864      	ldr	r4, [r4, #4]
 800d56e:	e7ac      	b.n	800d4ca <_malloc_r+0x36>
 800d570:	4634      	mov	r4, r6
 800d572:	6876      	ldr	r6, [r6, #4]
 800d574:	e7b4      	b.n	800d4e0 <_malloc_r+0x4c>
 800d576:	4613      	mov	r3, r2
 800d578:	e7cc      	b.n	800d514 <_malloc_r+0x80>
 800d57a:	230c      	movs	r3, #12
 800d57c:	603b      	str	r3, [r7, #0]
 800d57e:	4638      	mov	r0, r7
 800d580:	f000 f80e 	bl	800d5a0 <__malloc_unlock>
 800d584:	e797      	b.n	800d4b6 <_malloc_r+0x22>
 800d586:	6025      	str	r5, [r4, #0]
 800d588:	e7dc      	b.n	800d544 <_malloc_r+0xb0>
 800d58a:	605b      	str	r3, [r3, #4]
 800d58c:	deff      	udf	#255	; 0xff
 800d58e:	bf00      	nop
 800d590:	200054ec 	.word	0x200054ec

0800d594 <__malloc_lock>:
 800d594:	4801      	ldr	r0, [pc, #4]	; (800d59c <__malloc_lock+0x8>)
 800d596:	f7ff b87d 	b.w	800c694 <__retarget_lock_acquire_recursive>
 800d59a:	bf00      	nop
 800d59c:	200054e8 	.word	0x200054e8

0800d5a0 <__malloc_unlock>:
 800d5a0:	4801      	ldr	r0, [pc, #4]	; (800d5a8 <__malloc_unlock+0x8>)
 800d5a2:	f7ff b878 	b.w	800c696 <__retarget_lock_release_recursive>
 800d5a6:	bf00      	nop
 800d5a8:	200054e8 	.word	0x200054e8

0800d5ac <_Balloc>:
 800d5ac:	b570      	push	{r4, r5, r6, lr}
 800d5ae:	69c6      	ldr	r6, [r0, #28]
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	460d      	mov	r5, r1
 800d5b4:	b976      	cbnz	r6, 800d5d4 <_Balloc+0x28>
 800d5b6:	2010      	movs	r0, #16
 800d5b8:	f7ff ff44 	bl	800d444 <malloc>
 800d5bc:	4602      	mov	r2, r0
 800d5be:	61e0      	str	r0, [r4, #28]
 800d5c0:	b920      	cbnz	r0, 800d5cc <_Balloc+0x20>
 800d5c2:	4b18      	ldr	r3, [pc, #96]	; (800d624 <_Balloc+0x78>)
 800d5c4:	4818      	ldr	r0, [pc, #96]	; (800d628 <_Balloc+0x7c>)
 800d5c6:	216b      	movs	r1, #107	; 0x6b
 800d5c8:	f000 fd9c 	bl	800e104 <__assert_func>
 800d5cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5d0:	6006      	str	r6, [r0, #0]
 800d5d2:	60c6      	str	r6, [r0, #12]
 800d5d4:	69e6      	ldr	r6, [r4, #28]
 800d5d6:	68f3      	ldr	r3, [r6, #12]
 800d5d8:	b183      	cbz	r3, 800d5fc <_Balloc+0x50>
 800d5da:	69e3      	ldr	r3, [r4, #28]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5e2:	b9b8      	cbnz	r0, 800d614 <_Balloc+0x68>
 800d5e4:	2101      	movs	r1, #1
 800d5e6:	fa01 f605 	lsl.w	r6, r1, r5
 800d5ea:	1d72      	adds	r2, r6, #5
 800d5ec:	0092      	lsls	r2, r2, #2
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	f000 fda6 	bl	800e140 <_calloc_r>
 800d5f4:	b160      	cbz	r0, 800d610 <_Balloc+0x64>
 800d5f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d5fa:	e00e      	b.n	800d61a <_Balloc+0x6e>
 800d5fc:	2221      	movs	r2, #33	; 0x21
 800d5fe:	2104      	movs	r1, #4
 800d600:	4620      	mov	r0, r4
 800d602:	f000 fd9d 	bl	800e140 <_calloc_r>
 800d606:	69e3      	ldr	r3, [r4, #28]
 800d608:	60f0      	str	r0, [r6, #12]
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d1e4      	bne.n	800d5da <_Balloc+0x2e>
 800d610:	2000      	movs	r0, #0
 800d612:	bd70      	pop	{r4, r5, r6, pc}
 800d614:	6802      	ldr	r2, [r0, #0]
 800d616:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d61a:	2300      	movs	r3, #0
 800d61c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d620:	e7f7      	b.n	800d612 <_Balloc+0x66>
 800d622:	bf00      	nop
 800d624:	0800f4b1 	.word	0x0800f4b1
 800d628:	0800f531 	.word	0x0800f531

0800d62c <_Bfree>:
 800d62c:	b570      	push	{r4, r5, r6, lr}
 800d62e:	69c6      	ldr	r6, [r0, #28]
 800d630:	4605      	mov	r5, r0
 800d632:	460c      	mov	r4, r1
 800d634:	b976      	cbnz	r6, 800d654 <_Bfree+0x28>
 800d636:	2010      	movs	r0, #16
 800d638:	f7ff ff04 	bl	800d444 <malloc>
 800d63c:	4602      	mov	r2, r0
 800d63e:	61e8      	str	r0, [r5, #28]
 800d640:	b920      	cbnz	r0, 800d64c <_Bfree+0x20>
 800d642:	4b09      	ldr	r3, [pc, #36]	; (800d668 <_Bfree+0x3c>)
 800d644:	4809      	ldr	r0, [pc, #36]	; (800d66c <_Bfree+0x40>)
 800d646:	218f      	movs	r1, #143	; 0x8f
 800d648:	f000 fd5c 	bl	800e104 <__assert_func>
 800d64c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d650:	6006      	str	r6, [r0, #0]
 800d652:	60c6      	str	r6, [r0, #12]
 800d654:	b13c      	cbz	r4, 800d666 <_Bfree+0x3a>
 800d656:	69eb      	ldr	r3, [r5, #28]
 800d658:	6862      	ldr	r2, [r4, #4]
 800d65a:	68db      	ldr	r3, [r3, #12]
 800d65c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d660:	6021      	str	r1, [r4, #0]
 800d662:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d666:	bd70      	pop	{r4, r5, r6, pc}
 800d668:	0800f4b1 	.word	0x0800f4b1
 800d66c:	0800f531 	.word	0x0800f531

0800d670 <__multadd>:
 800d670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d674:	690d      	ldr	r5, [r1, #16]
 800d676:	4607      	mov	r7, r0
 800d678:	460c      	mov	r4, r1
 800d67a:	461e      	mov	r6, r3
 800d67c:	f101 0c14 	add.w	ip, r1, #20
 800d680:	2000      	movs	r0, #0
 800d682:	f8dc 3000 	ldr.w	r3, [ip]
 800d686:	b299      	uxth	r1, r3
 800d688:	fb02 6101 	mla	r1, r2, r1, r6
 800d68c:	0c1e      	lsrs	r6, r3, #16
 800d68e:	0c0b      	lsrs	r3, r1, #16
 800d690:	fb02 3306 	mla	r3, r2, r6, r3
 800d694:	b289      	uxth	r1, r1
 800d696:	3001      	adds	r0, #1
 800d698:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d69c:	4285      	cmp	r5, r0
 800d69e:	f84c 1b04 	str.w	r1, [ip], #4
 800d6a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d6a6:	dcec      	bgt.n	800d682 <__multadd+0x12>
 800d6a8:	b30e      	cbz	r6, 800d6ee <__multadd+0x7e>
 800d6aa:	68a3      	ldr	r3, [r4, #8]
 800d6ac:	42ab      	cmp	r3, r5
 800d6ae:	dc19      	bgt.n	800d6e4 <__multadd+0x74>
 800d6b0:	6861      	ldr	r1, [r4, #4]
 800d6b2:	4638      	mov	r0, r7
 800d6b4:	3101      	adds	r1, #1
 800d6b6:	f7ff ff79 	bl	800d5ac <_Balloc>
 800d6ba:	4680      	mov	r8, r0
 800d6bc:	b928      	cbnz	r0, 800d6ca <__multadd+0x5a>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	4b0c      	ldr	r3, [pc, #48]	; (800d6f4 <__multadd+0x84>)
 800d6c2:	480d      	ldr	r0, [pc, #52]	; (800d6f8 <__multadd+0x88>)
 800d6c4:	21ba      	movs	r1, #186	; 0xba
 800d6c6:	f000 fd1d 	bl	800e104 <__assert_func>
 800d6ca:	6922      	ldr	r2, [r4, #16]
 800d6cc:	3202      	adds	r2, #2
 800d6ce:	f104 010c 	add.w	r1, r4, #12
 800d6d2:	0092      	lsls	r2, r2, #2
 800d6d4:	300c      	adds	r0, #12
 800d6d6:	f7fe ffdf 	bl	800c698 <memcpy>
 800d6da:	4621      	mov	r1, r4
 800d6dc:	4638      	mov	r0, r7
 800d6de:	f7ff ffa5 	bl	800d62c <_Bfree>
 800d6e2:	4644      	mov	r4, r8
 800d6e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6e8:	3501      	adds	r5, #1
 800d6ea:	615e      	str	r6, [r3, #20]
 800d6ec:	6125      	str	r5, [r4, #16]
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6f4:	0800f520 	.word	0x0800f520
 800d6f8:	0800f531 	.word	0x0800f531

0800d6fc <__hi0bits>:
 800d6fc:	0c03      	lsrs	r3, r0, #16
 800d6fe:	041b      	lsls	r3, r3, #16
 800d700:	b9d3      	cbnz	r3, 800d738 <__hi0bits+0x3c>
 800d702:	0400      	lsls	r0, r0, #16
 800d704:	2310      	movs	r3, #16
 800d706:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d70a:	bf04      	itt	eq
 800d70c:	0200      	lsleq	r0, r0, #8
 800d70e:	3308      	addeq	r3, #8
 800d710:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d714:	bf04      	itt	eq
 800d716:	0100      	lsleq	r0, r0, #4
 800d718:	3304      	addeq	r3, #4
 800d71a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d71e:	bf04      	itt	eq
 800d720:	0080      	lsleq	r0, r0, #2
 800d722:	3302      	addeq	r3, #2
 800d724:	2800      	cmp	r0, #0
 800d726:	db05      	blt.n	800d734 <__hi0bits+0x38>
 800d728:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d72c:	f103 0301 	add.w	r3, r3, #1
 800d730:	bf08      	it	eq
 800d732:	2320      	moveq	r3, #32
 800d734:	4618      	mov	r0, r3
 800d736:	4770      	bx	lr
 800d738:	2300      	movs	r3, #0
 800d73a:	e7e4      	b.n	800d706 <__hi0bits+0xa>

0800d73c <__lo0bits>:
 800d73c:	6803      	ldr	r3, [r0, #0]
 800d73e:	f013 0207 	ands.w	r2, r3, #7
 800d742:	d00c      	beq.n	800d75e <__lo0bits+0x22>
 800d744:	07d9      	lsls	r1, r3, #31
 800d746:	d422      	bmi.n	800d78e <__lo0bits+0x52>
 800d748:	079a      	lsls	r2, r3, #30
 800d74a:	bf49      	itett	mi
 800d74c:	085b      	lsrmi	r3, r3, #1
 800d74e:	089b      	lsrpl	r3, r3, #2
 800d750:	6003      	strmi	r3, [r0, #0]
 800d752:	2201      	movmi	r2, #1
 800d754:	bf5c      	itt	pl
 800d756:	6003      	strpl	r3, [r0, #0]
 800d758:	2202      	movpl	r2, #2
 800d75a:	4610      	mov	r0, r2
 800d75c:	4770      	bx	lr
 800d75e:	b299      	uxth	r1, r3
 800d760:	b909      	cbnz	r1, 800d766 <__lo0bits+0x2a>
 800d762:	0c1b      	lsrs	r3, r3, #16
 800d764:	2210      	movs	r2, #16
 800d766:	b2d9      	uxtb	r1, r3
 800d768:	b909      	cbnz	r1, 800d76e <__lo0bits+0x32>
 800d76a:	3208      	adds	r2, #8
 800d76c:	0a1b      	lsrs	r3, r3, #8
 800d76e:	0719      	lsls	r1, r3, #28
 800d770:	bf04      	itt	eq
 800d772:	091b      	lsreq	r3, r3, #4
 800d774:	3204      	addeq	r2, #4
 800d776:	0799      	lsls	r1, r3, #30
 800d778:	bf04      	itt	eq
 800d77a:	089b      	lsreq	r3, r3, #2
 800d77c:	3202      	addeq	r2, #2
 800d77e:	07d9      	lsls	r1, r3, #31
 800d780:	d403      	bmi.n	800d78a <__lo0bits+0x4e>
 800d782:	085b      	lsrs	r3, r3, #1
 800d784:	f102 0201 	add.w	r2, r2, #1
 800d788:	d003      	beq.n	800d792 <__lo0bits+0x56>
 800d78a:	6003      	str	r3, [r0, #0]
 800d78c:	e7e5      	b.n	800d75a <__lo0bits+0x1e>
 800d78e:	2200      	movs	r2, #0
 800d790:	e7e3      	b.n	800d75a <__lo0bits+0x1e>
 800d792:	2220      	movs	r2, #32
 800d794:	e7e1      	b.n	800d75a <__lo0bits+0x1e>
	...

0800d798 <__i2b>:
 800d798:	b510      	push	{r4, lr}
 800d79a:	460c      	mov	r4, r1
 800d79c:	2101      	movs	r1, #1
 800d79e:	f7ff ff05 	bl	800d5ac <_Balloc>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	b928      	cbnz	r0, 800d7b2 <__i2b+0x1a>
 800d7a6:	4b05      	ldr	r3, [pc, #20]	; (800d7bc <__i2b+0x24>)
 800d7a8:	4805      	ldr	r0, [pc, #20]	; (800d7c0 <__i2b+0x28>)
 800d7aa:	f240 1145 	movw	r1, #325	; 0x145
 800d7ae:	f000 fca9 	bl	800e104 <__assert_func>
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	6144      	str	r4, [r0, #20]
 800d7b6:	6103      	str	r3, [r0, #16]
 800d7b8:	bd10      	pop	{r4, pc}
 800d7ba:	bf00      	nop
 800d7bc:	0800f520 	.word	0x0800f520
 800d7c0:	0800f531 	.word	0x0800f531

0800d7c4 <__multiply>:
 800d7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c8:	4691      	mov	r9, r2
 800d7ca:	690a      	ldr	r2, [r1, #16]
 800d7cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	bfb8      	it	lt
 800d7d4:	460b      	movlt	r3, r1
 800d7d6:	460c      	mov	r4, r1
 800d7d8:	bfbc      	itt	lt
 800d7da:	464c      	movlt	r4, r9
 800d7dc:	4699      	movlt	r9, r3
 800d7de:	6927      	ldr	r7, [r4, #16]
 800d7e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d7e4:	68a3      	ldr	r3, [r4, #8]
 800d7e6:	6861      	ldr	r1, [r4, #4]
 800d7e8:	eb07 060a 	add.w	r6, r7, sl
 800d7ec:	42b3      	cmp	r3, r6
 800d7ee:	b085      	sub	sp, #20
 800d7f0:	bfb8      	it	lt
 800d7f2:	3101      	addlt	r1, #1
 800d7f4:	f7ff feda 	bl	800d5ac <_Balloc>
 800d7f8:	b930      	cbnz	r0, 800d808 <__multiply+0x44>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	4b44      	ldr	r3, [pc, #272]	; (800d910 <__multiply+0x14c>)
 800d7fe:	4845      	ldr	r0, [pc, #276]	; (800d914 <__multiply+0x150>)
 800d800:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d804:	f000 fc7e 	bl	800e104 <__assert_func>
 800d808:	f100 0514 	add.w	r5, r0, #20
 800d80c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d810:	462b      	mov	r3, r5
 800d812:	2200      	movs	r2, #0
 800d814:	4543      	cmp	r3, r8
 800d816:	d321      	bcc.n	800d85c <__multiply+0x98>
 800d818:	f104 0314 	add.w	r3, r4, #20
 800d81c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d820:	f109 0314 	add.w	r3, r9, #20
 800d824:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d828:	9202      	str	r2, [sp, #8]
 800d82a:	1b3a      	subs	r2, r7, r4
 800d82c:	3a15      	subs	r2, #21
 800d82e:	f022 0203 	bic.w	r2, r2, #3
 800d832:	3204      	adds	r2, #4
 800d834:	f104 0115 	add.w	r1, r4, #21
 800d838:	428f      	cmp	r7, r1
 800d83a:	bf38      	it	cc
 800d83c:	2204      	movcc	r2, #4
 800d83e:	9201      	str	r2, [sp, #4]
 800d840:	9a02      	ldr	r2, [sp, #8]
 800d842:	9303      	str	r3, [sp, #12]
 800d844:	429a      	cmp	r2, r3
 800d846:	d80c      	bhi.n	800d862 <__multiply+0x9e>
 800d848:	2e00      	cmp	r6, #0
 800d84a:	dd03      	ble.n	800d854 <__multiply+0x90>
 800d84c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d850:	2b00      	cmp	r3, #0
 800d852:	d05b      	beq.n	800d90c <__multiply+0x148>
 800d854:	6106      	str	r6, [r0, #16]
 800d856:	b005      	add	sp, #20
 800d858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d85c:	f843 2b04 	str.w	r2, [r3], #4
 800d860:	e7d8      	b.n	800d814 <__multiply+0x50>
 800d862:	f8b3 a000 	ldrh.w	sl, [r3]
 800d866:	f1ba 0f00 	cmp.w	sl, #0
 800d86a:	d024      	beq.n	800d8b6 <__multiply+0xf2>
 800d86c:	f104 0e14 	add.w	lr, r4, #20
 800d870:	46a9      	mov	r9, r5
 800d872:	f04f 0c00 	mov.w	ip, #0
 800d876:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d87a:	f8d9 1000 	ldr.w	r1, [r9]
 800d87e:	fa1f fb82 	uxth.w	fp, r2
 800d882:	b289      	uxth	r1, r1
 800d884:	fb0a 110b 	mla	r1, sl, fp, r1
 800d888:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d88c:	f8d9 2000 	ldr.w	r2, [r9]
 800d890:	4461      	add	r1, ip
 800d892:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d896:	fb0a c20b 	mla	r2, sl, fp, ip
 800d89a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d89e:	b289      	uxth	r1, r1
 800d8a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d8a4:	4577      	cmp	r7, lr
 800d8a6:	f849 1b04 	str.w	r1, [r9], #4
 800d8aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d8ae:	d8e2      	bhi.n	800d876 <__multiply+0xb2>
 800d8b0:	9a01      	ldr	r2, [sp, #4]
 800d8b2:	f845 c002 	str.w	ip, [r5, r2]
 800d8b6:	9a03      	ldr	r2, [sp, #12]
 800d8b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d8bc:	3304      	adds	r3, #4
 800d8be:	f1b9 0f00 	cmp.w	r9, #0
 800d8c2:	d021      	beq.n	800d908 <__multiply+0x144>
 800d8c4:	6829      	ldr	r1, [r5, #0]
 800d8c6:	f104 0c14 	add.w	ip, r4, #20
 800d8ca:	46ae      	mov	lr, r5
 800d8cc:	f04f 0a00 	mov.w	sl, #0
 800d8d0:	f8bc b000 	ldrh.w	fp, [ip]
 800d8d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d8d8:	fb09 220b 	mla	r2, r9, fp, r2
 800d8dc:	4452      	add	r2, sl
 800d8de:	b289      	uxth	r1, r1
 800d8e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d8e4:	f84e 1b04 	str.w	r1, [lr], #4
 800d8e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d8ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d8f0:	f8be 1000 	ldrh.w	r1, [lr]
 800d8f4:	fb09 110a 	mla	r1, r9, sl, r1
 800d8f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d8fc:	4567      	cmp	r7, ip
 800d8fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d902:	d8e5      	bhi.n	800d8d0 <__multiply+0x10c>
 800d904:	9a01      	ldr	r2, [sp, #4]
 800d906:	50a9      	str	r1, [r5, r2]
 800d908:	3504      	adds	r5, #4
 800d90a:	e799      	b.n	800d840 <__multiply+0x7c>
 800d90c:	3e01      	subs	r6, #1
 800d90e:	e79b      	b.n	800d848 <__multiply+0x84>
 800d910:	0800f520 	.word	0x0800f520
 800d914:	0800f531 	.word	0x0800f531

0800d918 <__pow5mult>:
 800d918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d91c:	4615      	mov	r5, r2
 800d91e:	f012 0203 	ands.w	r2, r2, #3
 800d922:	4606      	mov	r6, r0
 800d924:	460f      	mov	r7, r1
 800d926:	d007      	beq.n	800d938 <__pow5mult+0x20>
 800d928:	4c25      	ldr	r4, [pc, #148]	; (800d9c0 <__pow5mult+0xa8>)
 800d92a:	3a01      	subs	r2, #1
 800d92c:	2300      	movs	r3, #0
 800d92e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d932:	f7ff fe9d 	bl	800d670 <__multadd>
 800d936:	4607      	mov	r7, r0
 800d938:	10ad      	asrs	r5, r5, #2
 800d93a:	d03d      	beq.n	800d9b8 <__pow5mult+0xa0>
 800d93c:	69f4      	ldr	r4, [r6, #28]
 800d93e:	b97c      	cbnz	r4, 800d960 <__pow5mult+0x48>
 800d940:	2010      	movs	r0, #16
 800d942:	f7ff fd7f 	bl	800d444 <malloc>
 800d946:	4602      	mov	r2, r0
 800d948:	61f0      	str	r0, [r6, #28]
 800d94a:	b928      	cbnz	r0, 800d958 <__pow5mult+0x40>
 800d94c:	4b1d      	ldr	r3, [pc, #116]	; (800d9c4 <__pow5mult+0xac>)
 800d94e:	481e      	ldr	r0, [pc, #120]	; (800d9c8 <__pow5mult+0xb0>)
 800d950:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d954:	f000 fbd6 	bl	800e104 <__assert_func>
 800d958:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d95c:	6004      	str	r4, [r0, #0]
 800d95e:	60c4      	str	r4, [r0, #12]
 800d960:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d964:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d968:	b94c      	cbnz	r4, 800d97e <__pow5mult+0x66>
 800d96a:	f240 2171 	movw	r1, #625	; 0x271
 800d96e:	4630      	mov	r0, r6
 800d970:	f7ff ff12 	bl	800d798 <__i2b>
 800d974:	2300      	movs	r3, #0
 800d976:	f8c8 0008 	str.w	r0, [r8, #8]
 800d97a:	4604      	mov	r4, r0
 800d97c:	6003      	str	r3, [r0, #0]
 800d97e:	f04f 0900 	mov.w	r9, #0
 800d982:	07eb      	lsls	r3, r5, #31
 800d984:	d50a      	bpl.n	800d99c <__pow5mult+0x84>
 800d986:	4639      	mov	r1, r7
 800d988:	4622      	mov	r2, r4
 800d98a:	4630      	mov	r0, r6
 800d98c:	f7ff ff1a 	bl	800d7c4 <__multiply>
 800d990:	4639      	mov	r1, r7
 800d992:	4680      	mov	r8, r0
 800d994:	4630      	mov	r0, r6
 800d996:	f7ff fe49 	bl	800d62c <_Bfree>
 800d99a:	4647      	mov	r7, r8
 800d99c:	106d      	asrs	r5, r5, #1
 800d99e:	d00b      	beq.n	800d9b8 <__pow5mult+0xa0>
 800d9a0:	6820      	ldr	r0, [r4, #0]
 800d9a2:	b938      	cbnz	r0, 800d9b4 <__pow5mult+0x9c>
 800d9a4:	4622      	mov	r2, r4
 800d9a6:	4621      	mov	r1, r4
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	f7ff ff0b 	bl	800d7c4 <__multiply>
 800d9ae:	6020      	str	r0, [r4, #0]
 800d9b0:	f8c0 9000 	str.w	r9, [r0]
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	e7e4      	b.n	800d982 <__pow5mult+0x6a>
 800d9b8:	4638      	mov	r0, r7
 800d9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9be:	bf00      	nop
 800d9c0:	0800f680 	.word	0x0800f680
 800d9c4:	0800f4b1 	.word	0x0800f4b1
 800d9c8:	0800f531 	.word	0x0800f531

0800d9cc <__lshift>:
 800d9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9d0:	460c      	mov	r4, r1
 800d9d2:	6849      	ldr	r1, [r1, #4]
 800d9d4:	6923      	ldr	r3, [r4, #16]
 800d9d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d9da:	68a3      	ldr	r3, [r4, #8]
 800d9dc:	4607      	mov	r7, r0
 800d9de:	4691      	mov	r9, r2
 800d9e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d9e4:	f108 0601 	add.w	r6, r8, #1
 800d9e8:	42b3      	cmp	r3, r6
 800d9ea:	db0b      	blt.n	800da04 <__lshift+0x38>
 800d9ec:	4638      	mov	r0, r7
 800d9ee:	f7ff fddd 	bl	800d5ac <_Balloc>
 800d9f2:	4605      	mov	r5, r0
 800d9f4:	b948      	cbnz	r0, 800da0a <__lshift+0x3e>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	4b28      	ldr	r3, [pc, #160]	; (800da9c <__lshift+0xd0>)
 800d9fa:	4829      	ldr	r0, [pc, #164]	; (800daa0 <__lshift+0xd4>)
 800d9fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800da00:	f000 fb80 	bl	800e104 <__assert_func>
 800da04:	3101      	adds	r1, #1
 800da06:	005b      	lsls	r3, r3, #1
 800da08:	e7ee      	b.n	800d9e8 <__lshift+0x1c>
 800da0a:	2300      	movs	r3, #0
 800da0c:	f100 0114 	add.w	r1, r0, #20
 800da10:	f100 0210 	add.w	r2, r0, #16
 800da14:	4618      	mov	r0, r3
 800da16:	4553      	cmp	r3, sl
 800da18:	db33      	blt.n	800da82 <__lshift+0xb6>
 800da1a:	6920      	ldr	r0, [r4, #16]
 800da1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da20:	f104 0314 	add.w	r3, r4, #20
 800da24:	f019 091f 	ands.w	r9, r9, #31
 800da28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800da30:	d02b      	beq.n	800da8a <__lshift+0xbe>
 800da32:	f1c9 0e20 	rsb	lr, r9, #32
 800da36:	468a      	mov	sl, r1
 800da38:	2200      	movs	r2, #0
 800da3a:	6818      	ldr	r0, [r3, #0]
 800da3c:	fa00 f009 	lsl.w	r0, r0, r9
 800da40:	4310      	orrs	r0, r2
 800da42:	f84a 0b04 	str.w	r0, [sl], #4
 800da46:	f853 2b04 	ldr.w	r2, [r3], #4
 800da4a:	459c      	cmp	ip, r3
 800da4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800da50:	d8f3      	bhi.n	800da3a <__lshift+0x6e>
 800da52:	ebac 0304 	sub.w	r3, ip, r4
 800da56:	3b15      	subs	r3, #21
 800da58:	f023 0303 	bic.w	r3, r3, #3
 800da5c:	3304      	adds	r3, #4
 800da5e:	f104 0015 	add.w	r0, r4, #21
 800da62:	4584      	cmp	ip, r0
 800da64:	bf38      	it	cc
 800da66:	2304      	movcc	r3, #4
 800da68:	50ca      	str	r2, [r1, r3]
 800da6a:	b10a      	cbz	r2, 800da70 <__lshift+0xa4>
 800da6c:	f108 0602 	add.w	r6, r8, #2
 800da70:	3e01      	subs	r6, #1
 800da72:	4638      	mov	r0, r7
 800da74:	612e      	str	r6, [r5, #16]
 800da76:	4621      	mov	r1, r4
 800da78:	f7ff fdd8 	bl	800d62c <_Bfree>
 800da7c:	4628      	mov	r0, r5
 800da7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da82:	f842 0f04 	str.w	r0, [r2, #4]!
 800da86:	3301      	adds	r3, #1
 800da88:	e7c5      	b.n	800da16 <__lshift+0x4a>
 800da8a:	3904      	subs	r1, #4
 800da8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da90:	f841 2f04 	str.w	r2, [r1, #4]!
 800da94:	459c      	cmp	ip, r3
 800da96:	d8f9      	bhi.n	800da8c <__lshift+0xc0>
 800da98:	e7ea      	b.n	800da70 <__lshift+0xa4>
 800da9a:	bf00      	nop
 800da9c:	0800f520 	.word	0x0800f520
 800daa0:	0800f531 	.word	0x0800f531

0800daa4 <__mcmp>:
 800daa4:	b530      	push	{r4, r5, lr}
 800daa6:	6902      	ldr	r2, [r0, #16]
 800daa8:	690c      	ldr	r4, [r1, #16]
 800daaa:	1b12      	subs	r2, r2, r4
 800daac:	d10e      	bne.n	800dacc <__mcmp+0x28>
 800daae:	f100 0314 	add.w	r3, r0, #20
 800dab2:	3114      	adds	r1, #20
 800dab4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dab8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dabc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dac0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dac4:	42a5      	cmp	r5, r4
 800dac6:	d003      	beq.n	800dad0 <__mcmp+0x2c>
 800dac8:	d305      	bcc.n	800dad6 <__mcmp+0x32>
 800daca:	2201      	movs	r2, #1
 800dacc:	4610      	mov	r0, r2
 800dace:	bd30      	pop	{r4, r5, pc}
 800dad0:	4283      	cmp	r3, r0
 800dad2:	d3f3      	bcc.n	800dabc <__mcmp+0x18>
 800dad4:	e7fa      	b.n	800dacc <__mcmp+0x28>
 800dad6:	f04f 32ff 	mov.w	r2, #4294967295
 800dada:	e7f7      	b.n	800dacc <__mcmp+0x28>

0800dadc <__mdiff>:
 800dadc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae0:	460c      	mov	r4, r1
 800dae2:	4606      	mov	r6, r0
 800dae4:	4611      	mov	r1, r2
 800dae6:	4620      	mov	r0, r4
 800dae8:	4690      	mov	r8, r2
 800daea:	f7ff ffdb 	bl	800daa4 <__mcmp>
 800daee:	1e05      	subs	r5, r0, #0
 800daf0:	d110      	bne.n	800db14 <__mdiff+0x38>
 800daf2:	4629      	mov	r1, r5
 800daf4:	4630      	mov	r0, r6
 800daf6:	f7ff fd59 	bl	800d5ac <_Balloc>
 800dafa:	b930      	cbnz	r0, 800db0a <__mdiff+0x2e>
 800dafc:	4b3a      	ldr	r3, [pc, #232]	; (800dbe8 <__mdiff+0x10c>)
 800dafe:	4602      	mov	r2, r0
 800db00:	f240 2137 	movw	r1, #567	; 0x237
 800db04:	4839      	ldr	r0, [pc, #228]	; (800dbec <__mdiff+0x110>)
 800db06:	f000 fafd 	bl	800e104 <__assert_func>
 800db0a:	2301      	movs	r3, #1
 800db0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db14:	bfa4      	itt	ge
 800db16:	4643      	movge	r3, r8
 800db18:	46a0      	movge	r8, r4
 800db1a:	4630      	mov	r0, r6
 800db1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800db20:	bfa6      	itte	ge
 800db22:	461c      	movge	r4, r3
 800db24:	2500      	movge	r5, #0
 800db26:	2501      	movlt	r5, #1
 800db28:	f7ff fd40 	bl	800d5ac <_Balloc>
 800db2c:	b920      	cbnz	r0, 800db38 <__mdiff+0x5c>
 800db2e:	4b2e      	ldr	r3, [pc, #184]	; (800dbe8 <__mdiff+0x10c>)
 800db30:	4602      	mov	r2, r0
 800db32:	f240 2145 	movw	r1, #581	; 0x245
 800db36:	e7e5      	b.n	800db04 <__mdiff+0x28>
 800db38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800db3c:	6926      	ldr	r6, [r4, #16]
 800db3e:	60c5      	str	r5, [r0, #12]
 800db40:	f104 0914 	add.w	r9, r4, #20
 800db44:	f108 0514 	add.w	r5, r8, #20
 800db48:	f100 0e14 	add.w	lr, r0, #20
 800db4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800db50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800db54:	f108 0210 	add.w	r2, r8, #16
 800db58:	46f2      	mov	sl, lr
 800db5a:	2100      	movs	r1, #0
 800db5c:	f859 3b04 	ldr.w	r3, [r9], #4
 800db60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800db64:	fa11 f88b 	uxtah	r8, r1, fp
 800db68:	b299      	uxth	r1, r3
 800db6a:	0c1b      	lsrs	r3, r3, #16
 800db6c:	eba8 0801 	sub.w	r8, r8, r1
 800db70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800db74:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800db78:	fa1f f888 	uxth.w	r8, r8
 800db7c:	1419      	asrs	r1, r3, #16
 800db7e:	454e      	cmp	r6, r9
 800db80:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800db84:	f84a 3b04 	str.w	r3, [sl], #4
 800db88:	d8e8      	bhi.n	800db5c <__mdiff+0x80>
 800db8a:	1b33      	subs	r3, r6, r4
 800db8c:	3b15      	subs	r3, #21
 800db8e:	f023 0303 	bic.w	r3, r3, #3
 800db92:	3304      	adds	r3, #4
 800db94:	3415      	adds	r4, #21
 800db96:	42a6      	cmp	r6, r4
 800db98:	bf38      	it	cc
 800db9a:	2304      	movcc	r3, #4
 800db9c:	441d      	add	r5, r3
 800db9e:	4473      	add	r3, lr
 800dba0:	469e      	mov	lr, r3
 800dba2:	462e      	mov	r6, r5
 800dba4:	4566      	cmp	r6, ip
 800dba6:	d30e      	bcc.n	800dbc6 <__mdiff+0xea>
 800dba8:	f10c 0203 	add.w	r2, ip, #3
 800dbac:	1b52      	subs	r2, r2, r5
 800dbae:	f022 0203 	bic.w	r2, r2, #3
 800dbb2:	3d03      	subs	r5, #3
 800dbb4:	45ac      	cmp	ip, r5
 800dbb6:	bf38      	it	cc
 800dbb8:	2200      	movcc	r2, #0
 800dbba:	4413      	add	r3, r2
 800dbbc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dbc0:	b17a      	cbz	r2, 800dbe2 <__mdiff+0x106>
 800dbc2:	6107      	str	r7, [r0, #16]
 800dbc4:	e7a4      	b.n	800db10 <__mdiff+0x34>
 800dbc6:	f856 8b04 	ldr.w	r8, [r6], #4
 800dbca:	fa11 f288 	uxtah	r2, r1, r8
 800dbce:	1414      	asrs	r4, r2, #16
 800dbd0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dbd4:	b292      	uxth	r2, r2
 800dbd6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dbda:	f84e 2b04 	str.w	r2, [lr], #4
 800dbde:	1421      	asrs	r1, r4, #16
 800dbe0:	e7e0      	b.n	800dba4 <__mdiff+0xc8>
 800dbe2:	3f01      	subs	r7, #1
 800dbe4:	e7ea      	b.n	800dbbc <__mdiff+0xe0>
 800dbe6:	bf00      	nop
 800dbe8:	0800f520 	.word	0x0800f520
 800dbec:	0800f531 	.word	0x0800f531

0800dbf0 <__d2b>:
 800dbf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dbf4:	460f      	mov	r7, r1
 800dbf6:	2101      	movs	r1, #1
 800dbf8:	ec59 8b10 	vmov	r8, r9, d0
 800dbfc:	4616      	mov	r6, r2
 800dbfe:	f7ff fcd5 	bl	800d5ac <_Balloc>
 800dc02:	4604      	mov	r4, r0
 800dc04:	b930      	cbnz	r0, 800dc14 <__d2b+0x24>
 800dc06:	4602      	mov	r2, r0
 800dc08:	4b24      	ldr	r3, [pc, #144]	; (800dc9c <__d2b+0xac>)
 800dc0a:	4825      	ldr	r0, [pc, #148]	; (800dca0 <__d2b+0xb0>)
 800dc0c:	f240 310f 	movw	r1, #783	; 0x30f
 800dc10:	f000 fa78 	bl	800e104 <__assert_func>
 800dc14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc1c:	bb2d      	cbnz	r5, 800dc6a <__d2b+0x7a>
 800dc1e:	9301      	str	r3, [sp, #4]
 800dc20:	f1b8 0300 	subs.w	r3, r8, #0
 800dc24:	d026      	beq.n	800dc74 <__d2b+0x84>
 800dc26:	4668      	mov	r0, sp
 800dc28:	9300      	str	r3, [sp, #0]
 800dc2a:	f7ff fd87 	bl	800d73c <__lo0bits>
 800dc2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dc32:	b1e8      	cbz	r0, 800dc70 <__d2b+0x80>
 800dc34:	f1c0 0320 	rsb	r3, r0, #32
 800dc38:	fa02 f303 	lsl.w	r3, r2, r3
 800dc3c:	430b      	orrs	r3, r1
 800dc3e:	40c2      	lsrs	r2, r0
 800dc40:	6163      	str	r3, [r4, #20]
 800dc42:	9201      	str	r2, [sp, #4]
 800dc44:	9b01      	ldr	r3, [sp, #4]
 800dc46:	61a3      	str	r3, [r4, #24]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	bf14      	ite	ne
 800dc4c:	2202      	movne	r2, #2
 800dc4e:	2201      	moveq	r2, #1
 800dc50:	6122      	str	r2, [r4, #16]
 800dc52:	b1bd      	cbz	r5, 800dc84 <__d2b+0x94>
 800dc54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dc58:	4405      	add	r5, r0
 800dc5a:	603d      	str	r5, [r7, #0]
 800dc5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dc60:	6030      	str	r0, [r6, #0]
 800dc62:	4620      	mov	r0, r4
 800dc64:	b003      	add	sp, #12
 800dc66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc6e:	e7d6      	b.n	800dc1e <__d2b+0x2e>
 800dc70:	6161      	str	r1, [r4, #20]
 800dc72:	e7e7      	b.n	800dc44 <__d2b+0x54>
 800dc74:	a801      	add	r0, sp, #4
 800dc76:	f7ff fd61 	bl	800d73c <__lo0bits>
 800dc7a:	9b01      	ldr	r3, [sp, #4]
 800dc7c:	6163      	str	r3, [r4, #20]
 800dc7e:	3020      	adds	r0, #32
 800dc80:	2201      	movs	r2, #1
 800dc82:	e7e5      	b.n	800dc50 <__d2b+0x60>
 800dc84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dc88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dc8c:	6038      	str	r0, [r7, #0]
 800dc8e:	6918      	ldr	r0, [r3, #16]
 800dc90:	f7ff fd34 	bl	800d6fc <__hi0bits>
 800dc94:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dc98:	e7e2      	b.n	800dc60 <__d2b+0x70>
 800dc9a:	bf00      	nop
 800dc9c:	0800f520 	.word	0x0800f520
 800dca0:	0800f531 	.word	0x0800f531

0800dca4 <__ssputs_r>:
 800dca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dca8:	688e      	ldr	r6, [r1, #8]
 800dcaa:	461f      	mov	r7, r3
 800dcac:	42be      	cmp	r6, r7
 800dcae:	680b      	ldr	r3, [r1, #0]
 800dcb0:	4682      	mov	sl, r0
 800dcb2:	460c      	mov	r4, r1
 800dcb4:	4690      	mov	r8, r2
 800dcb6:	d82c      	bhi.n	800dd12 <__ssputs_r+0x6e>
 800dcb8:	898a      	ldrh	r2, [r1, #12]
 800dcba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dcbe:	d026      	beq.n	800dd0e <__ssputs_r+0x6a>
 800dcc0:	6965      	ldr	r5, [r4, #20]
 800dcc2:	6909      	ldr	r1, [r1, #16]
 800dcc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dcc8:	eba3 0901 	sub.w	r9, r3, r1
 800dccc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dcd0:	1c7b      	adds	r3, r7, #1
 800dcd2:	444b      	add	r3, r9
 800dcd4:	106d      	asrs	r5, r5, #1
 800dcd6:	429d      	cmp	r5, r3
 800dcd8:	bf38      	it	cc
 800dcda:	461d      	movcc	r5, r3
 800dcdc:	0553      	lsls	r3, r2, #21
 800dcde:	d527      	bpl.n	800dd30 <__ssputs_r+0x8c>
 800dce0:	4629      	mov	r1, r5
 800dce2:	f7ff fbd7 	bl	800d494 <_malloc_r>
 800dce6:	4606      	mov	r6, r0
 800dce8:	b360      	cbz	r0, 800dd44 <__ssputs_r+0xa0>
 800dcea:	6921      	ldr	r1, [r4, #16]
 800dcec:	464a      	mov	r2, r9
 800dcee:	f7fe fcd3 	bl	800c698 <memcpy>
 800dcf2:	89a3      	ldrh	r3, [r4, #12]
 800dcf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dcf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcfc:	81a3      	strh	r3, [r4, #12]
 800dcfe:	6126      	str	r6, [r4, #16]
 800dd00:	6165      	str	r5, [r4, #20]
 800dd02:	444e      	add	r6, r9
 800dd04:	eba5 0509 	sub.w	r5, r5, r9
 800dd08:	6026      	str	r6, [r4, #0]
 800dd0a:	60a5      	str	r5, [r4, #8]
 800dd0c:	463e      	mov	r6, r7
 800dd0e:	42be      	cmp	r6, r7
 800dd10:	d900      	bls.n	800dd14 <__ssputs_r+0x70>
 800dd12:	463e      	mov	r6, r7
 800dd14:	6820      	ldr	r0, [r4, #0]
 800dd16:	4632      	mov	r2, r6
 800dd18:	4641      	mov	r1, r8
 800dd1a:	f000 f9c9 	bl	800e0b0 <memmove>
 800dd1e:	68a3      	ldr	r3, [r4, #8]
 800dd20:	1b9b      	subs	r3, r3, r6
 800dd22:	60a3      	str	r3, [r4, #8]
 800dd24:	6823      	ldr	r3, [r4, #0]
 800dd26:	4433      	add	r3, r6
 800dd28:	6023      	str	r3, [r4, #0]
 800dd2a:	2000      	movs	r0, #0
 800dd2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd30:	462a      	mov	r2, r5
 800dd32:	f000 fa2d 	bl	800e190 <_realloc_r>
 800dd36:	4606      	mov	r6, r0
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	d1e0      	bne.n	800dcfe <__ssputs_r+0x5a>
 800dd3c:	6921      	ldr	r1, [r4, #16]
 800dd3e:	4650      	mov	r0, sl
 800dd40:	f7ff fb34 	bl	800d3ac <_free_r>
 800dd44:	230c      	movs	r3, #12
 800dd46:	f8ca 3000 	str.w	r3, [sl]
 800dd4a:	89a3      	ldrh	r3, [r4, #12]
 800dd4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd50:	81a3      	strh	r3, [r4, #12]
 800dd52:	f04f 30ff 	mov.w	r0, #4294967295
 800dd56:	e7e9      	b.n	800dd2c <__ssputs_r+0x88>

0800dd58 <_svfiprintf_r>:
 800dd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd5c:	4698      	mov	r8, r3
 800dd5e:	898b      	ldrh	r3, [r1, #12]
 800dd60:	061b      	lsls	r3, r3, #24
 800dd62:	b09d      	sub	sp, #116	; 0x74
 800dd64:	4607      	mov	r7, r0
 800dd66:	460d      	mov	r5, r1
 800dd68:	4614      	mov	r4, r2
 800dd6a:	d50e      	bpl.n	800dd8a <_svfiprintf_r+0x32>
 800dd6c:	690b      	ldr	r3, [r1, #16]
 800dd6e:	b963      	cbnz	r3, 800dd8a <_svfiprintf_r+0x32>
 800dd70:	2140      	movs	r1, #64	; 0x40
 800dd72:	f7ff fb8f 	bl	800d494 <_malloc_r>
 800dd76:	6028      	str	r0, [r5, #0]
 800dd78:	6128      	str	r0, [r5, #16]
 800dd7a:	b920      	cbnz	r0, 800dd86 <_svfiprintf_r+0x2e>
 800dd7c:	230c      	movs	r3, #12
 800dd7e:	603b      	str	r3, [r7, #0]
 800dd80:	f04f 30ff 	mov.w	r0, #4294967295
 800dd84:	e0d0      	b.n	800df28 <_svfiprintf_r+0x1d0>
 800dd86:	2340      	movs	r3, #64	; 0x40
 800dd88:	616b      	str	r3, [r5, #20]
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	9309      	str	r3, [sp, #36]	; 0x24
 800dd8e:	2320      	movs	r3, #32
 800dd90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd94:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd98:	2330      	movs	r3, #48	; 0x30
 800dd9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800df40 <_svfiprintf_r+0x1e8>
 800dd9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dda2:	f04f 0901 	mov.w	r9, #1
 800dda6:	4623      	mov	r3, r4
 800dda8:	469a      	mov	sl, r3
 800ddaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddae:	b10a      	cbz	r2, 800ddb4 <_svfiprintf_r+0x5c>
 800ddb0:	2a25      	cmp	r2, #37	; 0x25
 800ddb2:	d1f9      	bne.n	800dda8 <_svfiprintf_r+0x50>
 800ddb4:	ebba 0b04 	subs.w	fp, sl, r4
 800ddb8:	d00b      	beq.n	800ddd2 <_svfiprintf_r+0x7a>
 800ddba:	465b      	mov	r3, fp
 800ddbc:	4622      	mov	r2, r4
 800ddbe:	4629      	mov	r1, r5
 800ddc0:	4638      	mov	r0, r7
 800ddc2:	f7ff ff6f 	bl	800dca4 <__ssputs_r>
 800ddc6:	3001      	adds	r0, #1
 800ddc8:	f000 80a9 	beq.w	800df1e <_svfiprintf_r+0x1c6>
 800ddcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddce:	445a      	add	r2, fp
 800ddd0:	9209      	str	r2, [sp, #36]	; 0x24
 800ddd2:	f89a 3000 	ldrb.w	r3, [sl]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f000 80a1 	beq.w	800df1e <_svfiprintf_r+0x1c6>
 800dddc:	2300      	movs	r3, #0
 800ddde:	f04f 32ff 	mov.w	r2, #4294967295
 800dde2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dde6:	f10a 0a01 	add.w	sl, sl, #1
 800ddea:	9304      	str	r3, [sp, #16]
 800ddec:	9307      	str	r3, [sp, #28]
 800ddee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddf2:	931a      	str	r3, [sp, #104]	; 0x68
 800ddf4:	4654      	mov	r4, sl
 800ddf6:	2205      	movs	r2, #5
 800ddf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddfc:	4850      	ldr	r0, [pc, #320]	; (800df40 <_svfiprintf_r+0x1e8>)
 800ddfe:	f7f2 f9e7 	bl	80001d0 <memchr>
 800de02:	9a04      	ldr	r2, [sp, #16]
 800de04:	b9d8      	cbnz	r0, 800de3e <_svfiprintf_r+0xe6>
 800de06:	06d0      	lsls	r0, r2, #27
 800de08:	bf44      	itt	mi
 800de0a:	2320      	movmi	r3, #32
 800de0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de10:	0711      	lsls	r1, r2, #28
 800de12:	bf44      	itt	mi
 800de14:	232b      	movmi	r3, #43	; 0x2b
 800de16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de1a:	f89a 3000 	ldrb.w	r3, [sl]
 800de1e:	2b2a      	cmp	r3, #42	; 0x2a
 800de20:	d015      	beq.n	800de4e <_svfiprintf_r+0xf6>
 800de22:	9a07      	ldr	r2, [sp, #28]
 800de24:	4654      	mov	r4, sl
 800de26:	2000      	movs	r0, #0
 800de28:	f04f 0c0a 	mov.w	ip, #10
 800de2c:	4621      	mov	r1, r4
 800de2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de32:	3b30      	subs	r3, #48	; 0x30
 800de34:	2b09      	cmp	r3, #9
 800de36:	d94d      	bls.n	800ded4 <_svfiprintf_r+0x17c>
 800de38:	b1b0      	cbz	r0, 800de68 <_svfiprintf_r+0x110>
 800de3a:	9207      	str	r2, [sp, #28]
 800de3c:	e014      	b.n	800de68 <_svfiprintf_r+0x110>
 800de3e:	eba0 0308 	sub.w	r3, r0, r8
 800de42:	fa09 f303 	lsl.w	r3, r9, r3
 800de46:	4313      	orrs	r3, r2
 800de48:	9304      	str	r3, [sp, #16]
 800de4a:	46a2      	mov	sl, r4
 800de4c:	e7d2      	b.n	800ddf4 <_svfiprintf_r+0x9c>
 800de4e:	9b03      	ldr	r3, [sp, #12]
 800de50:	1d19      	adds	r1, r3, #4
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	9103      	str	r1, [sp, #12]
 800de56:	2b00      	cmp	r3, #0
 800de58:	bfbb      	ittet	lt
 800de5a:	425b      	neglt	r3, r3
 800de5c:	f042 0202 	orrlt.w	r2, r2, #2
 800de60:	9307      	strge	r3, [sp, #28]
 800de62:	9307      	strlt	r3, [sp, #28]
 800de64:	bfb8      	it	lt
 800de66:	9204      	strlt	r2, [sp, #16]
 800de68:	7823      	ldrb	r3, [r4, #0]
 800de6a:	2b2e      	cmp	r3, #46	; 0x2e
 800de6c:	d10c      	bne.n	800de88 <_svfiprintf_r+0x130>
 800de6e:	7863      	ldrb	r3, [r4, #1]
 800de70:	2b2a      	cmp	r3, #42	; 0x2a
 800de72:	d134      	bne.n	800dede <_svfiprintf_r+0x186>
 800de74:	9b03      	ldr	r3, [sp, #12]
 800de76:	1d1a      	adds	r2, r3, #4
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	9203      	str	r2, [sp, #12]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	bfb8      	it	lt
 800de80:	f04f 33ff 	movlt.w	r3, #4294967295
 800de84:	3402      	adds	r4, #2
 800de86:	9305      	str	r3, [sp, #20]
 800de88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800df50 <_svfiprintf_r+0x1f8>
 800de8c:	7821      	ldrb	r1, [r4, #0]
 800de8e:	2203      	movs	r2, #3
 800de90:	4650      	mov	r0, sl
 800de92:	f7f2 f99d 	bl	80001d0 <memchr>
 800de96:	b138      	cbz	r0, 800dea8 <_svfiprintf_r+0x150>
 800de98:	9b04      	ldr	r3, [sp, #16]
 800de9a:	eba0 000a 	sub.w	r0, r0, sl
 800de9e:	2240      	movs	r2, #64	; 0x40
 800dea0:	4082      	lsls	r2, r0
 800dea2:	4313      	orrs	r3, r2
 800dea4:	3401      	adds	r4, #1
 800dea6:	9304      	str	r3, [sp, #16]
 800dea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deac:	4825      	ldr	r0, [pc, #148]	; (800df44 <_svfiprintf_r+0x1ec>)
 800deae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800deb2:	2206      	movs	r2, #6
 800deb4:	f7f2 f98c 	bl	80001d0 <memchr>
 800deb8:	2800      	cmp	r0, #0
 800deba:	d038      	beq.n	800df2e <_svfiprintf_r+0x1d6>
 800debc:	4b22      	ldr	r3, [pc, #136]	; (800df48 <_svfiprintf_r+0x1f0>)
 800debe:	bb1b      	cbnz	r3, 800df08 <_svfiprintf_r+0x1b0>
 800dec0:	9b03      	ldr	r3, [sp, #12]
 800dec2:	3307      	adds	r3, #7
 800dec4:	f023 0307 	bic.w	r3, r3, #7
 800dec8:	3308      	adds	r3, #8
 800deca:	9303      	str	r3, [sp, #12]
 800decc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dece:	4433      	add	r3, r6
 800ded0:	9309      	str	r3, [sp, #36]	; 0x24
 800ded2:	e768      	b.n	800dda6 <_svfiprintf_r+0x4e>
 800ded4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ded8:	460c      	mov	r4, r1
 800deda:	2001      	movs	r0, #1
 800dedc:	e7a6      	b.n	800de2c <_svfiprintf_r+0xd4>
 800dede:	2300      	movs	r3, #0
 800dee0:	3401      	adds	r4, #1
 800dee2:	9305      	str	r3, [sp, #20]
 800dee4:	4619      	mov	r1, r3
 800dee6:	f04f 0c0a 	mov.w	ip, #10
 800deea:	4620      	mov	r0, r4
 800deec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800def0:	3a30      	subs	r2, #48	; 0x30
 800def2:	2a09      	cmp	r2, #9
 800def4:	d903      	bls.n	800defe <_svfiprintf_r+0x1a6>
 800def6:	2b00      	cmp	r3, #0
 800def8:	d0c6      	beq.n	800de88 <_svfiprintf_r+0x130>
 800defa:	9105      	str	r1, [sp, #20]
 800defc:	e7c4      	b.n	800de88 <_svfiprintf_r+0x130>
 800defe:	fb0c 2101 	mla	r1, ip, r1, r2
 800df02:	4604      	mov	r4, r0
 800df04:	2301      	movs	r3, #1
 800df06:	e7f0      	b.n	800deea <_svfiprintf_r+0x192>
 800df08:	ab03      	add	r3, sp, #12
 800df0a:	9300      	str	r3, [sp, #0]
 800df0c:	462a      	mov	r2, r5
 800df0e:	4b0f      	ldr	r3, [pc, #60]	; (800df4c <_svfiprintf_r+0x1f4>)
 800df10:	a904      	add	r1, sp, #16
 800df12:	4638      	mov	r0, r7
 800df14:	f7fd fe12 	bl	800bb3c <_printf_float>
 800df18:	1c42      	adds	r2, r0, #1
 800df1a:	4606      	mov	r6, r0
 800df1c:	d1d6      	bne.n	800decc <_svfiprintf_r+0x174>
 800df1e:	89ab      	ldrh	r3, [r5, #12]
 800df20:	065b      	lsls	r3, r3, #25
 800df22:	f53f af2d 	bmi.w	800dd80 <_svfiprintf_r+0x28>
 800df26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df28:	b01d      	add	sp, #116	; 0x74
 800df2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df2e:	ab03      	add	r3, sp, #12
 800df30:	9300      	str	r3, [sp, #0]
 800df32:	462a      	mov	r2, r5
 800df34:	4b05      	ldr	r3, [pc, #20]	; (800df4c <_svfiprintf_r+0x1f4>)
 800df36:	a904      	add	r1, sp, #16
 800df38:	4638      	mov	r0, r7
 800df3a:	f7fe f8a3 	bl	800c084 <_printf_i>
 800df3e:	e7eb      	b.n	800df18 <_svfiprintf_r+0x1c0>
 800df40:	0800f68c 	.word	0x0800f68c
 800df44:	0800f696 	.word	0x0800f696
 800df48:	0800bb3d 	.word	0x0800bb3d
 800df4c:	0800dca5 	.word	0x0800dca5
 800df50:	0800f692 	.word	0x0800f692

0800df54 <__sflush_r>:
 800df54:	898a      	ldrh	r2, [r1, #12]
 800df56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df5a:	4605      	mov	r5, r0
 800df5c:	0710      	lsls	r0, r2, #28
 800df5e:	460c      	mov	r4, r1
 800df60:	d458      	bmi.n	800e014 <__sflush_r+0xc0>
 800df62:	684b      	ldr	r3, [r1, #4]
 800df64:	2b00      	cmp	r3, #0
 800df66:	dc05      	bgt.n	800df74 <__sflush_r+0x20>
 800df68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	dc02      	bgt.n	800df74 <__sflush_r+0x20>
 800df6e:	2000      	movs	r0, #0
 800df70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df76:	2e00      	cmp	r6, #0
 800df78:	d0f9      	beq.n	800df6e <__sflush_r+0x1a>
 800df7a:	2300      	movs	r3, #0
 800df7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df80:	682f      	ldr	r7, [r5, #0]
 800df82:	6a21      	ldr	r1, [r4, #32]
 800df84:	602b      	str	r3, [r5, #0]
 800df86:	d032      	beq.n	800dfee <__sflush_r+0x9a>
 800df88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df8a:	89a3      	ldrh	r3, [r4, #12]
 800df8c:	075a      	lsls	r2, r3, #29
 800df8e:	d505      	bpl.n	800df9c <__sflush_r+0x48>
 800df90:	6863      	ldr	r3, [r4, #4]
 800df92:	1ac0      	subs	r0, r0, r3
 800df94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df96:	b10b      	cbz	r3, 800df9c <__sflush_r+0x48>
 800df98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df9a:	1ac0      	subs	r0, r0, r3
 800df9c:	2300      	movs	r3, #0
 800df9e:	4602      	mov	r2, r0
 800dfa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfa2:	6a21      	ldr	r1, [r4, #32]
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	47b0      	blx	r6
 800dfa8:	1c43      	adds	r3, r0, #1
 800dfaa:	89a3      	ldrh	r3, [r4, #12]
 800dfac:	d106      	bne.n	800dfbc <__sflush_r+0x68>
 800dfae:	6829      	ldr	r1, [r5, #0]
 800dfb0:	291d      	cmp	r1, #29
 800dfb2:	d82b      	bhi.n	800e00c <__sflush_r+0xb8>
 800dfb4:	4a29      	ldr	r2, [pc, #164]	; (800e05c <__sflush_r+0x108>)
 800dfb6:	410a      	asrs	r2, r1
 800dfb8:	07d6      	lsls	r6, r2, #31
 800dfba:	d427      	bmi.n	800e00c <__sflush_r+0xb8>
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	6062      	str	r2, [r4, #4]
 800dfc0:	04d9      	lsls	r1, r3, #19
 800dfc2:	6922      	ldr	r2, [r4, #16]
 800dfc4:	6022      	str	r2, [r4, #0]
 800dfc6:	d504      	bpl.n	800dfd2 <__sflush_r+0x7e>
 800dfc8:	1c42      	adds	r2, r0, #1
 800dfca:	d101      	bne.n	800dfd0 <__sflush_r+0x7c>
 800dfcc:	682b      	ldr	r3, [r5, #0]
 800dfce:	b903      	cbnz	r3, 800dfd2 <__sflush_r+0x7e>
 800dfd0:	6560      	str	r0, [r4, #84]	; 0x54
 800dfd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfd4:	602f      	str	r7, [r5, #0]
 800dfd6:	2900      	cmp	r1, #0
 800dfd8:	d0c9      	beq.n	800df6e <__sflush_r+0x1a>
 800dfda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfde:	4299      	cmp	r1, r3
 800dfe0:	d002      	beq.n	800dfe8 <__sflush_r+0x94>
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	f7ff f9e2 	bl	800d3ac <_free_r>
 800dfe8:	2000      	movs	r0, #0
 800dfea:	6360      	str	r0, [r4, #52]	; 0x34
 800dfec:	e7c0      	b.n	800df70 <__sflush_r+0x1c>
 800dfee:	2301      	movs	r3, #1
 800dff0:	4628      	mov	r0, r5
 800dff2:	47b0      	blx	r6
 800dff4:	1c41      	adds	r1, r0, #1
 800dff6:	d1c8      	bne.n	800df8a <__sflush_r+0x36>
 800dff8:	682b      	ldr	r3, [r5, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d0c5      	beq.n	800df8a <__sflush_r+0x36>
 800dffe:	2b1d      	cmp	r3, #29
 800e000:	d001      	beq.n	800e006 <__sflush_r+0xb2>
 800e002:	2b16      	cmp	r3, #22
 800e004:	d101      	bne.n	800e00a <__sflush_r+0xb6>
 800e006:	602f      	str	r7, [r5, #0]
 800e008:	e7b1      	b.n	800df6e <__sflush_r+0x1a>
 800e00a:	89a3      	ldrh	r3, [r4, #12]
 800e00c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e010:	81a3      	strh	r3, [r4, #12]
 800e012:	e7ad      	b.n	800df70 <__sflush_r+0x1c>
 800e014:	690f      	ldr	r7, [r1, #16]
 800e016:	2f00      	cmp	r7, #0
 800e018:	d0a9      	beq.n	800df6e <__sflush_r+0x1a>
 800e01a:	0793      	lsls	r3, r2, #30
 800e01c:	680e      	ldr	r6, [r1, #0]
 800e01e:	bf08      	it	eq
 800e020:	694b      	ldreq	r3, [r1, #20]
 800e022:	600f      	str	r7, [r1, #0]
 800e024:	bf18      	it	ne
 800e026:	2300      	movne	r3, #0
 800e028:	eba6 0807 	sub.w	r8, r6, r7
 800e02c:	608b      	str	r3, [r1, #8]
 800e02e:	f1b8 0f00 	cmp.w	r8, #0
 800e032:	dd9c      	ble.n	800df6e <__sflush_r+0x1a>
 800e034:	6a21      	ldr	r1, [r4, #32]
 800e036:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e038:	4643      	mov	r3, r8
 800e03a:	463a      	mov	r2, r7
 800e03c:	4628      	mov	r0, r5
 800e03e:	47b0      	blx	r6
 800e040:	2800      	cmp	r0, #0
 800e042:	dc06      	bgt.n	800e052 <__sflush_r+0xfe>
 800e044:	89a3      	ldrh	r3, [r4, #12]
 800e046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e04a:	81a3      	strh	r3, [r4, #12]
 800e04c:	f04f 30ff 	mov.w	r0, #4294967295
 800e050:	e78e      	b.n	800df70 <__sflush_r+0x1c>
 800e052:	4407      	add	r7, r0
 800e054:	eba8 0800 	sub.w	r8, r8, r0
 800e058:	e7e9      	b.n	800e02e <__sflush_r+0xda>
 800e05a:	bf00      	nop
 800e05c:	dfbffffe 	.word	0xdfbffffe

0800e060 <_fflush_r>:
 800e060:	b538      	push	{r3, r4, r5, lr}
 800e062:	690b      	ldr	r3, [r1, #16]
 800e064:	4605      	mov	r5, r0
 800e066:	460c      	mov	r4, r1
 800e068:	b913      	cbnz	r3, 800e070 <_fflush_r+0x10>
 800e06a:	2500      	movs	r5, #0
 800e06c:	4628      	mov	r0, r5
 800e06e:	bd38      	pop	{r3, r4, r5, pc}
 800e070:	b118      	cbz	r0, 800e07a <_fflush_r+0x1a>
 800e072:	6a03      	ldr	r3, [r0, #32]
 800e074:	b90b      	cbnz	r3, 800e07a <_fflush_r+0x1a>
 800e076:	f7fe f9a1 	bl	800c3bc <__sinit>
 800e07a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d0f3      	beq.n	800e06a <_fflush_r+0xa>
 800e082:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e084:	07d0      	lsls	r0, r2, #31
 800e086:	d404      	bmi.n	800e092 <_fflush_r+0x32>
 800e088:	0599      	lsls	r1, r3, #22
 800e08a:	d402      	bmi.n	800e092 <_fflush_r+0x32>
 800e08c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e08e:	f7fe fb01 	bl	800c694 <__retarget_lock_acquire_recursive>
 800e092:	4628      	mov	r0, r5
 800e094:	4621      	mov	r1, r4
 800e096:	f7ff ff5d 	bl	800df54 <__sflush_r>
 800e09a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e09c:	07da      	lsls	r2, r3, #31
 800e09e:	4605      	mov	r5, r0
 800e0a0:	d4e4      	bmi.n	800e06c <_fflush_r+0xc>
 800e0a2:	89a3      	ldrh	r3, [r4, #12]
 800e0a4:	059b      	lsls	r3, r3, #22
 800e0a6:	d4e1      	bmi.n	800e06c <_fflush_r+0xc>
 800e0a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0aa:	f7fe faf4 	bl	800c696 <__retarget_lock_release_recursive>
 800e0ae:	e7dd      	b.n	800e06c <_fflush_r+0xc>

0800e0b0 <memmove>:
 800e0b0:	4288      	cmp	r0, r1
 800e0b2:	b510      	push	{r4, lr}
 800e0b4:	eb01 0402 	add.w	r4, r1, r2
 800e0b8:	d902      	bls.n	800e0c0 <memmove+0x10>
 800e0ba:	4284      	cmp	r4, r0
 800e0bc:	4623      	mov	r3, r4
 800e0be:	d807      	bhi.n	800e0d0 <memmove+0x20>
 800e0c0:	1e43      	subs	r3, r0, #1
 800e0c2:	42a1      	cmp	r1, r4
 800e0c4:	d008      	beq.n	800e0d8 <memmove+0x28>
 800e0c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0ce:	e7f8      	b.n	800e0c2 <memmove+0x12>
 800e0d0:	4402      	add	r2, r0
 800e0d2:	4601      	mov	r1, r0
 800e0d4:	428a      	cmp	r2, r1
 800e0d6:	d100      	bne.n	800e0da <memmove+0x2a>
 800e0d8:	bd10      	pop	{r4, pc}
 800e0da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0e2:	e7f7      	b.n	800e0d4 <memmove+0x24>

0800e0e4 <_sbrk_r>:
 800e0e4:	b538      	push	{r3, r4, r5, lr}
 800e0e6:	4d06      	ldr	r5, [pc, #24]	; (800e100 <_sbrk_r+0x1c>)
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	4604      	mov	r4, r0
 800e0ec:	4608      	mov	r0, r1
 800e0ee:	602b      	str	r3, [r5, #0]
 800e0f0:	f7f5 fec6 	bl	8003e80 <_sbrk>
 800e0f4:	1c43      	adds	r3, r0, #1
 800e0f6:	d102      	bne.n	800e0fe <_sbrk_r+0x1a>
 800e0f8:	682b      	ldr	r3, [r5, #0]
 800e0fa:	b103      	cbz	r3, 800e0fe <_sbrk_r+0x1a>
 800e0fc:	6023      	str	r3, [r4, #0]
 800e0fe:	bd38      	pop	{r3, r4, r5, pc}
 800e100:	200054e4 	.word	0x200054e4

0800e104 <__assert_func>:
 800e104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e106:	4614      	mov	r4, r2
 800e108:	461a      	mov	r2, r3
 800e10a:	4b09      	ldr	r3, [pc, #36]	; (800e130 <__assert_func+0x2c>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	4605      	mov	r5, r0
 800e110:	68d8      	ldr	r0, [r3, #12]
 800e112:	b14c      	cbz	r4, 800e128 <__assert_func+0x24>
 800e114:	4b07      	ldr	r3, [pc, #28]	; (800e134 <__assert_func+0x30>)
 800e116:	9100      	str	r1, [sp, #0]
 800e118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e11c:	4906      	ldr	r1, [pc, #24]	; (800e138 <__assert_func+0x34>)
 800e11e:	462b      	mov	r3, r5
 800e120:	f000 f872 	bl	800e208 <fiprintf>
 800e124:	f000 f882 	bl	800e22c <abort>
 800e128:	4b04      	ldr	r3, [pc, #16]	; (800e13c <__assert_func+0x38>)
 800e12a:	461c      	mov	r4, r3
 800e12c:	e7f3      	b.n	800e116 <__assert_func+0x12>
 800e12e:	bf00      	nop
 800e130:	2000007c 	.word	0x2000007c
 800e134:	0800f6a7 	.word	0x0800f6a7
 800e138:	0800f6b4 	.word	0x0800f6b4
 800e13c:	0800f6e2 	.word	0x0800f6e2

0800e140 <_calloc_r>:
 800e140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e142:	fba1 2402 	umull	r2, r4, r1, r2
 800e146:	b94c      	cbnz	r4, 800e15c <_calloc_r+0x1c>
 800e148:	4611      	mov	r1, r2
 800e14a:	9201      	str	r2, [sp, #4]
 800e14c:	f7ff f9a2 	bl	800d494 <_malloc_r>
 800e150:	9a01      	ldr	r2, [sp, #4]
 800e152:	4605      	mov	r5, r0
 800e154:	b930      	cbnz	r0, 800e164 <_calloc_r+0x24>
 800e156:	4628      	mov	r0, r5
 800e158:	b003      	add	sp, #12
 800e15a:	bd30      	pop	{r4, r5, pc}
 800e15c:	220c      	movs	r2, #12
 800e15e:	6002      	str	r2, [r0, #0]
 800e160:	2500      	movs	r5, #0
 800e162:	e7f8      	b.n	800e156 <_calloc_r+0x16>
 800e164:	4621      	mov	r1, r4
 800e166:	f7fe f9c2 	bl	800c4ee <memset>
 800e16a:	e7f4      	b.n	800e156 <_calloc_r+0x16>

0800e16c <__ascii_mbtowc>:
 800e16c:	b082      	sub	sp, #8
 800e16e:	b901      	cbnz	r1, 800e172 <__ascii_mbtowc+0x6>
 800e170:	a901      	add	r1, sp, #4
 800e172:	b142      	cbz	r2, 800e186 <__ascii_mbtowc+0x1a>
 800e174:	b14b      	cbz	r3, 800e18a <__ascii_mbtowc+0x1e>
 800e176:	7813      	ldrb	r3, [r2, #0]
 800e178:	600b      	str	r3, [r1, #0]
 800e17a:	7812      	ldrb	r2, [r2, #0]
 800e17c:	1e10      	subs	r0, r2, #0
 800e17e:	bf18      	it	ne
 800e180:	2001      	movne	r0, #1
 800e182:	b002      	add	sp, #8
 800e184:	4770      	bx	lr
 800e186:	4610      	mov	r0, r2
 800e188:	e7fb      	b.n	800e182 <__ascii_mbtowc+0x16>
 800e18a:	f06f 0001 	mvn.w	r0, #1
 800e18e:	e7f8      	b.n	800e182 <__ascii_mbtowc+0x16>

0800e190 <_realloc_r>:
 800e190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e194:	4680      	mov	r8, r0
 800e196:	4614      	mov	r4, r2
 800e198:	460e      	mov	r6, r1
 800e19a:	b921      	cbnz	r1, 800e1a6 <_realloc_r+0x16>
 800e19c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1a0:	4611      	mov	r1, r2
 800e1a2:	f7ff b977 	b.w	800d494 <_malloc_r>
 800e1a6:	b92a      	cbnz	r2, 800e1b4 <_realloc_r+0x24>
 800e1a8:	f7ff f900 	bl	800d3ac <_free_r>
 800e1ac:	4625      	mov	r5, r4
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1b4:	f000 f841 	bl	800e23a <_malloc_usable_size_r>
 800e1b8:	4284      	cmp	r4, r0
 800e1ba:	4607      	mov	r7, r0
 800e1bc:	d802      	bhi.n	800e1c4 <_realloc_r+0x34>
 800e1be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e1c2:	d812      	bhi.n	800e1ea <_realloc_r+0x5a>
 800e1c4:	4621      	mov	r1, r4
 800e1c6:	4640      	mov	r0, r8
 800e1c8:	f7ff f964 	bl	800d494 <_malloc_r>
 800e1cc:	4605      	mov	r5, r0
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	d0ed      	beq.n	800e1ae <_realloc_r+0x1e>
 800e1d2:	42bc      	cmp	r4, r7
 800e1d4:	4622      	mov	r2, r4
 800e1d6:	4631      	mov	r1, r6
 800e1d8:	bf28      	it	cs
 800e1da:	463a      	movcs	r2, r7
 800e1dc:	f7fe fa5c 	bl	800c698 <memcpy>
 800e1e0:	4631      	mov	r1, r6
 800e1e2:	4640      	mov	r0, r8
 800e1e4:	f7ff f8e2 	bl	800d3ac <_free_r>
 800e1e8:	e7e1      	b.n	800e1ae <_realloc_r+0x1e>
 800e1ea:	4635      	mov	r5, r6
 800e1ec:	e7df      	b.n	800e1ae <_realloc_r+0x1e>

0800e1ee <__ascii_wctomb>:
 800e1ee:	b149      	cbz	r1, 800e204 <__ascii_wctomb+0x16>
 800e1f0:	2aff      	cmp	r2, #255	; 0xff
 800e1f2:	bf85      	ittet	hi
 800e1f4:	238a      	movhi	r3, #138	; 0x8a
 800e1f6:	6003      	strhi	r3, [r0, #0]
 800e1f8:	700a      	strbls	r2, [r1, #0]
 800e1fa:	f04f 30ff 	movhi.w	r0, #4294967295
 800e1fe:	bf98      	it	ls
 800e200:	2001      	movls	r0, #1
 800e202:	4770      	bx	lr
 800e204:	4608      	mov	r0, r1
 800e206:	4770      	bx	lr

0800e208 <fiprintf>:
 800e208:	b40e      	push	{r1, r2, r3}
 800e20a:	b503      	push	{r0, r1, lr}
 800e20c:	4601      	mov	r1, r0
 800e20e:	ab03      	add	r3, sp, #12
 800e210:	4805      	ldr	r0, [pc, #20]	; (800e228 <fiprintf+0x20>)
 800e212:	f853 2b04 	ldr.w	r2, [r3], #4
 800e216:	6800      	ldr	r0, [r0, #0]
 800e218:	9301      	str	r3, [sp, #4]
 800e21a:	f000 f83f 	bl	800e29c <_vfiprintf_r>
 800e21e:	b002      	add	sp, #8
 800e220:	f85d eb04 	ldr.w	lr, [sp], #4
 800e224:	b003      	add	sp, #12
 800e226:	4770      	bx	lr
 800e228:	2000007c 	.word	0x2000007c

0800e22c <abort>:
 800e22c:	b508      	push	{r3, lr}
 800e22e:	2006      	movs	r0, #6
 800e230:	f000 fa0c 	bl	800e64c <raise>
 800e234:	2001      	movs	r0, #1
 800e236:	f7f5 fdab 	bl	8003d90 <_exit>

0800e23a <_malloc_usable_size_r>:
 800e23a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e23e:	1f18      	subs	r0, r3, #4
 800e240:	2b00      	cmp	r3, #0
 800e242:	bfbc      	itt	lt
 800e244:	580b      	ldrlt	r3, [r1, r0]
 800e246:	18c0      	addlt	r0, r0, r3
 800e248:	4770      	bx	lr

0800e24a <__sfputc_r>:
 800e24a:	6893      	ldr	r3, [r2, #8]
 800e24c:	3b01      	subs	r3, #1
 800e24e:	2b00      	cmp	r3, #0
 800e250:	b410      	push	{r4}
 800e252:	6093      	str	r3, [r2, #8]
 800e254:	da08      	bge.n	800e268 <__sfputc_r+0x1e>
 800e256:	6994      	ldr	r4, [r2, #24]
 800e258:	42a3      	cmp	r3, r4
 800e25a:	db01      	blt.n	800e260 <__sfputc_r+0x16>
 800e25c:	290a      	cmp	r1, #10
 800e25e:	d103      	bne.n	800e268 <__sfputc_r+0x1e>
 800e260:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e264:	f000 b934 	b.w	800e4d0 <__swbuf_r>
 800e268:	6813      	ldr	r3, [r2, #0]
 800e26a:	1c58      	adds	r0, r3, #1
 800e26c:	6010      	str	r0, [r2, #0]
 800e26e:	7019      	strb	r1, [r3, #0]
 800e270:	4608      	mov	r0, r1
 800e272:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <__sfputs_r>:
 800e278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e27a:	4606      	mov	r6, r0
 800e27c:	460f      	mov	r7, r1
 800e27e:	4614      	mov	r4, r2
 800e280:	18d5      	adds	r5, r2, r3
 800e282:	42ac      	cmp	r4, r5
 800e284:	d101      	bne.n	800e28a <__sfputs_r+0x12>
 800e286:	2000      	movs	r0, #0
 800e288:	e007      	b.n	800e29a <__sfputs_r+0x22>
 800e28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e28e:	463a      	mov	r2, r7
 800e290:	4630      	mov	r0, r6
 800e292:	f7ff ffda 	bl	800e24a <__sfputc_r>
 800e296:	1c43      	adds	r3, r0, #1
 800e298:	d1f3      	bne.n	800e282 <__sfputs_r+0xa>
 800e29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e29c <_vfiprintf_r>:
 800e29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a0:	460d      	mov	r5, r1
 800e2a2:	b09d      	sub	sp, #116	; 0x74
 800e2a4:	4614      	mov	r4, r2
 800e2a6:	4698      	mov	r8, r3
 800e2a8:	4606      	mov	r6, r0
 800e2aa:	b118      	cbz	r0, 800e2b4 <_vfiprintf_r+0x18>
 800e2ac:	6a03      	ldr	r3, [r0, #32]
 800e2ae:	b90b      	cbnz	r3, 800e2b4 <_vfiprintf_r+0x18>
 800e2b0:	f7fe f884 	bl	800c3bc <__sinit>
 800e2b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2b6:	07d9      	lsls	r1, r3, #31
 800e2b8:	d405      	bmi.n	800e2c6 <_vfiprintf_r+0x2a>
 800e2ba:	89ab      	ldrh	r3, [r5, #12]
 800e2bc:	059a      	lsls	r2, r3, #22
 800e2be:	d402      	bmi.n	800e2c6 <_vfiprintf_r+0x2a>
 800e2c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2c2:	f7fe f9e7 	bl	800c694 <__retarget_lock_acquire_recursive>
 800e2c6:	89ab      	ldrh	r3, [r5, #12]
 800e2c8:	071b      	lsls	r3, r3, #28
 800e2ca:	d501      	bpl.n	800e2d0 <_vfiprintf_r+0x34>
 800e2cc:	692b      	ldr	r3, [r5, #16]
 800e2ce:	b99b      	cbnz	r3, 800e2f8 <_vfiprintf_r+0x5c>
 800e2d0:	4629      	mov	r1, r5
 800e2d2:	4630      	mov	r0, r6
 800e2d4:	f000 f93a 	bl	800e54c <__swsetup_r>
 800e2d8:	b170      	cbz	r0, 800e2f8 <_vfiprintf_r+0x5c>
 800e2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2dc:	07dc      	lsls	r4, r3, #31
 800e2de:	d504      	bpl.n	800e2ea <_vfiprintf_r+0x4e>
 800e2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e4:	b01d      	add	sp, #116	; 0x74
 800e2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ea:	89ab      	ldrh	r3, [r5, #12]
 800e2ec:	0598      	lsls	r0, r3, #22
 800e2ee:	d4f7      	bmi.n	800e2e0 <_vfiprintf_r+0x44>
 800e2f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2f2:	f7fe f9d0 	bl	800c696 <__retarget_lock_release_recursive>
 800e2f6:	e7f3      	b.n	800e2e0 <_vfiprintf_r+0x44>
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	9309      	str	r3, [sp, #36]	; 0x24
 800e2fc:	2320      	movs	r3, #32
 800e2fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e302:	f8cd 800c 	str.w	r8, [sp, #12]
 800e306:	2330      	movs	r3, #48	; 0x30
 800e308:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e4bc <_vfiprintf_r+0x220>
 800e30c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e310:	f04f 0901 	mov.w	r9, #1
 800e314:	4623      	mov	r3, r4
 800e316:	469a      	mov	sl, r3
 800e318:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e31c:	b10a      	cbz	r2, 800e322 <_vfiprintf_r+0x86>
 800e31e:	2a25      	cmp	r2, #37	; 0x25
 800e320:	d1f9      	bne.n	800e316 <_vfiprintf_r+0x7a>
 800e322:	ebba 0b04 	subs.w	fp, sl, r4
 800e326:	d00b      	beq.n	800e340 <_vfiprintf_r+0xa4>
 800e328:	465b      	mov	r3, fp
 800e32a:	4622      	mov	r2, r4
 800e32c:	4629      	mov	r1, r5
 800e32e:	4630      	mov	r0, r6
 800e330:	f7ff ffa2 	bl	800e278 <__sfputs_r>
 800e334:	3001      	adds	r0, #1
 800e336:	f000 80a9 	beq.w	800e48c <_vfiprintf_r+0x1f0>
 800e33a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e33c:	445a      	add	r2, fp
 800e33e:	9209      	str	r2, [sp, #36]	; 0x24
 800e340:	f89a 3000 	ldrb.w	r3, [sl]
 800e344:	2b00      	cmp	r3, #0
 800e346:	f000 80a1 	beq.w	800e48c <_vfiprintf_r+0x1f0>
 800e34a:	2300      	movs	r3, #0
 800e34c:	f04f 32ff 	mov.w	r2, #4294967295
 800e350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e354:	f10a 0a01 	add.w	sl, sl, #1
 800e358:	9304      	str	r3, [sp, #16]
 800e35a:	9307      	str	r3, [sp, #28]
 800e35c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e360:	931a      	str	r3, [sp, #104]	; 0x68
 800e362:	4654      	mov	r4, sl
 800e364:	2205      	movs	r2, #5
 800e366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e36a:	4854      	ldr	r0, [pc, #336]	; (800e4bc <_vfiprintf_r+0x220>)
 800e36c:	f7f1 ff30 	bl	80001d0 <memchr>
 800e370:	9a04      	ldr	r2, [sp, #16]
 800e372:	b9d8      	cbnz	r0, 800e3ac <_vfiprintf_r+0x110>
 800e374:	06d1      	lsls	r1, r2, #27
 800e376:	bf44      	itt	mi
 800e378:	2320      	movmi	r3, #32
 800e37a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e37e:	0713      	lsls	r3, r2, #28
 800e380:	bf44      	itt	mi
 800e382:	232b      	movmi	r3, #43	; 0x2b
 800e384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e388:	f89a 3000 	ldrb.w	r3, [sl]
 800e38c:	2b2a      	cmp	r3, #42	; 0x2a
 800e38e:	d015      	beq.n	800e3bc <_vfiprintf_r+0x120>
 800e390:	9a07      	ldr	r2, [sp, #28]
 800e392:	4654      	mov	r4, sl
 800e394:	2000      	movs	r0, #0
 800e396:	f04f 0c0a 	mov.w	ip, #10
 800e39a:	4621      	mov	r1, r4
 800e39c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3a0:	3b30      	subs	r3, #48	; 0x30
 800e3a2:	2b09      	cmp	r3, #9
 800e3a4:	d94d      	bls.n	800e442 <_vfiprintf_r+0x1a6>
 800e3a6:	b1b0      	cbz	r0, 800e3d6 <_vfiprintf_r+0x13a>
 800e3a8:	9207      	str	r2, [sp, #28]
 800e3aa:	e014      	b.n	800e3d6 <_vfiprintf_r+0x13a>
 800e3ac:	eba0 0308 	sub.w	r3, r0, r8
 800e3b0:	fa09 f303 	lsl.w	r3, r9, r3
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	9304      	str	r3, [sp, #16]
 800e3b8:	46a2      	mov	sl, r4
 800e3ba:	e7d2      	b.n	800e362 <_vfiprintf_r+0xc6>
 800e3bc:	9b03      	ldr	r3, [sp, #12]
 800e3be:	1d19      	adds	r1, r3, #4
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	9103      	str	r1, [sp, #12]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	bfbb      	ittet	lt
 800e3c8:	425b      	neglt	r3, r3
 800e3ca:	f042 0202 	orrlt.w	r2, r2, #2
 800e3ce:	9307      	strge	r3, [sp, #28]
 800e3d0:	9307      	strlt	r3, [sp, #28]
 800e3d2:	bfb8      	it	lt
 800e3d4:	9204      	strlt	r2, [sp, #16]
 800e3d6:	7823      	ldrb	r3, [r4, #0]
 800e3d8:	2b2e      	cmp	r3, #46	; 0x2e
 800e3da:	d10c      	bne.n	800e3f6 <_vfiprintf_r+0x15a>
 800e3dc:	7863      	ldrb	r3, [r4, #1]
 800e3de:	2b2a      	cmp	r3, #42	; 0x2a
 800e3e0:	d134      	bne.n	800e44c <_vfiprintf_r+0x1b0>
 800e3e2:	9b03      	ldr	r3, [sp, #12]
 800e3e4:	1d1a      	adds	r2, r3, #4
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	9203      	str	r2, [sp, #12]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	bfb8      	it	lt
 800e3ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3f2:	3402      	adds	r4, #2
 800e3f4:	9305      	str	r3, [sp, #20]
 800e3f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e4cc <_vfiprintf_r+0x230>
 800e3fa:	7821      	ldrb	r1, [r4, #0]
 800e3fc:	2203      	movs	r2, #3
 800e3fe:	4650      	mov	r0, sl
 800e400:	f7f1 fee6 	bl	80001d0 <memchr>
 800e404:	b138      	cbz	r0, 800e416 <_vfiprintf_r+0x17a>
 800e406:	9b04      	ldr	r3, [sp, #16]
 800e408:	eba0 000a 	sub.w	r0, r0, sl
 800e40c:	2240      	movs	r2, #64	; 0x40
 800e40e:	4082      	lsls	r2, r0
 800e410:	4313      	orrs	r3, r2
 800e412:	3401      	adds	r4, #1
 800e414:	9304      	str	r3, [sp, #16]
 800e416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e41a:	4829      	ldr	r0, [pc, #164]	; (800e4c0 <_vfiprintf_r+0x224>)
 800e41c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e420:	2206      	movs	r2, #6
 800e422:	f7f1 fed5 	bl	80001d0 <memchr>
 800e426:	2800      	cmp	r0, #0
 800e428:	d03f      	beq.n	800e4aa <_vfiprintf_r+0x20e>
 800e42a:	4b26      	ldr	r3, [pc, #152]	; (800e4c4 <_vfiprintf_r+0x228>)
 800e42c:	bb1b      	cbnz	r3, 800e476 <_vfiprintf_r+0x1da>
 800e42e:	9b03      	ldr	r3, [sp, #12]
 800e430:	3307      	adds	r3, #7
 800e432:	f023 0307 	bic.w	r3, r3, #7
 800e436:	3308      	adds	r3, #8
 800e438:	9303      	str	r3, [sp, #12]
 800e43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e43c:	443b      	add	r3, r7
 800e43e:	9309      	str	r3, [sp, #36]	; 0x24
 800e440:	e768      	b.n	800e314 <_vfiprintf_r+0x78>
 800e442:	fb0c 3202 	mla	r2, ip, r2, r3
 800e446:	460c      	mov	r4, r1
 800e448:	2001      	movs	r0, #1
 800e44a:	e7a6      	b.n	800e39a <_vfiprintf_r+0xfe>
 800e44c:	2300      	movs	r3, #0
 800e44e:	3401      	adds	r4, #1
 800e450:	9305      	str	r3, [sp, #20]
 800e452:	4619      	mov	r1, r3
 800e454:	f04f 0c0a 	mov.w	ip, #10
 800e458:	4620      	mov	r0, r4
 800e45a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e45e:	3a30      	subs	r2, #48	; 0x30
 800e460:	2a09      	cmp	r2, #9
 800e462:	d903      	bls.n	800e46c <_vfiprintf_r+0x1d0>
 800e464:	2b00      	cmp	r3, #0
 800e466:	d0c6      	beq.n	800e3f6 <_vfiprintf_r+0x15a>
 800e468:	9105      	str	r1, [sp, #20]
 800e46a:	e7c4      	b.n	800e3f6 <_vfiprintf_r+0x15a>
 800e46c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e470:	4604      	mov	r4, r0
 800e472:	2301      	movs	r3, #1
 800e474:	e7f0      	b.n	800e458 <_vfiprintf_r+0x1bc>
 800e476:	ab03      	add	r3, sp, #12
 800e478:	9300      	str	r3, [sp, #0]
 800e47a:	462a      	mov	r2, r5
 800e47c:	4b12      	ldr	r3, [pc, #72]	; (800e4c8 <_vfiprintf_r+0x22c>)
 800e47e:	a904      	add	r1, sp, #16
 800e480:	4630      	mov	r0, r6
 800e482:	f7fd fb5b 	bl	800bb3c <_printf_float>
 800e486:	4607      	mov	r7, r0
 800e488:	1c78      	adds	r0, r7, #1
 800e48a:	d1d6      	bne.n	800e43a <_vfiprintf_r+0x19e>
 800e48c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e48e:	07d9      	lsls	r1, r3, #31
 800e490:	d405      	bmi.n	800e49e <_vfiprintf_r+0x202>
 800e492:	89ab      	ldrh	r3, [r5, #12]
 800e494:	059a      	lsls	r2, r3, #22
 800e496:	d402      	bmi.n	800e49e <_vfiprintf_r+0x202>
 800e498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e49a:	f7fe f8fc 	bl	800c696 <__retarget_lock_release_recursive>
 800e49e:	89ab      	ldrh	r3, [r5, #12]
 800e4a0:	065b      	lsls	r3, r3, #25
 800e4a2:	f53f af1d 	bmi.w	800e2e0 <_vfiprintf_r+0x44>
 800e4a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4a8:	e71c      	b.n	800e2e4 <_vfiprintf_r+0x48>
 800e4aa:	ab03      	add	r3, sp, #12
 800e4ac:	9300      	str	r3, [sp, #0]
 800e4ae:	462a      	mov	r2, r5
 800e4b0:	4b05      	ldr	r3, [pc, #20]	; (800e4c8 <_vfiprintf_r+0x22c>)
 800e4b2:	a904      	add	r1, sp, #16
 800e4b4:	4630      	mov	r0, r6
 800e4b6:	f7fd fde5 	bl	800c084 <_printf_i>
 800e4ba:	e7e4      	b.n	800e486 <_vfiprintf_r+0x1ea>
 800e4bc:	0800f68c 	.word	0x0800f68c
 800e4c0:	0800f696 	.word	0x0800f696
 800e4c4:	0800bb3d 	.word	0x0800bb3d
 800e4c8:	0800e279 	.word	0x0800e279
 800e4cc:	0800f692 	.word	0x0800f692

0800e4d0 <__swbuf_r>:
 800e4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4d2:	460e      	mov	r6, r1
 800e4d4:	4614      	mov	r4, r2
 800e4d6:	4605      	mov	r5, r0
 800e4d8:	b118      	cbz	r0, 800e4e2 <__swbuf_r+0x12>
 800e4da:	6a03      	ldr	r3, [r0, #32]
 800e4dc:	b90b      	cbnz	r3, 800e4e2 <__swbuf_r+0x12>
 800e4de:	f7fd ff6d 	bl	800c3bc <__sinit>
 800e4e2:	69a3      	ldr	r3, [r4, #24]
 800e4e4:	60a3      	str	r3, [r4, #8]
 800e4e6:	89a3      	ldrh	r3, [r4, #12]
 800e4e8:	071a      	lsls	r2, r3, #28
 800e4ea:	d525      	bpl.n	800e538 <__swbuf_r+0x68>
 800e4ec:	6923      	ldr	r3, [r4, #16]
 800e4ee:	b31b      	cbz	r3, 800e538 <__swbuf_r+0x68>
 800e4f0:	6823      	ldr	r3, [r4, #0]
 800e4f2:	6922      	ldr	r2, [r4, #16]
 800e4f4:	1a98      	subs	r0, r3, r2
 800e4f6:	6963      	ldr	r3, [r4, #20]
 800e4f8:	b2f6      	uxtb	r6, r6
 800e4fa:	4283      	cmp	r3, r0
 800e4fc:	4637      	mov	r7, r6
 800e4fe:	dc04      	bgt.n	800e50a <__swbuf_r+0x3a>
 800e500:	4621      	mov	r1, r4
 800e502:	4628      	mov	r0, r5
 800e504:	f7ff fdac 	bl	800e060 <_fflush_r>
 800e508:	b9e0      	cbnz	r0, 800e544 <__swbuf_r+0x74>
 800e50a:	68a3      	ldr	r3, [r4, #8]
 800e50c:	3b01      	subs	r3, #1
 800e50e:	60a3      	str	r3, [r4, #8]
 800e510:	6823      	ldr	r3, [r4, #0]
 800e512:	1c5a      	adds	r2, r3, #1
 800e514:	6022      	str	r2, [r4, #0]
 800e516:	701e      	strb	r6, [r3, #0]
 800e518:	6962      	ldr	r2, [r4, #20]
 800e51a:	1c43      	adds	r3, r0, #1
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d004      	beq.n	800e52a <__swbuf_r+0x5a>
 800e520:	89a3      	ldrh	r3, [r4, #12]
 800e522:	07db      	lsls	r3, r3, #31
 800e524:	d506      	bpl.n	800e534 <__swbuf_r+0x64>
 800e526:	2e0a      	cmp	r6, #10
 800e528:	d104      	bne.n	800e534 <__swbuf_r+0x64>
 800e52a:	4621      	mov	r1, r4
 800e52c:	4628      	mov	r0, r5
 800e52e:	f7ff fd97 	bl	800e060 <_fflush_r>
 800e532:	b938      	cbnz	r0, 800e544 <__swbuf_r+0x74>
 800e534:	4638      	mov	r0, r7
 800e536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e538:	4621      	mov	r1, r4
 800e53a:	4628      	mov	r0, r5
 800e53c:	f000 f806 	bl	800e54c <__swsetup_r>
 800e540:	2800      	cmp	r0, #0
 800e542:	d0d5      	beq.n	800e4f0 <__swbuf_r+0x20>
 800e544:	f04f 37ff 	mov.w	r7, #4294967295
 800e548:	e7f4      	b.n	800e534 <__swbuf_r+0x64>
	...

0800e54c <__swsetup_r>:
 800e54c:	b538      	push	{r3, r4, r5, lr}
 800e54e:	4b2a      	ldr	r3, [pc, #168]	; (800e5f8 <__swsetup_r+0xac>)
 800e550:	4605      	mov	r5, r0
 800e552:	6818      	ldr	r0, [r3, #0]
 800e554:	460c      	mov	r4, r1
 800e556:	b118      	cbz	r0, 800e560 <__swsetup_r+0x14>
 800e558:	6a03      	ldr	r3, [r0, #32]
 800e55a:	b90b      	cbnz	r3, 800e560 <__swsetup_r+0x14>
 800e55c:	f7fd ff2e 	bl	800c3bc <__sinit>
 800e560:	89a3      	ldrh	r3, [r4, #12]
 800e562:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e566:	0718      	lsls	r0, r3, #28
 800e568:	d422      	bmi.n	800e5b0 <__swsetup_r+0x64>
 800e56a:	06d9      	lsls	r1, r3, #27
 800e56c:	d407      	bmi.n	800e57e <__swsetup_r+0x32>
 800e56e:	2309      	movs	r3, #9
 800e570:	602b      	str	r3, [r5, #0]
 800e572:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e576:	81a3      	strh	r3, [r4, #12]
 800e578:	f04f 30ff 	mov.w	r0, #4294967295
 800e57c:	e034      	b.n	800e5e8 <__swsetup_r+0x9c>
 800e57e:	0758      	lsls	r0, r3, #29
 800e580:	d512      	bpl.n	800e5a8 <__swsetup_r+0x5c>
 800e582:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e584:	b141      	cbz	r1, 800e598 <__swsetup_r+0x4c>
 800e586:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e58a:	4299      	cmp	r1, r3
 800e58c:	d002      	beq.n	800e594 <__swsetup_r+0x48>
 800e58e:	4628      	mov	r0, r5
 800e590:	f7fe ff0c 	bl	800d3ac <_free_r>
 800e594:	2300      	movs	r3, #0
 800e596:	6363      	str	r3, [r4, #52]	; 0x34
 800e598:	89a3      	ldrh	r3, [r4, #12]
 800e59a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e59e:	81a3      	strh	r3, [r4, #12]
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	6063      	str	r3, [r4, #4]
 800e5a4:	6923      	ldr	r3, [r4, #16]
 800e5a6:	6023      	str	r3, [r4, #0]
 800e5a8:	89a3      	ldrh	r3, [r4, #12]
 800e5aa:	f043 0308 	orr.w	r3, r3, #8
 800e5ae:	81a3      	strh	r3, [r4, #12]
 800e5b0:	6923      	ldr	r3, [r4, #16]
 800e5b2:	b94b      	cbnz	r3, 800e5c8 <__swsetup_r+0x7c>
 800e5b4:	89a3      	ldrh	r3, [r4, #12]
 800e5b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e5ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5be:	d003      	beq.n	800e5c8 <__swsetup_r+0x7c>
 800e5c0:	4621      	mov	r1, r4
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	f000 f884 	bl	800e6d0 <__smakebuf_r>
 800e5c8:	89a0      	ldrh	r0, [r4, #12]
 800e5ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e5ce:	f010 0301 	ands.w	r3, r0, #1
 800e5d2:	d00a      	beq.n	800e5ea <__swsetup_r+0x9e>
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	60a3      	str	r3, [r4, #8]
 800e5d8:	6963      	ldr	r3, [r4, #20]
 800e5da:	425b      	negs	r3, r3
 800e5dc:	61a3      	str	r3, [r4, #24]
 800e5de:	6923      	ldr	r3, [r4, #16]
 800e5e0:	b943      	cbnz	r3, 800e5f4 <__swsetup_r+0xa8>
 800e5e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e5e6:	d1c4      	bne.n	800e572 <__swsetup_r+0x26>
 800e5e8:	bd38      	pop	{r3, r4, r5, pc}
 800e5ea:	0781      	lsls	r1, r0, #30
 800e5ec:	bf58      	it	pl
 800e5ee:	6963      	ldrpl	r3, [r4, #20]
 800e5f0:	60a3      	str	r3, [r4, #8]
 800e5f2:	e7f4      	b.n	800e5de <__swsetup_r+0x92>
 800e5f4:	2000      	movs	r0, #0
 800e5f6:	e7f7      	b.n	800e5e8 <__swsetup_r+0x9c>
 800e5f8:	2000007c 	.word	0x2000007c

0800e5fc <_raise_r>:
 800e5fc:	291f      	cmp	r1, #31
 800e5fe:	b538      	push	{r3, r4, r5, lr}
 800e600:	4604      	mov	r4, r0
 800e602:	460d      	mov	r5, r1
 800e604:	d904      	bls.n	800e610 <_raise_r+0x14>
 800e606:	2316      	movs	r3, #22
 800e608:	6003      	str	r3, [r0, #0]
 800e60a:	f04f 30ff 	mov.w	r0, #4294967295
 800e60e:	bd38      	pop	{r3, r4, r5, pc}
 800e610:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e612:	b112      	cbz	r2, 800e61a <_raise_r+0x1e>
 800e614:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e618:	b94b      	cbnz	r3, 800e62e <_raise_r+0x32>
 800e61a:	4620      	mov	r0, r4
 800e61c:	f000 f830 	bl	800e680 <_getpid_r>
 800e620:	462a      	mov	r2, r5
 800e622:	4601      	mov	r1, r0
 800e624:	4620      	mov	r0, r4
 800e626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e62a:	f000 b817 	b.w	800e65c <_kill_r>
 800e62e:	2b01      	cmp	r3, #1
 800e630:	d00a      	beq.n	800e648 <_raise_r+0x4c>
 800e632:	1c59      	adds	r1, r3, #1
 800e634:	d103      	bne.n	800e63e <_raise_r+0x42>
 800e636:	2316      	movs	r3, #22
 800e638:	6003      	str	r3, [r0, #0]
 800e63a:	2001      	movs	r0, #1
 800e63c:	e7e7      	b.n	800e60e <_raise_r+0x12>
 800e63e:	2400      	movs	r4, #0
 800e640:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e644:	4628      	mov	r0, r5
 800e646:	4798      	blx	r3
 800e648:	2000      	movs	r0, #0
 800e64a:	e7e0      	b.n	800e60e <_raise_r+0x12>

0800e64c <raise>:
 800e64c:	4b02      	ldr	r3, [pc, #8]	; (800e658 <raise+0xc>)
 800e64e:	4601      	mov	r1, r0
 800e650:	6818      	ldr	r0, [r3, #0]
 800e652:	f7ff bfd3 	b.w	800e5fc <_raise_r>
 800e656:	bf00      	nop
 800e658:	2000007c 	.word	0x2000007c

0800e65c <_kill_r>:
 800e65c:	b538      	push	{r3, r4, r5, lr}
 800e65e:	4d07      	ldr	r5, [pc, #28]	; (800e67c <_kill_r+0x20>)
 800e660:	2300      	movs	r3, #0
 800e662:	4604      	mov	r4, r0
 800e664:	4608      	mov	r0, r1
 800e666:	4611      	mov	r1, r2
 800e668:	602b      	str	r3, [r5, #0]
 800e66a:	f7f5 fb81 	bl	8003d70 <_kill>
 800e66e:	1c43      	adds	r3, r0, #1
 800e670:	d102      	bne.n	800e678 <_kill_r+0x1c>
 800e672:	682b      	ldr	r3, [r5, #0]
 800e674:	b103      	cbz	r3, 800e678 <_kill_r+0x1c>
 800e676:	6023      	str	r3, [r4, #0]
 800e678:	bd38      	pop	{r3, r4, r5, pc}
 800e67a:	bf00      	nop
 800e67c:	200054e4 	.word	0x200054e4

0800e680 <_getpid_r>:
 800e680:	f7f5 bb6e 	b.w	8003d60 <_getpid>

0800e684 <__swhatbuf_r>:
 800e684:	b570      	push	{r4, r5, r6, lr}
 800e686:	460c      	mov	r4, r1
 800e688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e68c:	2900      	cmp	r1, #0
 800e68e:	b096      	sub	sp, #88	; 0x58
 800e690:	4615      	mov	r5, r2
 800e692:	461e      	mov	r6, r3
 800e694:	da0d      	bge.n	800e6b2 <__swhatbuf_r+0x2e>
 800e696:	89a3      	ldrh	r3, [r4, #12]
 800e698:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e69c:	f04f 0100 	mov.w	r1, #0
 800e6a0:	bf0c      	ite	eq
 800e6a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e6a6:	2340      	movne	r3, #64	; 0x40
 800e6a8:	2000      	movs	r0, #0
 800e6aa:	6031      	str	r1, [r6, #0]
 800e6ac:	602b      	str	r3, [r5, #0]
 800e6ae:	b016      	add	sp, #88	; 0x58
 800e6b0:	bd70      	pop	{r4, r5, r6, pc}
 800e6b2:	466a      	mov	r2, sp
 800e6b4:	f000 f848 	bl	800e748 <_fstat_r>
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	dbec      	blt.n	800e696 <__swhatbuf_r+0x12>
 800e6bc:	9901      	ldr	r1, [sp, #4]
 800e6be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e6c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e6c6:	4259      	negs	r1, r3
 800e6c8:	4159      	adcs	r1, r3
 800e6ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6ce:	e7eb      	b.n	800e6a8 <__swhatbuf_r+0x24>

0800e6d0 <__smakebuf_r>:
 800e6d0:	898b      	ldrh	r3, [r1, #12]
 800e6d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e6d4:	079d      	lsls	r5, r3, #30
 800e6d6:	4606      	mov	r6, r0
 800e6d8:	460c      	mov	r4, r1
 800e6da:	d507      	bpl.n	800e6ec <__smakebuf_r+0x1c>
 800e6dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e6e0:	6023      	str	r3, [r4, #0]
 800e6e2:	6123      	str	r3, [r4, #16]
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	6163      	str	r3, [r4, #20]
 800e6e8:	b002      	add	sp, #8
 800e6ea:	bd70      	pop	{r4, r5, r6, pc}
 800e6ec:	ab01      	add	r3, sp, #4
 800e6ee:	466a      	mov	r2, sp
 800e6f0:	f7ff ffc8 	bl	800e684 <__swhatbuf_r>
 800e6f4:	9900      	ldr	r1, [sp, #0]
 800e6f6:	4605      	mov	r5, r0
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	f7fe fecb 	bl	800d494 <_malloc_r>
 800e6fe:	b948      	cbnz	r0, 800e714 <__smakebuf_r+0x44>
 800e700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e704:	059a      	lsls	r2, r3, #22
 800e706:	d4ef      	bmi.n	800e6e8 <__smakebuf_r+0x18>
 800e708:	f023 0303 	bic.w	r3, r3, #3
 800e70c:	f043 0302 	orr.w	r3, r3, #2
 800e710:	81a3      	strh	r3, [r4, #12]
 800e712:	e7e3      	b.n	800e6dc <__smakebuf_r+0xc>
 800e714:	89a3      	ldrh	r3, [r4, #12]
 800e716:	6020      	str	r0, [r4, #0]
 800e718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e71c:	81a3      	strh	r3, [r4, #12]
 800e71e:	9b00      	ldr	r3, [sp, #0]
 800e720:	6163      	str	r3, [r4, #20]
 800e722:	9b01      	ldr	r3, [sp, #4]
 800e724:	6120      	str	r0, [r4, #16]
 800e726:	b15b      	cbz	r3, 800e740 <__smakebuf_r+0x70>
 800e728:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e72c:	4630      	mov	r0, r6
 800e72e:	f000 f81d 	bl	800e76c <_isatty_r>
 800e732:	b128      	cbz	r0, 800e740 <__smakebuf_r+0x70>
 800e734:	89a3      	ldrh	r3, [r4, #12]
 800e736:	f023 0303 	bic.w	r3, r3, #3
 800e73a:	f043 0301 	orr.w	r3, r3, #1
 800e73e:	81a3      	strh	r3, [r4, #12]
 800e740:	89a3      	ldrh	r3, [r4, #12]
 800e742:	431d      	orrs	r5, r3
 800e744:	81a5      	strh	r5, [r4, #12]
 800e746:	e7cf      	b.n	800e6e8 <__smakebuf_r+0x18>

0800e748 <_fstat_r>:
 800e748:	b538      	push	{r3, r4, r5, lr}
 800e74a:	4d07      	ldr	r5, [pc, #28]	; (800e768 <_fstat_r+0x20>)
 800e74c:	2300      	movs	r3, #0
 800e74e:	4604      	mov	r4, r0
 800e750:	4608      	mov	r0, r1
 800e752:	4611      	mov	r1, r2
 800e754:	602b      	str	r3, [r5, #0]
 800e756:	f7f5 fb6a 	bl	8003e2e <_fstat>
 800e75a:	1c43      	adds	r3, r0, #1
 800e75c:	d102      	bne.n	800e764 <_fstat_r+0x1c>
 800e75e:	682b      	ldr	r3, [r5, #0]
 800e760:	b103      	cbz	r3, 800e764 <_fstat_r+0x1c>
 800e762:	6023      	str	r3, [r4, #0]
 800e764:	bd38      	pop	{r3, r4, r5, pc}
 800e766:	bf00      	nop
 800e768:	200054e4 	.word	0x200054e4

0800e76c <_isatty_r>:
 800e76c:	b538      	push	{r3, r4, r5, lr}
 800e76e:	4d06      	ldr	r5, [pc, #24]	; (800e788 <_isatty_r+0x1c>)
 800e770:	2300      	movs	r3, #0
 800e772:	4604      	mov	r4, r0
 800e774:	4608      	mov	r0, r1
 800e776:	602b      	str	r3, [r5, #0]
 800e778:	f7f5 fb69 	bl	8003e4e <_isatty>
 800e77c:	1c43      	adds	r3, r0, #1
 800e77e:	d102      	bne.n	800e786 <_isatty_r+0x1a>
 800e780:	682b      	ldr	r3, [r5, #0]
 800e782:	b103      	cbz	r3, 800e786 <_isatty_r+0x1a>
 800e784:	6023      	str	r3, [r4, #0]
 800e786:	bd38      	pop	{r3, r4, r5, pc}
 800e788:	200054e4 	.word	0x200054e4

0800e78c <_init>:
 800e78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e78e:	bf00      	nop
 800e790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e792:	bc08      	pop	{r3}
 800e794:	469e      	mov	lr, r3
 800e796:	4770      	bx	lr

0800e798 <_fini>:
 800e798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e79a:	bf00      	nop
 800e79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e79e:	bc08      	pop	{r3}
 800e7a0:	469e      	mov	lr, r3
 800e7a2:	4770      	bx	lr
